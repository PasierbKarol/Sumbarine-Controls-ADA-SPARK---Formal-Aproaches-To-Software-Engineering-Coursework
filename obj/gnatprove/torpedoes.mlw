(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TstoredtorpedoesB" defined at torpedoes.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TstoredtorpedoesB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tstoredtorpedoesB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tstoredtorpedoesB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstoredtorpedoesB__ref =
  { mutable tstoredtorpedoesB__content "model_trace:" "name:" : tstoredtorpedoesB }
 
 function tstoredtorpedoesB__ref___projection 
   (a : tstoredtorpedoesB__ref) : tstoredtorpedoesB =
  a.tstoredtorpedoesB__content
 
 meta "model_projection" function tstoredtorpedoesB__ref___projection
 
 meta "inline : no" function tstoredtorpedoesB__ref___projection
 
 val tstoredtorpedoesB__havoc 
   (x : tstoredtorpedoesB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TstoredtorpedoesB" defined at torpedoes.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TstoredtorpedoesB__rep
 use        Torpedoes__TstoredtorpedoesB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__TstoredtorpedoesB.tstoredtorpedoesB) : int =
  (Torpedoes__TstoredtorpedoesB.tstoredtorpedoesB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__TstoredtorpedoesB.tstoredtorpedoesB, 
 predicate in_range = Torpedoes__TstoredtorpedoesB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "storedtorpedoes" defined at torpedoes.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__storedtorpedoes
 use import "_gnatprove_standard".Main
 use import "int".Int

 type storedtorpedoes =
  < range 0 20 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  20
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = storedtorpedoes, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type storedtorpedoes__ref =
  { mutable storedtorpedoes__content "model_trace:" "name:" : storedtorpedoes }
 
 function storedtorpedoes__ref___projection 
   (a : storedtorpedoes__ref) : storedtorpedoes =
  a.storedtorpedoes__content
 
 meta "model_projection" function storedtorpedoes__ref___projection
 
 meta "inline : no" function storedtorpedoes__ref___projection
 
 val storedtorpedoes__havoc 
   (x : storedtorpedoes__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "storedtorpedoes" defined at torpedoes.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__storedtorpedoes__rep
 use        Torpedoes__storedtorpedoes
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__storedtorpedoes.storedtorpedoes) : int =
  (Torpedoes__storedtorpedoes.storedtorpedoes'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__storedtorpedoes.storedtorpedoes, 
 predicate in_range = Torpedoes__storedtorpedoes.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "baystate" defined at torpedoes.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__baystate
 use import "_gnatprove_standard".Main
 use import "int".Int

 type baystate 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = baystate, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type baystate__ref =
  { mutable baystate__content "model_trace:" "name:" : baystate }
 
 function baystate__ref___projection 
   (a : baystate__ref) : baystate =
  a.baystate__content
 
 meta "model_projection" function baystate__ref___projection
 
 meta "inline : no" function baystate__ref___projection
 
 val baystate__havoc 
   (x : baystate__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "baystate" defined at torpedoes.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__baystate__rep
 use        Torpedoes__baystate
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__baystate.baystate, 
 predicate in_range = Torpedoes__baystate.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TtorpedoesbaynumberB" defined at torpedoes.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TtorpedoesbaynumberB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttorpedoesbaynumberB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttorpedoesbaynumberB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttorpedoesbaynumberB__ref =
  { mutable ttorpedoesbaynumberB__content "model_trace:" "name:" : ttorpedoesbaynumberB }
 
 function ttorpedoesbaynumberB__ref___projection 
   (a : ttorpedoesbaynumberB__ref) : ttorpedoesbaynumberB =
  a.ttorpedoesbaynumberB__content
 
 meta "model_projection" function ttorpedoesbaynumberB__ref___projection
 
 meta "inline : no" function ttorpedoesbaynumberB__ref___projection
 
 val ttorpedoesbaynumberB__havoc 
   (x : ttorpedoesbaynumberB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtorpedoesbaynumberB" defined at torpedoes.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TtorpedoesbaynumberB__rep
 use        Torpedoes__TtorpedoesbaynumberB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__TtorpedoesbaynumberB.ttorpedoesbaynumberB) : int =
  (Torpedoes__TtorpedoesbaynumberB.ttorpedoesbaynumberB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__TtorpedoesbaynumberB.ttorpedoesbaynumberB, 
 predicate in_range = Torpedoes__TtorpedoesbaynumberB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "torpedoesbaynumber" defined at torpedoes.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__torpedoesbaynumber
 use import "_gnatprove_standard".Main
 use import "int".Int

 type torpedoesbaynumber =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = torpedoesbaynumber, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type torpedoesbaynumber__ref =
  { mutable torpedoesbaynumber__content "model_trace:" "name:" : torpedoesbaynumber }
 
 function torpedoesbaynumber__ref___projection 
   (a : torpedoesbaynumber__ref) : torpedoesbaynumber =
  a.torpedoesbaynumber__content
 
 meta "model_projection" function torpedoesbaynumber__ref___projection
 
 meta "inline : no" function torpedoesbaynumber__ref___projection
 
 val torpedoesbaynumber__havoc 
   (x : torpedoesbaynumber__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "torpedoesbaynumber" defined at torpedoes.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__torpedoesbaynumber__rep
 use        Torpedoes__torpedoesbaynumber
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__torpedoesbaynumber.torpedoesbaynumber) : int =
  (Torpedoes__torpedoesbaynumber.torpedoesbaynumber'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__torpedoesbaynumber.torpedoesbaynumber, 
 predicate in_range = Torpedoes__torpedoesbaynumber.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TtorpedofiringbayB" defined at torpedoes.ads:12, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Torpedoes__baystate
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__baystate
 use        Torpedoes__baystate__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Torpedoes__baystate.baystate
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Torpedoes__baystate__rep.to_rep (get a temp___idx_154)) = (Torpedoes__baystate__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Torpedoes__baystate__rep.to_rep (get a temp___idx_154)) = (Torpedoes__baystate__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtorpedofiringbayB" defined at torpedoes.ads:12, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Torpedoes__baystate__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Torpedoes__baystate

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Torpedoes__baystate.component_type, 
 type map = Array__Int__Torpedoes__baystate.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Torpedoes__baystate.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TtorpedofiringbayB" defined at torpedoes.ads:12, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Torpedoes__baystate_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__baystate__rep
 use        Array__Int__Torpedoes__baystate

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Torpedoes__baystate.component_type, 
 function to_rep = Torpedoes__baystate__rep.to_rep, 
 type map = Array__Int__Torpedoes__baystate.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Torpedoes__baystate.get, 
 function bool_eq = Array__Int__Torpedoes__baystate.bool_eq

end

(* Module for axiomatizing type "TtorpedofiringbayB" defined at torpedoes.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TtorpedofiringbayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__baystate
 use        Torpedoes__TtorpedoesbaynumberB
 use        Torpedoes__TtorpedoesbaynumberB__rep
 use        Torpedoes__torpedoesbaynumber
 use        Array__Int__Torpedoes__baystate

 type component_type =
  Torpedoes__baystate.baystate
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Torpedoes__baystate.map, 
 function array_bool_eq = Array__Int__Torpedoes__baystate.bool_eq, 
 type index_base_type = Torpedoes__TtorpedoesbaynumberB.ttorpedoesbaynumberB, 
 type index_rep_type = int, 
 function to_rep = Torpedoes__TtorpedoesbaynumberB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Torpedoes__TtorpedoesbaynumberB.in_range, 
 predicate index_dynamic_property = Torpedoes__torpedoesbaynumber.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttorpedofiringbayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttorpedofiringbayB__ref =
  { mutable ttorpedofiringbayB__content "model_trace:" "name:" : ttorpedofiringbayB }
 
 function ttorpedofiringbayB__ref___projection 
   (a : ttorpedofiringbayB__ref) : ttorpedofiringbayB =
  a.ttorpedofiringbayB__content
 
 meta "model_projection" function ttorpedofiringbayB__ref___projection
 
 meta "inline : no" function ttorpedofiringbayB__ref___projection
 
 val ttorpedofiringbayB__havoc 
   (x : ttorpedofiringbayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "torpedofiringbay" defined at torpedoes.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__torpedofiringbay
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__baystate
 use        Array__Int__Torpedoes__baystate

 type component_type =
  Torpedoes__baystate.baystate
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Torpedoes__baystate.map, 
 function array_bool_eq = Array__Int__Torpedoes__baystate.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TreactorheatlevelB" defined at torpedoes.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TreactorheatlevelB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type treactorheatlevelB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = treactorheatlevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactorheatlevelB__ref =
  { mutable treactorheatlevelB__content "model_trace:" "name:" : treactorheatlevelB }
 
 function treactorheatlevelB__ref___projection 
   (a : treactorheatlevelB__ref) : treactorheatlevelB =
  a.treactorheatlevelB__content
 
 meta "model_projection" function treactorheatlevelB__ref___projection
 
 meta "inline : no" function treactorheatlevelB__ref___projection
 
 val treactorheatlevelB__havoc 
   (x : treactorheatlevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactorheatlevelB" defined at torpedoes.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__TreactorheatlevelB__rep
 use        Torpedoes__TreactorheatlevelB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__TreactorheatlevelB.treactorheatlevelB) : int =
  (Torpedoes__TreactorheatlevelB.treactorheatlevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__TreactorheatlevelB.treactorheatlevelB, 
 predicate in_range = Torpedoes__TreactorheatlevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactorheatlevel" defined at torpedoes.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__reactorheatlevel
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactorheatlevel =
  < range 0 1000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactorheatlevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorheatlevel__ref =
  { mutable reactorheatlevel__content "model_trace:" "name:" : reactorheatlevel }
 
 function reactorheatlevel__ref___projection 
   (a : reactorheatlevel__ref) : reactorheatlevel =
  a.reactorheatlevel__content
 
 meta "model_projection" function reactorheatlevel__ref___projection
 
 meta "inline : no" function reactorheatlevel__ref___projection
 
 val reactorheatlevel__havoc 
   (x : reactorheatlevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorheatlevel" defined at torpedoes.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__reactorheatlevel__rep
 use        Torpedoes__reactorheatlevel
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__reactorheatlevel.reactorheatlevel) : int =
  (Torpedoes__reactorheatlevel.reactorheatlevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__reactorheatlevel.reactorheatlevel, 
 predicate in_range = Torpedoes__reactorheatlevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "baynumber" defined at torpedoes.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Torpedoes__loadtorpedo__baynumber
 use import "_gnatprove_standard".Main

 function baynumber #"torpedoes.ads" 28 0 0#"model" "model_trace:2628" "name:bayNumber" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "baynumber" defined at torpedoes.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__loadtorpedo__baynumber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "baynumber" defined at torpedoes.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Torpedoes__firetorpedo__baynumber
 use import "_gnatprove_standard".Main

 function baynumber #"torpedoes.ads" 37 0 0#"model" "name:bayNumber" "model_trace:2700" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "baynumber" defined at torpedoes.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__firetorpedo__baynumber___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T13s" defined at torpedoes.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__firetorpedo__L12s__T13s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t13s =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content "model_trace:" "name:" : t13s }
 
 function t13s__ref___projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref___projection
 
 meta "inline : no" function t13s__ref___projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at torpedoes.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Torpedoes__firetorpedo__L12s__T13s__rep
 use        Torpedoes__firetorpedo__L12s__T13s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Torpedoes__firetorpedo__L12s__T13s.t13s) : int =
  (Torpedoes__firetorpedo__L12s__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Torpedoes__firetorpedo__L12s__T13s.t13s, 
 predicate in_range = Torpedoes__firetorpedo__L12s__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end
(* Module for defining a ref holding the value of variable "innerairlockstate" defined at airlock.ads:4, created in Gnat2Why.Decls.Translate_Variable *)
module Airlock__innerairlockstate
 use import "_gnatprove_standard".Main

 val innerairlockstate #"airlock.ads" 4 0 0#"model_projected" "model_trace:2801" "name:innerAirlockState"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "innerairlockstate" defined at airlock.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airlock__innerairlockstate___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "outerairlockstate" defined at airlock.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Airlock__outerairlockstate
 use import "_gnatprove_standard".Main

 val outerairlockstate #"airlock.ads" 5 0 0#"model_projected" "model_trace:2810" "name:outerAirlockState"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outerairlockstate" defined at airlock.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airlock__outerairlockstate___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "airlockdoorslocked" defined at airlock.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Airlock__airlockdoorslocked
 use import "_gnatprove_standard".Main

 val airlockdoorslocked #"airlock.ads" 6 0 0#"model_projected" "model_trace:2819" "name:airlockDoorsLocked"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "airlockdoorslocked" defined at airlock.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Airlock__airlockdoorslocked___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "totaltorpedoes" defined at torpedoes.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Torpedoes__totaltorpedoes
 use import "_gnatprove_standard".Main

 val totaltorpedoes #"torpedoes.ads" 6 0 0#"model_projected" "model_trace:2485" "name:totalTorpedoes"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "totaltorpedoes" defined at torpedoes.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__totaltorpedoes___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactorheating" defined at torpedoes.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Torpedoes__reactorheating
 use import "_gnatprove_standard".Main

 val reactorheating #"torpedoes.ads" 15 0 0#"model_projected" "model_trace:2552" "name:reactorHeating"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactorheating" defined at torpedoes.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__reactorheating___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "torpedobay" defined at torpedoes.ads:28, created in Gnat2Why.Decls.Translate_Variable *)
module Torpedoes__loadtorpedo__torpedobay
 use import "_gnatprove_standard".Main
 use        Array__Int__Torpedoes__baystate

 val torpedobay #"torpedoes.ads" 28 0 0#"model_projected" "model_trace:2619" "name:torpedoBay"  : Array__Int__Torpedoes__baystate.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "torpedobay" defined at torpedoes.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__loadtorpedo__torpedobay___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactorheating" defined at torpedoes.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Torpedoes__firetorpedo__reactorheating
 use import "_gnatprove_standard".Main

 val reactorheating #"torpedoes.ads" 35 0 0#"model_projected" "name:reactorHeating" "model_trace:2682"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactorheating" defined at torpedoes.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__firetorpedo__reactorheating___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "torpedobay" defined at torpedoes.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Torpedoes__firetorpedo__torpedobay
 use import "_gnatprove_standard".Main
 use        Array__Int__Torpedoes__baystate

 val torpedobay #"torpedoes.ads" 36 0 0#"model_projected" "name:torpedoBay" "model_trace:2691"  : Array__Int__Torpedoes__baystate.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "torpedobay" defined at torpedoes.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Torpedoes__firetorpedo__torpedobay___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "closeinnerairlock" defined at airlock.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airlock__closeinnerairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openinnerairlock" defined at airlock.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airlock__openinnerairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeouterairlock" defined at airlock.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airlock__closeouterairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openouterairlock" defined at airlock.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airlock__openouterairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockairlockdoors" defined at airlock.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Airlock__lockairlockdoors
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "storetorpedo" defined at torpedoes.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Torpedoes__storetorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadtorpedo" defined at torpedoes.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Torpedoes__loadtorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firetorpedo" defined at torpedoes.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Torpedoes__firetorpedo
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TstoredtorpedoesB" defined at torpedoes.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__TstoredtorpedoesB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "storedtorpedoes" defined at torpedoes.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__storedtorpedoes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__storedtorpedoes

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Torpedoes__storedtorpedoes.first <= Torpedoes__storedtorpedoes.last) )) then (
   (Torpedoes__storedtorpedoes.dynamic_property Torpedoes__storedtorpedoes.first Torpedoes__storedtorpedoes.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "baystate" defined at torpedoes.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__baystate___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__baystate

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Torpedoes__baystate.first <= Torpedoes__baystate.last) )) then (
   (Torpedoes__baystate.dynamic_property Torpedoes__baystate.first Torpedoes__baystate.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "TtorpedoesbaynumberB" defined at torpedoes.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__TtorpedoesbaynumberB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "torpedoesbaynumber" defined at torpedoes.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__torpedoesbaynumber___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__torpedoesbaynumber

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (( temp___is_init_169 \/ (Torpedoes__torpedoesbaynumber.first <= Torpedoes__torpedoesbaynumber.last) )) then (
   (Torpedoes__torpedoesbaynumber.dynamic_property Torpedoes__torpedoesbaynumber.first Torpedoes__torpedoesbaynumber.last temp___expr_173)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "TtorpedofiringbayB" defined at torpedoes.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__TtorpedofiringbayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "torpedofiringbay" defined at torpedoes.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__torpedofiringbay___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Torpedoes__baystate
 use        Array__Int__Torpedoes__baystate

 predicate dynamic_invariant "inline" 
   (temp___expr_180 : Array__Int__Torpedoes__baystate.map) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_182 : Array__Int__Torpedoes__baystate.map) (temp___skip_top_level_183 : bool)  =
  true

end

(* Module giving axioms for type "TreactorheatlevelB" defined at torpedoes.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__TreactorheatlevelB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reactorheatlevel" defined at torpedoes.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__reactorheatlevel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Torpedoes__reactorheatlevel

 predicate dynamic_invariant "inline" 
   (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool)  =
  (if (( temp___is_init_186 \/ (Torpedoes__reactorheatlevel.first <= Torpedoes__reactorheatlevel.last) )) then (
   (Torpedoes__reactorheatlevel.dynamic_property Torpedoes__reactorheatlevel.first Torpedoes__reactorheatlevel.last temp___expr_190)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_191 : int) (temp___skip_top_level_192 : bool)  =
  true

end

(* Module giving axioms for type "T13s" defined at torpedoes.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Torpedoes__firetorpedo__L12s__T13s___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "closeinnerairlock" defined at airlock.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airlock__closeinnerairlock___axiom
 use        Airlock__outerairlockstate
 use        Airlock__innerairlockstate
 use import "_gnatprove_standard".Main
 use        Airlock__innerairlockstate
 use        Airlock__outerairlockstate

 val closeinnerairlock 
   (__void_param : unit) : unit
  requires {  ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) }
  ensures {  ( ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  reads {Airlock__innerairlockstate.innerairlockstate, Airlock__outerairlockstate.outerairlockstate}
  writes {Airlock__innerairlockstate.innerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "openinnerairlock" defined at airlock.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airlock__openinnerairlock___axiom
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked
 use        Airlock__innerairlockstate
 use import "_gnatprove_standard".Main
 use        Airlock__innerairlockstate
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked

 val openinnerairlock 
   (__void_param : unit) : unit
  requires {  ( ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> false ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  reads {Airlock__innerairlockstate.innerairlockstate, Airlock__outerairlockstate.outerairlockstate, Airlock__airlockdoorslocked.airlockdoorslocked}
  writes {Airlock__innerairlockstate.innerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "closeouterairlock" defined at airlock.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airlock__closeouterairlock___axiom
 use        Airlock__outerairlockstate
 use        Airlock__innerairlockstate
 use import "_gnatprove_standard".Main
 use        Airlock__innerairlockstate
 use        Airlock__outerairlockstate

 val closeouterairlock 
   (__void_param : unit) : unit
  requires {  ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) }
  ensures {  ( ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) /\ ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  reads {Airlock__innerairlockstate.innerairlockstate, Airlock__outerairlockstate.outerairlockstate}
  writes {Airlock__outerairlockstate.outerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "openouterairlock" defined at airlock.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airlock__openouterairlock___axiom
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked
 use        Airlock__innerairlockstate
 use import "_gnatprove_standard".Main
 use        Airlock__innerairlockstate
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked

 val openouterairlock 
   (__void_param : unit) : unit
  requires {  ( ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> false ) ) }
  reads {Airlock__innerairlockstate.innerairlockstate, Airlock__outerairlockstate.outerairlockstate, Airlock__airlockdoorslocked.airlockdoorslocked}
  writes {Airlock__outerairlockstate.outerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "lockairlockdoors" defined at airlock.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Airlock__lockairlockdoors___axiom
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked
 use        Airlock__innerairlockstate
 use import "_gnatprove_standard".Main
 use        Airlock__innerairlockstate
 use        Airlock__outerairlockstate
 use        Airlock__airlockdoorslocked

 val lockairlockdoors 
   (__void_param : unit) : unit
  requires {  ( ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ ( ( (Airlock__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Airlock__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) ) }
  reads {Airlock__innerairlockstate.innerairlockstate, Airlock__outerairlockstate.outerairlockstate, Airlock__airlockdoorslocked.airlockdoorslocked}
  writes {Airlock__airlockdoorslocked.airlockdoorslocked}

end

(* Module for declaring a program function (and possibly an axiom) for "storetorpedo" defined at torpedoes.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Torpedoes__storetorpedo___axiom
 use        Airlock__airlockdoorslocked
 use        Torpedoes__totaltorpedoes
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Airlock__airlockdoorslocked
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes

 val storetorpedo 
   (__void_param : unit) : unit
  requires {  ( (Torpedoes__totaltorpedoes.totaltorpedoes.int__content < 20) /\ ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Torpedoes__totaltorpedoes.totaltorpedoes.int__content <= 20) ) /\ (Torpedoes__totaltorpedoes.totaltorpedoes.int__content = ((old Torpedoes__totaltorpedoes.totaltorpedoes.int__content ) + 1)) ) /\ (Torpedoes__storedtorpedoes___axiom.dynamic_invariant Torpedoes__totaltorpedoes.totaltorpedoes.int__content True True True True) ) }
  reads {Airlock__airlockdoorslocked.airlockdoorslocked, Torpedoes__totaltorpedoes.totaltorpedoes}
  writes {Torpedoes__totaltorpedoes.totaltorpedoes}

end

(* Module for declaring a program function (and possibly an axiom) for "loadtorpedo" defined at torpedoes.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Torpedoes__loadtorpedo___axiom
 use        Airlock__airlockdoorslocked
 use        Torpedoes__totaltorpedoes
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Airlock__airlockdoorslocked
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes
 use        Torpedoes__torpedofiringbay___axiom
 use        Array__Int__Torpedoes__baystate

 val loadtorpedo 
   (torpedobay : Array__Int__Torpedoes__baystate.map__ref) (baynumber : int) : unit
  requires {  ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Torpedoes__totaltorpedoes.totaltorpedoes.int__content > 0) ) }
  ensures {  ( ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Torpedoes__totaltorpedoes.totaltorpedoes.int__content = ((old Torpedoes__totaltorpedoes.totaltorpedoes.int__content ) - 1)) ) /\ ( (Torpedoes__torpedofiringbay___axiom.dynamic_invariant torpedobay.Array__Int__Torpedoes__baystate.map__content True True True True) /\ (Torpedoes__storedtorpedoes___axiom.dynamic_invariant Torpedoes__totaltorpedoes.totaltorpedoes.int__content True True True True) ) ) }
  reads {Airlock__airlockdoorslocked.airlockdoorslocked, Torpedoes__totaltorpedoes.totaltorpedoes}
  writes {Torpedoes__totaltorpedoes.totaltorpedoes, torpedobay}

end

(* Module for declaring a program function (and possibly an axiom) for "firetorpedo" defined at torpedoes.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Torpedoes__firetorpedo___axiom
 use        Airlock__airlockdoorslocked
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Airlock__airlockdoorslocked
 use        Torpedoes__baystate
 use        Torpedoes__baystate__rep
 use        Array__Int__Torpedoes__baystate
 use        Torpedoes__torpedofiringbay___axiom
 use        Torpedoes__reactorheatlevel___axiom
 use        Array__Int__Torpedoes__baystate

 val firetorpedo 
   (reactorheating : int__ref) (torpedobay : Array__Int__Torpedoes__baystate.map__ref) (baynumber : int) : unit
  requires {  ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ ( ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get torpedobay.Array__Int__Torpedoes__baystate.map__content baynumber)) <> 0) /\ (reactorheating.int__content < 1000) ) ) }
  ensures {  ( ( ( ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get torpedobay.Array__Int__Torpedoes__baystate.map__content baynumber)) = 0) ) /\ (forall i   "model" "model_trace:2750" "name:I"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> baynumber)) then (
    ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get torpedobay.Array__Int__Torpedoes__baystate.map__content i)) = (Torpedoes__baystate__rep.to_rep (let temp___195 = (old torpedobay.Array__Int__Torpedoes__baystate.map__content ) in (
     (Array__Int__Torpedoes__baystate.get temp___195 i)))
    ))) else (
    true)) )) ) /\ (reactorheating.int__content = ((old reactorheating.int__content ) + 1)) ) /\ ( (Torpedoes__reactorheatlevel___axiom.dynamic_invariant reactorheating.int__content True True True True) /\ (Torpedoes__torpedofiringbay___axiom.dynamic_invariant torpedobay.Array__Int__Torpedoes__baystate.map__content True True True True) ) ) }
  reads {Airlock__airlockdoorslocked.airlockdoorslocked}
  writes {reactorheating, torpedobay}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "torpedoes" defined at torpedoes.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Torpedoes__package_def
 use import "_gnatprove_standard".Main
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes
 use        Torpedoes__reactorheatlevel___axiom
 use        Torpedoes__reactorheating
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes___axiom
 use        Torpedoes__reactorheatlevel___axiom
 use        Torpedoes__reactorheating___axiom

 let def #"torpedoes.ads" 2 0 0#"GP_Subp:torpedoes.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { #"torpedoes.ads" 2 0 0# true }
  ensures { #"torpedoes.ads" 2 0 0# true }
   =
  ( (#"torpedoes.ads" 2 0 0# ());
  (#"torpedoes.ads" 5 0 0# ());
  (#"torpedoes.ads" 6 0 0# ());
  (#"torpedoes.ads" 6 0 0# ());
  (#"torpedoes.ads" 6 0 0# ( #"torpedoes.ads" 6 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"torpedoes.ads" 6 0 0# assume { #"torpedoes.ads" 6 0 0# (Torpedoes__storedtorpedoes___axiom.default_initial_assumption Torpedoes__totaltorpedoes.totaltorpedoes.int__content False) };
  #"torpedoes.ads" 6 0 0# assume { #"torpedoes.ads" 6 0 0# (Torpedoes__storedtorpedoes___axiom.dynamic_invariant Torpedoes__totaltorpedoes.totaltorpedoes.int__content False False True True) } ));
  (#"torpedoes.ads" 8 0 0# ());
  (#"torpedoes.ads" 11 0 0# ());
  (#"torpedoes.ads" 12 0 0# ());
  (#"torpedoes.ads" 14 0 0# ());
  (#"torpedoes.ads" 15 0 0# ());
  (#"torpedoes.ads" 15 0 0# ());
  (#"torpedoes.ads" 15 0 0# ( #"torpedoes.ads" 15 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"torpedoes.ads" 15 0 0# assume { #"torpedoes.ads" 15 0 0# (Torpedoes__reactorheatlevel___axiom.default_initial_assumption Torpedoes__reactorheating.reactorheating.int__content False) };
  #"torpedoes.ads" 15 0 0# assume { #"torpedoes.ads" 15 0 0# (Torpedoes__reactorheatlevel___axiom.dynamic_invariant Torpedoes__reactorheating.reactorheating.int__content False False True True) } ));
  (#"torpedoes.ads" 20 0 0# ());
  (#"torpedoes.ads" 24 0 0# ());
  (#"torpedoes.ads" 22 0 0# ());
  (#"torpedoes.ads" 22 0 0# ());
  (#"torpedoes.ads" 21 0 0# ());
  (#"torpedoes.ads" 28 0 0# ());
  (#"torpedoes.ads" 32 0 0# ());
  (#"torpedoes.ads" 30 0 0# ());
  (#"torpedoes.ads" 29 0 0# ());
  (#"torpedoes.ads" 35 0 0# ());
  (#"torpedoes.ads" 42 0 0# ());
  (#"torpedoes.ads" 39 0 0# ());
  (#"torpedoes.ads" 39 0 0# ());
  (#"torpedoes.ads" 39 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.ads" 38 0 0# ());
  (#"torpedoes.adb" 2 0 0# ());
  (#"torpedoes.adb" 6 0 0# ());
  (#"torpedoes.adb" 15 0 0# ());
  (#"torpedoes.adb" 24 0 0# ());
  ( "GP_Sloc:torpedoes.adb:37:1" (#"torpedoes.adb" 37 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "storetorpedo" defined at torpedoes.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Torpedoes__storetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Airlock__airlockdoorslocked
 use        Torpedoes__storedtorpedoes
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes___axiom
 use        Airlock__airlockdoorslocked___axiom

 let def #"torpedoes.ads" 20 0 0#"W:diverges:N" "GP_Subp:torpedoes.ads:20" 
   (__void_param : unit)
  requires { #"torpedoes.ads" 20 0 0# true }
  ensures { #"torpedoes.ads" 20 0 0# (#"torpedoes.ads" 24 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:torpedoes.ads:24:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:     Post => airlockDoorsLocked = True and  
             ^ torpedoes.ads:24:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( ( "GP_Pretty_Ada:2597" "GP_Sloc:torpedoes.ads:24:14" ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2601" "GP_Sloc:torpedoes.ads:25:14" (Torpedoes__totaltorpedoes.totaltorpedoes.int__content <= 20) ) ) /\ ( "GP_Pretty_Ada:2607" "GP_Sloc:torpedoes.ads:26:14" (Torpedoes__totaltorpedoes.totaltorpedoes.int__content = ((old Torpedoes__totaltorpedoes.totaltorpedoes.int__content ) + 1)) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram torpedoes.ads:20 *)
  ;
   assume {  (Torpedoes__storedtorpedoes___axiom.dynamic_invariant Torpedoes__totaltorpedoes.totaltorpedoes.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram torpedoes.ads:20 *)
  ;
  () (* Check for RTE in the Pre of the subprogram torpedoes.ads:20 *)
  ;
   abstract ensures {true}(let _ = ( (Torpedoes__totaltorpedoes.totaltorpedoes.int__content < 20) && ((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram torpedoes.ads:20 *)
  ;
   assume {  ( (Torpedoes__totaltorpedoes.totaltorpedoes.int__content < 20) /\ ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   abstract ensures {true}(let _ = Torpedoes__totaltorpedoes.totaltorpedoes.int__content in (
   ()))
   end ;
  (let temp___old_198 =  (any int
  ensures { (result = Torpedoes__totaltorpedoes.totaltorpedoes.int__content)} 
  ) in (
   (  try
    ( ( "GP_Sloc:torpedoes.adb:7:10" (#"torpedoes.adb" 7 0 0# ()) );
    ( "GP_Sloc:torpedoes.adb:8:13" (#"torpedoes.adb" 8 0 0# ()) );
    ( "GP_Sloc:torpedoes.adb:7:7" (#"torpedoes.adb" 7 0 0# (if ((Boolean.andb((Torpedoes__totaltorpedoes.totaltorpedoes.int__content < 20)) (((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
     ( ( "GP_Sloc:torpedoes.adb:10:10" (#"torpedoes.adb" 10 0 0# ()) );
     ( "GP_Sloc:torpedoes.adb:10:28" (#"torpedoes.adb" 10 0 0# ()) );
     ( "GP_Sloc:torpedoes.adb:10:25" (#"torpedoes.adb" 10 0 0# #"torpedoes.adb" 10 0 0# Torpedoes__totaltorpedoes.totaltorpedoes.int__content <- ( (#"torpedoes.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:torpedoes.adb:10:43" "GP_Reason:VC_RANGE_CHECK" "GP_Id:0" "comment:         totalTorpedoes := totalTorpedoes + 1;
                                          ^ torpedoes.adb:10:43:VC_RANGE_CHECK" "GP_Shape:if__totaltorpedoes_assign__add" (Torpedoes__storedtorpedoes.range_check_((Torpedoes__totaltorpedoes.totaltorpedoes.int__content + 1))) )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) ((Torpedoes__totaltorpedoes.totaltorpedoes.int__content <= 20)))) ((Torpedoes__totaltorpedoes.totaltorpedoes.int__content = (temp___old_198 + 1)))) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadtorpedo" defined at torpedoes.ads:28, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Torpedoes__loadtorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Airlock__airlockdoorslocked
 use        Torpedoes__storedtorpedoes
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes
 use        Torpedoes__baystate
 use        Torpedoes__baystate__rep
 use        Torpedoes__torpedoesbaynumber___axiom
 use        Array__Int__Torpedoes__baystate
 use        Torpedoes__torpedofiringbay___axiom
 use        Array__Int__Torpedoes__baystate
 use        Torpedoes__loadtorpedo__torpedobay
 use        Torpedoes__loadtorpedo__baynumber
 use        Torpedoes__storedtorpedoes___axiom
 use        Torpedoes__totaltorpedoes___axiom
 use        Torpedoes__baystate___axiom
 use        Torpedoes__torpedoesbaynumber___axiom
 use        Torpedoes__torpedofiringbay___axiom
 use        Torpedoes__loadtorpedo__torpedobay___axiom
 use        Torpedoes__loadtorpedo__baynumber___axiom
 use        Airlock__airlockdoorslocked___axiom

 let def #"torpedoes.ads" 28 0 0#"W:diverges:N" "GP_Subp:torpedoes.ads:28" 
   (__void_param : unit)
  requires { #"torpedoes.ads" 28 0 0# true }
  ensures { #"torpedoes.ads" 28 0 0# (#"torpedoes.ads" 32 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:torpedoes.ads:32:14" "GP_Id:3" "comment:     Post => airlockDoorsLocked = True and              
             ^ torpedoes.ads:32:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:2666" "GP_Sloc:torpedoes.ads:32:14" ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2670" "GP_Sloc:torpedoes.ads:33:14" (Torpedoes__totaltorpedoes.totaltorpedoes.int__content = ((old Torpedoes__totaltorpedoes.totaltorpedoes.int__content ) - 1)) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram torpedoes.ads:28 *)
  ;
   assume {  (Torpedoes__storedtorpedoes___axiom.dynamic_invariant Torpedoes__totaltorpedoes.totaltorpedoes.int__content True False True True) };
   assume {  (Torpedoes__torpedofiringbay___axiom.dynamic_invariant Torpedoes__loadtorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content True False True True) };
   assume {  (Torpedoes__torpedoesbaynumber___axiom.dynamic_invariant Torpedoes__loadtorpedo__baynumber.baynumber True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram torpedoes.ads:28 *)
  ;
  () (* Check for RTE in the Pre of the subprogram torpedoes.ads:28 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) ((Torpedoes__totaltorpedoes.totaltorpedoes.int__content > 0))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram torpedoes.ads:28 *)
  ;
   assume {  ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Torpedoes__totaltorpedoes.totaltorpedoes.int__content > 0) ) };
   abstract ensures {true}(let _ = Torpedoes__totaltorpedoes.totaltorpedoes.int__content in (
   ()))
   end ;
  (let temp___old_200 =  (any int
  ensures { (result = Torpedoes__totaltorpedoes.totaltorpedoes.int__content)} 
  ) in (
   (  try
    ( ( "GP_Sloc:torpedoes.adb:16:10" (#"torpedoes.adb" 16 0 0# ()) );
    ( "GP_Sloc:torpedoes.adb:17:13" (#"torpedoes.adb" 17 0 0# ()) );
    ( "GP_Sloc:torpedoes.adb:16:7" (#"torpedoes.adb" 16 0 0# (if ((Boolean.andb((Torpedoes__totaltorpedoes.totaltorpedoes.int__content > 0)) (((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
     ( ( "GP_Sloc:torpedoes.adb:18:32" (#"torpedoes.adb" 18 0 0# #"torpedoes.adb" 18 0 0# Torpedoes__loadtorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content <- ( (Array__Int__Torpedoes__baystate.set(Torpedoes__loadtorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (Torpedoes__loadtorpedo__baynumber.baynumber) ((Torpedoes__baystate__rep.of_rep(1)))) )) );
     ( "GP_Sloc:torpedoes.adb:19:10" (#"torpedoes.adb" 19 0 0# ()) );
     ( "GP_Sloc:torpedoes.adb:19:28" (#"torpedoes.adb" 19 0 0# ()) );
     ( "GP_Sloc:torpedoes.adb:19:25" (#"torpedoes.adb" 19 0 0# #"torpedoes.adb" 19 0 0# Torpedoes__totaltorpedoes.totaltorpedoes.int__content <- ( (#"torpedoes.adb" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:torpedoes.adb:19:43" "GP_Id:2" "comment:         totalTorpedoes := totalTorpedoes - 1;
                                          ^ torpedoes.adb:19:43:VC_RANGE_CHECK" "GP_Shape:if__totaltorpedoes_assign__sub" (Torpedoes__storedtorpedoes.range_check_((Torpedoes__totaltorpedoes.totaltorpedoes.int__content - 1))) )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) ((Torpedoes__totaltorpedoes.totaltorpedoes.int__content = (temp___old_200 - 1)))) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firetorpedo" defined at torpedoes.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Torpedoes__firetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Airlock__airlockdoorslocked
 use        Torpedoes__baystate
 use        Torpedoes__baystate__rep
 use        Torpedoes__torpedoesbaynumber___axiom
 use        Array__Int__Torpedoes__baystate
 use        Torpedoes__torpedofiringbay___axiom
 use        Torpedoes__reactorheatlevel
 use        Torpedoes__reactorheatlevel___axiom
 use        Torpedoes__firetorpedo__reactorheating
 use        Array__Int__Torpedoes__baystate
 use        Torpedoes__firetorpedo__torpedobay
 use        Torpedoes__firetorpedo__baynumber
 use        Torpedoes__baystate___axiom
 use        Torpedoes__torpedoesbaynumber___axiom
 use        Torpedoes__torpedofiringbay___axiom
 use        Torpedoes__reactorheatlevel___axiom
 use        Torpedoes__firetorpedo__reactorheating___axiom
 use        Torpedoes__firetorpedo__torpedobay___axiom
 use        Torpedoes__firetorpedo__baynumber___axiom
 use        Airlock__airlockdoorslocked___axiom

 let def #"torpedoes.ads" 35 0 0#"W:diverges:N" "GP_Subp:torpedoes.ads:35" 
   (__void_param : unit)
  requires { #"torpedoes.ads" 35 0 0# true }
  ensures { #"torpedoes.ads" 35 0 0# (#"torpedoes.ads" 42 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:torpedoes.ads:42:14" "GP_Id:5" "comment:     Post => airlockDoorsLocked = True and  
             ^ torpedoes.ads:42:14:VC_POSTCONDITION" ( ( ( ( "GP_Pretty_Ada:2741" "GP_Sloc:torpedoes.ads:42:14" ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2747" "GP_Sloc:torpedoes.ads:43:6" ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content Torpedoes__firetorpedo__baynumber.baynumber)) = 0) ) ) /\ (forall i #"torpedoes.ads" 42 0 0#  "model" "model_trace:2750" "name:I"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Torpedoes__firetorpedo__baynumber.baynumber)) then (
    ( "GP_Pretty_Ada:2767" "GP_Sloc:torpedoes.ads:45:33" ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content i)) = (Torpedoes__baystate__rep.to_rep (let temp___206 = (old Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content ) in (
     (Array__Int__Torpedoes__baystate.get temp___206 i)))
    )) )) else (
    ( "GP_Pretty_Ada:3757" "GP_Sloc:torpedoes.ads:45:10" true ))) )) ) /\ ( "GP_Pretty_Ada:2776" "GP_Sloc:torpedoes.ads:46:14" (Torpedoes__firetorpedo__reactorheating.reactorheating.int__content = ((old Torpedoes__firetorpedo__reactorheating.reactorheating.int__content ) + 1)) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram torpedoes.ads:35 *)
  ;
   assume {  (Torpedoes__reactorheatlevel___axiom.dynamic_invariant Torpedoes__firetorpedo__reactorheating.reactorheating.int__content True False True True) };
   assume {  (Torpedoes__torpedofiringbay___axiom.dynamic_invariant Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content True False True True) };
   assume {  (Torpedoes__torpedoesbaynumber___axiom.dynamic_invariant Torpedoes__firetorpedo__baynumber.baynumber True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram torpedoes.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram torpedoes.ads:35 *)
  ;
   abstract ensures {true}(let _ = ( ((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) && ( ((Torpedoes__baystate__rep.to_rep((Array__Int__Torpedoes__baystate.get(Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (Torpedoes__firetorpedo__baynumber.baynumber)))) <> 0) && (Torpedoes__firetorpedo__reactorheating.reactorheating.int__content < 1000) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram torpedoes.ads:35 *)
  ;
   assume {  ( ( (Airlock__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ ( ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content Torpedoes__firetorpedo__baynumber.baynumber)) <> 0) /\ (Torpedoes__firetorpedo__reactorheating.reactorheating.int__content < 1000) ) ) };
   abstract ensures {true}(let _ = Torpedoes__firetorpedo__reactorheating.reactorheating.int__content in (
   ()))
   end ;
  (let temp___old_204 =  (any int
  ensures { (result = Torpedoes__firetorpedo__reactorheating.reactorheating.int__content)} 
  ) in (
   (  abstract ensures {true}(let _ = Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content in (
    ()))
    end ;
   (let temp___old_203 =  (any Array__Int__Torpedoes__baystate.map
   ensures { (result = Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content)} 
   ) in (
    (  try
     ( ( "GP_Sloc:torpedoes.adb:28:11" (#"torpedoes.adb" 28 0 0# ()) );
     ( "GP_Sloc:torpedoes.adb:27:7" (#"torpedoes.adb" 27 0 0# (if ((Boolean.andb((Boolean.andb(((Torpedoes__baystate__rep.to_rep((Array__Int__Torpedoes__baystate.get(Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (Torpedoes__firetorpedo__baynumber.baynumber)))) <> 0)) (((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) ((Torpedoes__firetorpedo__reactorheating.reactorheating.int__content < 1000)))) then (
      ( ( "GP_Sloc:torpedoes.adb:32:32" (#"torpedoes.adb" 32 0 0# #"torpedoes.adb" 32 0 0# Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content <- ( (Array__Int__Torpedoes__baystate.set(Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (Torpedoes__firetorpedo__baynumber.baynumber) ((Torpedoes__baystate__rep.of_rep(0)))) )) );
      ( "GP_Sloc:torpedoes.adb:33:25" (#"torpedoes.adb" 33 0 0# #"torpedoes.adb" 33 0 0# Torpedoes__firetorpedo__reactorheating.reactorheating.int__content <- ( (#"torpedoes.adb" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:torpedoes.adb:33:43" "GP_Id:4" "comment:         reactorHeating := reactorHeating + 1;
                                          ^ torpedoes.adb:33:43:VC_RANGE_CHECK" "GP_Shape:if__reactorheating_assign__add" (Torpedoes__reactorheatlevel.range_check_((Torpedoes__firetorpedo__reactorheating.reactorheating.int__content + 1))) )) )) ) )) else (
      ()))) );
      raise Return__exc )
    with
     Return__exc -> ()
    end;
     abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb(((Boolean.to_int(Airlock__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Torpedoes__baystate__rep.to_rep((Array__Int__Torpedoes__baystate.get(Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (Torpedoes__firetorpedo__baynumber.baynumber)))) = 0)))) (( (let i =  (any int
    ) in (
     (if ((Boolean.andb((1 <= i)) ((i <= 4)))) then (
       abstract ensures {true}(let _ = (if ((i <> Torpedoes__firetorpedo__baynumber.baynumber)) then (
       ((Torpedoes__baystate__rep.to_rep((Array__Int__Torpedoes__baystate.get(Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content) (i)))) = (Torpedoes__baystate__rep.to_rep((Array__Int__Torpedoes__baystate.get(temp___old_203) (i)))))) else (
       (Boolean.of_int(1)))) in (
       ()))
       end ))))
    ;
     (any bool
    requires { true} 
    ensures { ( (result = True) <-> (forall i   "model" "model_trace:2750" "name:I"  : int.
     ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Torpedoes__firetorpedo__baynumber.baynumber)) then (
      ((Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get Torpedoes__firetorpedo__torpedobay.torpedobay.Array__Int__Torpedoes__baystate.map__content i)) = (Torpedoes__baystate__rep.to_rep (Array__Int__Torpedoes__baystate.get temp___old_203 i)))) else (
      true)) )) )} 
    ) )))) ((Torpedoes__firetorpedo__reactorheating.reactorheating.int__content = (temp___old_204 + 1)))) in (
     ()))
     end  )))
    )))
   )
end
