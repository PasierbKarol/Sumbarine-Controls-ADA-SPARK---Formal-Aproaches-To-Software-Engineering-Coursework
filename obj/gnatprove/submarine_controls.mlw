(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "root_stream_type" defined at a-stream.ads:70, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Ada__streams__root_stream_type__rep
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 type __split_fields =
  { rec__ext__ "model_trace:" "name:" : Main.__private }
 
 function __split_fields___projection 
   (a : __split_fields) : Main.__private =
  a.rec__ext__
 
 meta "model_projection" function __split_fields___projection
 
 meta "inline : no" function __split_fields___projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields; attr__tag "model_trace:" "name:" : int }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function __rep___2__projection 
   (a : __rep) : int =
  a.attr__tag
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function __dispatch_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__root_stream_type
 use export Ada__streams__root_stream_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type root_stream_type =
  __rep
 
 function __tag 
   : int
 
 function value__size 
   : int
 
 function object__size 
   (a : root_stream_type) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : root_stream_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : root_stream_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : root_stream_type.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : root_stream_type) (b : root_stream_type) : bool
 
 function dummy 
   : root_stream_type
 
 type root_stream_type__ref =
  { mutable root_stream_type__content "model_trace:" "name:" : root_stream_type }
 
 function root_stream_type__ref___projection 
   (a : root_stream_type__ref) : root_stream_type =
  a.root_stream_type__content
 
 meta "model_projection" function root_stream_type__ref___projection
 
 meta "inline : no" function root_stream_type__ref___projection
 
 val root_stream_type__havoc 
   (x : root_stream_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type stream_element 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = stream_element, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type stream_element__ref =
  { mutable stream_element__content "model_trace:" "name:" : stream_element }
 
 function stream_element__ref___projection 
   (a : stream_element__ref) : stream_element =
  a.stream_element__content
 
 meta "model_projection" function stream_element__ref___projection
 
 meta "inline : no" function stream_element__ref___projection
 
 val stream_element__havoc 
   (x : stream_element__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element__rep
 use        Ada__streams__stream_element
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Ada__streams__stream_element.stream_element, 
 predicate in_range = Ada__streams__stream_element.in_range, 
 predicate in_range_int = Ada__streams__stream_element.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Tstream_element_offsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tstream_element_offsetB =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tstream_element_offsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstream_element_offsetB__ref =
  { mutable tstream_element_offsetB__content "model_trace:" "name:" : tstream_element_offsetB }
 
 function tstream_element_offsetB__ref___projection 
   (a : tstream_element_offsetB__ref) : tstream_element_offsetB =
  a.tstream_element_offsetB__content
 
 meta "model_projection" function tstream_element_offsetB__ref___projection
 
 meta "inline : no" function tstream_element_offsetB__ref___projection
 
 val tstream_element_offsetB__havoc 
   (x : tstream_element_offsetB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__Tstream_element_offsetB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) : int =
  (Ada__streams__Tstream_element_offsetB.tstream_element_offsetB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__Tstream_element_offsetB.tstream_element_offsetB, 
 predicate in_range = Ada__streams__Tstream_element_offsetB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_offset =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type stream_element_offset__ref =
  { mutable stream_element_offset__content "model_trace:" "name:" : stream_element_offset }
 
 function stream_element_offset__ref___projection 
   (a : stream_element_offset__ref) : stream_element_offset =
  a.stream_element_offset__content
 
 meta "model_projection" function stream_element_offset__ref___projection
 
 meta "inline : no" function stream_element_offset__ref___projection
 
 val stream_element_offset__havoc 
   (x : stream_element_offset__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_offset__rep
 use        Ada__streams__stream_element_offset
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__streams__stream_element_offset.stream_element_offset) : int =
  (Ada__streams__stream_element_offset.stream_element_offset'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__stream_element_offset.stream_element_offset, 
 predicate in_range = Ada__streams__stream_element_offset.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_count =
  < range 0 9223372036854775807 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type stream_element_count__ref =
  { mutable stream_element_count__content "model_trace:" "name:" : stream_element_count }
 
 function stream_element_count__ref___projection 
   (a : stream_element_count__ref) : stream_element_count =
  a.stream_element_count__content
 
 meta "model_projection" function stream_element_count__ref___projection
 
 meta "inline : no" function stream_element_count__ref___projection
 
 val stream_element_count__havoc 
   (x : stream_element_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_count__rep
 use        Ada__streams__stream_element_count
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__streams__stream_element_count.stream_element_count) : int =
  (Ada__streams__stream_element_count.stream_element_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__stream_element_count.stream_element_count, 
 predicate in_range = Ada__streams__stream_element_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "stream_element_array" defined at a-stream.ads:54, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8
 use        Ada__streams__stream_element
 use        Ada__streams__stream_element__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Ada__streams__stream_element.stream_element
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Ada__streams__stream_element__rep.to_rep (get a temp___idx_154)) = (Ada__streams__stream_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Ada__streams__stream_element__rep.to_rep (get a temp___idx_154)) = (Ada__streams__stream_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "stream_element_array" defined at a-stream.ads:54, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Ada__streams__stream_element__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Ada__streams__stream_element

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Ada__streams__stream_element.component_type, 
 type map = Array__Int__Ada__streams__stream_element.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Ada__streams__stream_element.get

end

(* Module for axiomatizing comparison for the array theory associated to type "stream_element_array" defined at a-stream.ads:54, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Ada__streams__stream_element_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element__rep
 use        Array__Int__Ada__streams__stream_element

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with
 type component_type = Array__Int__Ada__streams__stream_element.component_type, 
 function to_rep = Ada__streams__stream_element__rep.to_rep, 
 type map = Array__Int__Ada__streams__stream_element.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Ada__streams__stream_element.get, 
 function bool_eq = Array__Int__Ada__streams__stream_element.bool_eq

end

(* Module for axiomatizing type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element
 use        Ada__streams__Tstream_element_offsetB
 use        Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__stream_element_offset
 use        Array__Int__Ada__streams__stream_element

 type component_type =
  Ada__streams__stream_element.stream_element
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Ada__streams__stream_element.map, 
 function array_bool_eq = Array__Int__Ada__streams__stream_element.bool_eq, 
 type index_base_type = Ada__streams__Tstream_element_offsetB.tstream_element_offsetB, 
 type index_rep_type = int, 
 function to_rep = Ada__streams__Tstream_element_offsetB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Ada__streams__Tstream_element_offsetB.in_range, 
 predicate index_dynamic_property = Ada__streams__stream_element_offset.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type stream_element_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type stream_element_array__ref =
  { mutable stream_element_array__content "model_trace:" "name:" : stream_element_array }
 
 function stream_element_array__ref___projection 
   (a : stream_element_array__ref) : stream_element_array =
  a.stream_element_array__content
 
 meta "model_projection" function stream_element_array__ref___projection
 
 meta "inline : no" function stream_element_array__ref___projection
 
 val stream_element_array__havoc 
   (x : stream_element_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "item" defined at a-stream.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-stream.ads" 65 0 0#"model_projected" "name:Item" "model_trace:5864" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 82 0 0#"model_projected" "name:V" "model_trace:5934" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write_sea__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__stream_element_arraySW__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 85 0 0#
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySW__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  0
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type name__ref =
  { mutable name__content "model_trace:" "name:" : name }
 
 function name__ref___projection 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc 
   (x : name__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name__rep
 use        System__name
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__name.name, 
 predicate in_range = System__name.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0#"model" "model_trace:5995" "name:System_Name" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___projection 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address__rep
 use        System__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__address.address, 
 predicate in_range = System__address.in_range, 
 predicate in_range_int = System__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"system.ads" 69 0 0#"model" "model_trace:6117" "name:Null_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 77 0 0#"model" "model_trace:6164" "name:Left" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 77 0 0#"model" "model_trace:6171" "name:Right" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function olt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate olt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 78 0 0#"model" "name:Left" "model_trace:6191" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 78 0 0#"model" "name:Right" "model_trace:6198" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ole 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ole__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 79 0 0#"model" "name:Left" "model_trace:6218" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 79 0 0#"model" "name:Right" "model_trace:6225" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ogt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ogt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 80 0 0#"model" "name:Left" "model_trace:6245" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 80 0 0#"model" "name:Right" "model_trace:6252" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oge 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oge__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 81 0 0#"model" "name:Left" "model_trace:6272" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 81 0 0#"model" "name:Right" "model_trace:6279" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oeq 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oeq__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bit_order__ref =
  { mutable bit_order__content "model_trace:" "name:" : bit_order }
 
 function bit_order__ref___projection 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order__rep
 use        System__bit_order
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__bit_order.bit_order, 
 predicate in_range = System__bit_order.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0#"model" "model_trace:6346" "name:Default_Bit_Order" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0#"model" "model_trace:6362" "name:Max_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0#"model" "model_trace:6372" "name:Max_Interrupt_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content "model_trace:" "name:" : any_priority }
 
 function any_priority__ref___projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority =
  < range 0 30 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  30
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content "model_trace:" "name:" : priority }
 
 function priority__ref___projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 function first 
   : int =
  31
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content "model_trace:" "name:" : interrupt_priority }
 
 function interrupt_priority__ref___projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0#"model" "model_trace:6424" "name:Default_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0#"model" "model_trace:6454" "name:Backend_Divide_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0#"model" "model_trace:6464" "name:Backend_Overflow_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0#"model" "model_trace:6474" "name:Command_Line_Args" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0#"model" "model_trace:6484" "name:Configurable_Run_Time" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0#"model" "model_trace:6494" "name:Denorm" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0#"model" "model_trace:6504" "name:Duration_32_Bits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0#"model" "model_trace:6514" "name:Exit_Status_Supported" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0#"model" "model_trace:6524" "name:Fractional_Fixed_Ops" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0#"model" "model_trace:6534" "name:Frontend_Layout" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0#"model" "model_trace:6544" "name:Machine_Overflows" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0#"model" "model_trace:6554" "name:Machine_Rounds" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0#"model" "model_trace:6564" "name:Preallocated_Stacks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0#"model" "model_trace:6574" "name:Signed_Zeros" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0#"model" "model_trace:6584" "name:Stack_Check_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0#"model" "model_trace:6594" "name:Stack_Check_Probes" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0#"model" "model_trace:6604" "name:Stack_Check_Limits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0#"model" "model_trace:6614" "name:Support_Aggregates" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0#"model" "model_trace:6624" "name:Support_Atomic_Primitives" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0#"model" "model_trace:6634" "name:Support_Composite_Assign" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0#"model" "model_trace:6644" "name:Support_Composite_Compare" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0#"model" "model_trace:6654" "name:Support_Long_Shifts" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0#"model" "model_trace:6664" "name:Always_Compatible_Rep" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0#"model" "model_trace:6674" "name:Suppress_Standard_Library" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0#"model" "model_trace:6684" "name:Use_Ada_Main_Program_Name" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0#"model" "model_trace:6694" "name:Frontend_Exceptions" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0#"model" "model_trace:6704" "name:ZCX_By_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref =
  { mutable tpriorities_mappingB__content "model_trace:" "name:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s__rep
 use        System__T3s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__T3s.t3s) : int =
  (System__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__T3s.t3s, 
 predicate in_range = System__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0#"model_projected" "model_trace:6730" "name:Underlying_Priorities" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsize_typeB =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsize_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tsize_typeB__ref =
  { mutable tsize_typeB__content "model_trace:" "name:" : tsize_typeB }
 
 function tsize_typeB__ref___projection 
   (a : tsize_typeB__ref) : tsize_typeB =
  a.tsize_typeB__content
 
 meta "model_projection" function tsize_typeB__ref___projection
 
 meta "inline : no" function tsize_typeB__ref___projection
 
 val tsize_typeB__havoc 
   (x : tsize_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB__rep
 use        System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__parameters__Tsize_typeB.tsize_typeB) : int =
  (System__parameters__Tsize_typeB.tsize_typeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__parameters__Tsize_typeB.tsize_typeB, 
 predicate in_range = System__parameters__Tsize_typeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type size_type =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = size_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type size_type__ref =
  { mutable size_type__content "model_trace:" "name:" : size_type }
 
 function size_type__ref___projection 
   (a : size_type__ref) : size_type =
  a.size_type__content
 
 meta "model_projection" function size_type__ref___projection
 
 meta "inline : no" function size_type__ref___projection
 
 val size_type__havoc 
   (x : size_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type__rep
 use        System__parameters__size_type
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__parameters__size_type.size_type) : int =
  (System__parameters__size_type.size_type'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__parameters__size_type.size_type, 
 predicate in_range = System__parameters__size_type.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "unspecified_size" defined at s-parame.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__unspecified_size
 use import "_gnatprove_standard".Main

 function unspecified_size #"s-parame.ads" 67 0 0#"model" "model_trace:11452" "name:Unspecified_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for possibly declaring a logic function for "default_stack_size" defined at s-parame.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__default_stack_size
 use import "_gnatprove_standard".Main

 function default_stack_size 
   (__void_param : unit) : int
 
 predicate default_stack_size__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "minimum_stack_size" defined at s-parame.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__minimum_stack_size
 use import "_gnatprove_standard".Main

 function minimum_stack_size 
   (__void_param : unit) : int
 
 predicate minimum_stack_size__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "size" defined at s-parame.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__adjust_storage_size__size
 use import "_gnatprove_standard".Main

 function size #"s-parame.ads" 76 0 0#"model" "model_trace:11491" "name:Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-parame.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__parameters__adjust_storage_size__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "adjust_storage_size" defined at s-parame.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__adjust_storage_size
 use import "_gnatprove_standard".Main

 function adjust_storage_size 
   (size : int) : int
 
 predicate adjust_storage_size__function_guard 
   (result : int) (size : int) 

end

(* Module for defining the constant "default_env_stack_size" defined at s-parame.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_env_stack_size
 use import "_gnatprove_standard".Main

 function default_env_stack_size #"s-parame.ads" 85 0 0#"model" "model_trace:11505" "name:Default_Env_Stack_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_grows_down" defined at s-parame.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__stack_grows_down
 use import "_gnatprove_standard".Main

 function stack_grows_down #"s-parame.ads" 90 0 0#"model" "model_trace:11515" "name:Stack_Grows_Down" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "runtime_default_sec_stack_size" defined at s-parame.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__runtime_default_sec_stack_size
 use import "_gnatprove_standard".Main

 function runtime_default_sec_stack_size #"s-parame.ads" 95 0 0#"model" "model_trace:11525" "name:Runtime_Default_Sec_Stack_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sec_stack_dynamic" defined at s-parame.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_dynamic
 use import "_gnatprove_standard".Main

 function sec_stack_dynamic #"s-parame.ads" 99 0 0#"model" "model_trace:11537" "name:Sec_Stack_Dynamic" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type c_address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = c_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type c_address__ref =
  { mutable c_address__content "model_trace:" "name:" : c_address }
 
 function c_address__ref___projection 
   (a : c_address__ref) : c_address =
  a.c_address__content
 
 meta "model_projection" function c_address__ref___projection
 
 meta "inline : no" function c_address__ref___projection
 
 val c_address__havoc 
   (x : c_address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address__rep
 use        System__parameters__c_address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__parameters__c_address.c_address, 
 predicate in_range = System__parameters__c_address.in_range, 
 predicate in_range_int = System__parameters__c_address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at s-parame.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  13
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "c_malloc_linkname" defined at s-parame.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__c_malloc_linkname
 use import "_gnatprove_standard".Main
 use        Standard__string

 function c_malloc_linkname #"s-parame.ads" 116 0 0#"model_projected" "model_trace:11580" "name:C_Malloc_Linkname" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "garbage_collected" defined at s-parame.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__garbage_collected
 use import "_gnatprove_standard".Main

 function garbage_collected #"s-parame.ads" 139 0 0#"model" "model_trace:11590" "name:Garbage_Collected" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "single_lock" defined at s-parame.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__single_lock
 use import "_gnatprove_standard".Main

 function single_lock #"s-parame.ads" 154 0 0#"model" "model_trace:11600" "name:Single_Lock" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "no_abort" defined at s-parame.ads:167, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__no_abort
 use import "_gnatprove_standard".Main

 function no_abort #"s-parame.ads" 167 0 0#"model" "model_trace:11610" "name:No_Abort" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type chars 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type chars__ref =
  { mutable chars__content "model_trace:" "name:" : chars }
 
 function chars__ref___projection 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref___projection
 
 meta "inline : no" function chars__ref___projection
 
 val chars__havoc 
   (x : chars__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__chars__rep
 use        System__crtl__chars
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__crtl__chars.chars, 
 predicate in_range = System__crtl__chars.in_range, 
 predicate in_range_int = System__crtl__chars.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__dirs
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type dirs 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = dirs, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type dirs__ref =
  { mutable dirs__content "model_trace:" "name:" : dirs }
 
 function dirs__ref___projection 
   (a : dirs__ref) : dirs =
  a.dirs__content
 
 meta "model_projection" function dirs__ref___projection
 
 meta "inline : no" function dirs__ref___projection
 
 val dirs__havoc 
   (x : dirs__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__dirs__rep
 use        System__crtl__dirs
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__crtl__dirs.dirs, 
 predicate in_range = System__crtl__dirs.in_range, 
 predicate in_range_int = System__crtl__dirs.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type files 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type files__ref =
  { mutable files__content "model_trace:" "name:" : files }
 
 function files__ref___projection 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref___projection
 
 meta "inline : no" function files__ref___projection
 
 val files__havoc 
   (x : files__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__files__rep
 use        System__crtl__files
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__crtl__files.files, 
 predicate in_range = System__crtl__files.in_range, 
 predicate in_range_int = System__crtl__files.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int____ref =
  { mutable int____content "model_trace:" "name:" : int__ }
 
 function int____ref___projection 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref___projection
 
 meta "inline : no" function int____ref___projection
 
 val int____havoc 
   (x : int____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int__rep
 use        System__crtl__int
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__int.int__) : int =
  (System__crtl__int.int__'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__int.int__, 
 predicate in_range = System__crtl__int.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__TlongB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tlongB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tlongB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tlongB__ref =
  { mutable tlongB__content "model_trace:" "name:" : tlongB }
 
 function tlongB__ref___projection 
   (a : tlongB__ref) : tlongB =
  a.tlongB__content
 
 meta "model_projection" function tlongB__ref___projection
 
 meta "inline : no" function tlongB__ref___projection
 
 val tlongB__havoc 
   (x : tlongB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__TlongB__rep
 use        System__crtl__TlongB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__TlongB.tlongB) : int =
  (System__crtl__TlongB.tlongB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__TlongB.tlongB, 
 predicate in_range = System__crtl__TlongB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long__ref =
  { mutable long__content "model_trace:" "name:" : long }
 
 function long__ref___projection 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref___projection
 
 meta "inline : no" function long__ref___projection
 
 val long__havoc 
   (x : long__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__long__rep
 use        System__crtl__long
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__long.long) : int =
  (System__crtl__long.long'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__long.long, 
 predicate in_range = System__crtl__long.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__off_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type off_t =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = off_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type off_t__ref =
  { mutable off_t__content "model_trace:" "name:" : off_t }
 
 function off_t__ref___projection 
   (a : off_t__ref) : off_t =
  a.off_t__content
 
 meta "model_projection" function off_t__ref___projection
 
 meta "inline : no" function off_t__ref___projection
 
 val off_t__havoc 
   (x : off_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__off_t__rep
 use        System__crtl__off_t
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__off_t.off_t) : int =
  (System__crtl__off_t.off_t'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__off_t.off_t, 
 predicate in_range = System__crtl__off_t.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type size_t 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type size_t__ref =
  { mutable size_t__content "model_trace:" "name:" : size_t }
 
 function size_t__ref___projection 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref___projection
 
 meta "inline : no" function size_t__ref___projection
 
 val size_t__havoc 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__size_t__rep
 use        System__crtl__size_t
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__crtl__size_t.size_t, 
 predicate in_range = System__crtl__size_t.in_range, 
 predicate in_range_int = System__crtl__size_t.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tssize_tB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tssize_tB =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tssize_tB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tssize_tB__ref =
  { mutable tssize_tB__content "model_trace:" "name:" : tssize_tB }
 
 function tssize_tB__ref___projection 
   (a : tssize_tB__ref) : tssize_tB =
  a.tssize_tB__content
 
 meta "model_projection" function tssize_tB__ref___projection
 
 meta "inline : no" function tssize_tB__ref___projection
 
 val tssize_tB__havoc 
   (x : tssize_tB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tssize_tB__rep
 use        System__crtl__Tssize_tB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__Tssize_tB.tssize_tB) : int =
  (System__crtl__Tssize_tB.tssize_tB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__Tssize_tB.tssize_tB, 
 predicate in_range = System__crtl__Tssize_tB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ssize_t__ref =
  { mutable ssize_t__content "model_trace:" "name:" : ssize_t }
 
 function ssize_t__ref___projection 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref___projection
 
 meta "inline : no" function ssize_t__ref___projection
 
 val ssize_t__havoc 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__ssize_t__rep
 use        System__crtl__ssize_t
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__ssize_t.ssize_t) : int =
  (System__crtl__ssize_t.ssize_t'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__ssize_t.ssize_t, 
 predicate in_range = System__crtl__ssize_t.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tint64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tint64B =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tint64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tint64B__ref =
  { mutable tint64B__content "model_trace:" "name:" : tint64B }
 
 function tint64B__ref___projection 
   (a : tint64B__ref) : tint64B =
  a.tint64B__content
 
 meta "model_projection" function tint64B__ref___projection
 
 meta "inline : no" function tint64B__ref___projection
 
 val tint64B__havoc 
   (x : tint64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tint64B__rep
 use        System__crtl__Tint64B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__Tint64B.tint64B) : int =
  (System__crtl__Tint64B.tint64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__Tint64B.tint64B, 
 predicate in_range = System__crtl__Tint64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int64__ref =
  { mutable int64__content "model_trace:" "name:" : int64 }
 
 function int64__ref___projection 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref___projection
 
 meta "inline : no" function int64__ref___projection
 
 val int64__havoc 
   (x : int64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int64__rep
 use        System__crtl__int64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__crtl__int64.int64) : int =
  (System__crtl__int64.int64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__int64.int64, 
 predicate in_range = System__crtl__int64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__filename_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type filename_encoding 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = filename_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type filename_encoding__ref =
  { mutable filename_encoding__content "model_trace:" "name:" : filename_encoding }
 
 function filename_encoding__ref___projection 
   (a : filename_encoding__ref) : filename_encoding =
  a.filename_encoding__content
 
 meta "model_projection" function filename_encoding__ref___projection
 
 meta "inline : no" function filename_encoding__ref___projection
 
 val filename_encoding__havoc 
   (x : filename_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__filename_encoding__rep
 use        System__crtl__filename_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__filename_encoding.filename_encoding, 
 predicate in_range = System__crtl__filename_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "a" defined at s-crtl.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strlen__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function a #"s-crtl.ads" 85 0 0#"model" "model_trace:9874" "name:A" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strlen__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strlen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strlen 
   (a : BV64.t) : BV64.t
 
 predicate strlen__function_guard 
   (result : BV64.t) (a : BV64.t) 

end

(* Module for defining the constant "dest" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__dest
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function dest #"s-crtl.ads" 88 0 0#"model" "model_trace:9903" "name:dest" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dest" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__dest___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "src" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__src
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function src #"s-crtl.ads" 88 0 0#"model" "model_trace:9910" "name:src" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "src" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__src___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 88 0 0#"model" "model_trace:9924" "name:n" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "a" defined at s-crtl.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__atoi__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function a #"s-crtl.ads" 95 0 0#"model" "name:A" "model_trace:9950" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__atoi__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__atoi
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function atoi 
   (a : BV64.t) : int
 
 predicate atoi__function_guard 
   (result : int) (a : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__clearerr__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 98 0 0#"model" "model_trace:9979" "name:stream" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__clearerr__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at s-crtl.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 101 0 0#"model" "model_trace:10005" "name:handle" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup
 use import "_gnatprove_standard".Main

 function dup 
   (handle : int) : int
 
 predicate dup__function_guard 
   (result : int) (handle : int) 

end

(* Module for defining the constant "from" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__from
 use import "_gnatprove_standard".Main

 function from #"s-crtl.ads" 104 0 0#"model" "model_trace:10032" "name:from" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__from___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__to
 use import "_gnatprove_standard".Main

 function to__ #"s-crtl.ads" 104 0 0#"model" "model_trace:10039" "name:to" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup2
 use import "_gnatprove_standard".Main

 function dup2 
   (from : int) (to__ : int) : int
 
 predicate dup2__function_guard 
   (result : int) (from : int) (to__ : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 107 0 0#"model" "name:stream" "model_trace:10067" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fclose__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fclose 
   (stream : BV64.t) : int
 
 predicate fclose__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "handle" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 110 0 0#"model" "name:handle" "model_trace:10094" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 110 0 0#"model" "model_trace:10103" "name:mode" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fdopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fdopen 
   (handle : int) (mode : BV64.t) : BV64.t
 
 predicate fdopen__function_guard 
   (result : BV64.t) (handle : int) (mode : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fflush__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 113 0 0#"model" "name:stream" "model_trace:10130" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fflush__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fflush
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fflush 
   (stream : BV64.t) : int
 
 predicate fflush__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 116 0 0#"model" "name:stream" "model_trace:10157" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgetc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fgetc 
   (stream : BV64.t) : int
 
 predicate fgetc__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "strng" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strng #"s-crtl.ads" 119 0 0#"model" "model_trace:10184" "name:strng" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__strng___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__n
 use import "_gnatprove_standard".Main

 function n #"s-crtl.ads" 119 0 0#"model" "name:n" "model_trace:10193" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 119 0 0#"model" "name:stream" "model_trace:10202" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgets
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fgets 
   (strng : BV64.t) (n : int) (stream : BV64.t) : BV64.t
 
 predicate fgets__function_guard 
   (result : BV64.t) (strng : BV64.t) (n : int) (stream : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 123 0 0#"model" "model_trace:10229" "name:filename" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 124 0 0#"model" "name:mode" "model_trace:10238" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:124, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 125 0 0#"model" "model_trace:10247" "name:encoding" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fopen 
   (filename : BV64.t) (mode : BV64.t) (encoding : int) : BV64.t
 
 predicate fopen__function_guard 
   (result : BV64.t) (filename : BV64.t) (mode : BV64.t) (encoding : int) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 128 0 0#"model" "model_trace:10275" "name:C" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 128 0 0#"model" "name:stream" "model_trace:10284" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputc 
   (c : int) (stream : BV64.t) : int
 
 predicate fputc__function_guard 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 131 0 0#"model" "name:C" "model_trace:10311" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 131 0 0#"model" "name:stream" "model_trace:10320" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputwc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputwc 
   (c : int) (stream : BV64.t) : int
 
 predicate fputwc__function_guard 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "strng" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strng #"s-crtl.ads" 134 0 0#"model" "model_trace:10347" "name:Strng" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__strng___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 134 0 0#"model" "name:Stream" "model_trace:10356" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputs
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputs 
   (strng : BV64.t) (stream : BV64.t) : int
 
 predicate fputs__function_guard 
   (result : int) (strng : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__free__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ptr #"s-crtl.ads" 137 0 0#"model" "model_trace:10383" "name:Ptr" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__free__ptr___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "filename" defined at s-crtl.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 141 0 0#"model" "name:filename" "model_trace:10411" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:141, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 142 0 0#"model" "name:mode" "model_trace:10420" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 143 0 0#"model" "name:stream" "model_trace:10429" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 144 0 0#"model" "name:encoding" "model_trace:10438" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__freopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function freopen 
   (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) : BV64.t
 
 predicate freopen__function_guard 
   (result : BV64.t) (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 148 0 0#"model" "name:stream" "model_trace:10466" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:148, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 149 0 0#"model" "model_trace:10475" "name:offset" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 150 0 0#"model" "model_trace:10484" "name:origin" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__origin___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fseek 
   (stream : BV64.t) (offset : int) (origin : int) : int
 
 predicate fseek__function_guard 
   (result : int) (stream : BV64.t) (offset : int) (origin : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 154 0 0#"model" "name:stream" "model_trace:10511" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 155 0 0#"model" "name:offset" "model_trace:10520" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 156 0 0#"model" "name:origin" "model_trace:10529" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__origin___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fseek64 
   (stream : BV64.t) (offset : int) (origin : int) : int
 
 predicate fseek64__function_guard 
   (result : int) (stream : BV64.t) (offset : int) (origin : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 159 0 0#"model" "name:stream" "model_trace:10556" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ftell 
   (stream : BV64.t) : int
 
 predicate ftell__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 162 0 0#"model" "name:stream" "model_trace:10583" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell64__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ftell64 
   (stream : BV64.t) : int
 
 predicate ftell64__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "s" defined at s-crtl.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__getenv__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-crtl.ads" 165 0 0#"model_projected" "model_trace:10610" "name:S" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-crtl.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__getenv__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__getenv
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__string

 function getenv 
   (s : Standard__string.string) : BV64.t
 
 predicate getenv__function_guard 
   (result : BV64.t) (s : Standard__string.string) 

end

(* Module for defining the constant "handle" defined at s-crtl.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__isatty__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 168 0 0#"model" "name:handle" "model_trace:10639" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__isatty__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__isatty
 use import "_gnatprove_standard".Main

 function isatty 
   (handle : int) : int
 
 predicate isatty__function_guard 
   (result : int) (handle : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 171 0 0#"model" "model_trace:10666" "name:fd" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 171 0 0#"model" "name:offset" "model_trace:10675" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "direction" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__direction
 use import "_gnatprove_standard".Main

 function direction #"s-crtl.ads" 171 0 0#"model" "model_trace:10684" "name:direction" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "direction" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__direction___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__lseek
 use import "_gnatprove_standard".Main

 function lseek 
   (fd : int) (offset : int) (direction : int) : int
 
 predicate lseek__function_guard 
   (result : int) (fd : int) (offset : int) (direction : int) 

end

(* Module for defining the constant "size" defined at s-crtl.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__malloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 174 0 0#"model" "name:Size" "model_trace:10711" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__malloc__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__malloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function malloc 
   (size : BV64.t) : BV64.t
 
 predicate malloc__function_guard 
   (result : BV64.t) (size : BV64.t) 

end

(* Module for defining the constant "s1" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s1 #"s-crtl.ads" 177 0 0#"model" "model_trace:10740" "name:S1" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s2 #"s-crtl.ads" 177 0 0#"model" "model_trace:10751" "name:S2" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 177 0 0#"model" "model_trace:10762" "name:N" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s1 #"s-crtl.ads" 180 0 0#"model" "name:S1" "model_trace:10788" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s2 #"s-crtl.ads" 180 0 0#"model" "name:S2" "model_trace:10799" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 180 0 0#"model" "name:N" "model_trace:10810" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-crtl.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mktemp__template
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function template #"s-crtl.ads" 183 0 0#"model" "model_trace:10836" "name:template" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-crtl.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mktemp__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__pclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 186 0 0#"model" "name:stream" "model_trace:10862" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__pclose__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__pclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pclose 
   (stream : BV64.t) : int
 
 predicate pclose__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "command" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__command
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function command #"s-crtl.ads" 189 0 0#"model" "model_trace:10891" "name:command" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "command" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__command___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 189 0 0#"model" "name:mode" "model_trace:10898" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__popen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function popen 
   (command : BV64.t) (mode : BV64.t) : BV64.t
 
 predicate popen__function_guard 
   (result : BV64.t) (command : BV64.t) (mode : BV64.t) 

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ptr #"s-crtl.ads" 193 0 0#"model" "name:Ptr" "model_trace:10932" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__ptr___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 193 0 0#"model" "name:Size" "model_trace:10943" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__realloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function realloc 
   (ptr : BV64.t) (size : BV64.t) : BV64.t
 
 predicate realloc__function_guard 
   (result : BV64.t) (ptr : BV64.t) (size : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:196, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rewind__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 196 0 0#"model" "name:stream" "model_trace:10972" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:196, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rewind__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rmdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 199 0 0#"model_projected" "model_trace:10998" "name:dir_name" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rmdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rmdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function rmdir 
   (dir_name : Standard__string.string) : int
 
 predicate rmdir__function_guard 
   (result : int) (dir_name : Standard__string.string) 

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__chdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 202 0 0#"model_projected" "name:dir_name" "model_trace:11025" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__chdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__chdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function chdir 
   (dir_name : Standard__string.string) : int
 
 predicate chdir__function_guard 
   (result : int) (dir_name : Standard__string.string) 

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 206 0 0#"model_projected" "name:dir_name" "model_trace:11052" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 207 0 0#"model" "name:encoding" "model_trace:11061" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mkdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function mkdir 
   (dir_name : Standard__string.string) (encoding : int) : int
 
 predicate mkdir__function_guard 
   (result : int) (dir_name : Standard__string.string) (encoding : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 211 0 0#"model" "name:stream" "model_trace:11089" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 212 0 0#"model" "model_trace:11098" "name:buffer" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"s-crtl.ads" 213 0 0#"model" "name:mode" "model_trace:11107" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 214 0 0#"model" "model_trace:11116" "name:size" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function setvbuf 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
 
 predicate setvbuf__function_guard 
   (result : int) (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) 

end

(* Module for defining the constant "str" defined at s-crtl.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__tmpnam__str
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function str #"s-crtl.ads" 217 0 0#"model" "model_trace:11143" "name:str" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at s-crtl.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__tmpnam__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpfile
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function tmpfile 
   (__void_param : unit) : BV64.t
 
 predicate tmpfile__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 223 0 0#"model" "model_trace:11187" "name:c" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 223 0 0#"model" "name:stream" "model_trace:11196" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ungetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ungetc 
   (c : int) (stream : BV64.t) : int
 
 predicate ungetc__function_guard 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:226, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__unlink__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 226 0 0#"model" "name:filename" "model_trace:11223" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:226, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__unlink__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__unlink
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function unlink 
   (filename : BV64.t) : int
 
 predicate unlink__function_guard 
   (result : int) (filename : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 229 0 0#"model" "name:filename" "model_trace:11250" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__oflag
 use import "_gnatprove_standard".Main

 function oflag #"s-crtl.ads" 229 0 0#"model" "model_trace:11259" "name:oflag" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__oflag___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__open
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function open 
   (filename : BV64.t) (oflag : int) : int
 
 predicate open__function_guard 
   (result : int) (filename : BV64.t) (oflag : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:232, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__close__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 232 0 0#"model" "name:fd" "model_trace:11286" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__close__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__close
 use import "_gnatprove_standard".Main

 function close 
   (fd : int) : int
 
 predicate close__function_guard 
   (result : int) (fd : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 235 0 0#"model" "name:fd" "model_trace:11313" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 235 0 0#"model" "name:buffer" "model_trace:11322" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"s-crtl.ads" 235 0 0#"model" "model_trace:11331" "name:count" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__read
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function read 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
 
 predicate read__function_guard 
   (result : int) (fd : int) (buffer : BV64.t) (count : BV64.t) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 238 0 0#"model" "name:fd" "model_trace:11358" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 238 0 0#"model" "name:buffer" "model_trace:11367" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"s-crtl.ads" 238 0 0#"model" "name:count" "model_trace:11376" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__write
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function write 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
 
 predicate write__function_guard 
   (result : int) (fd : int) (buffer : BV64.t) (count : BV64.t) 

end

(* Module for axiomatizing type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_8B =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_8B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_8B__ref =
  { mutable tinteger_8B__content "model_trace:" "name:" : tinteger_8B }
 
 function tinteger_8B__ref___projection 
   (a : tinteger_8B__ref) : tinteger_8B =
  a.tinteger_8B__content
 
 meta "model_projection" function tinteger_8B__ref___projection
 
 meta "inline : no" function tinteger_8B__ref___projection
 
 val tinteger_8B__havoc 
   (x : tinteger_8B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B__rep
 use        Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_8B.tinteger_8B) : int =
  (Interfaces__Tinteger_8B.tinteger_8B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_8B.tinteger_8B, 
 predicate in_range = Interfaces__Tinteger_8B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___2__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___2__projection
 
 meta "inline : no" function integer_8__ref___2__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8__rep
 use        Interfaces__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_8.integer_8) : int =
  (Interfaces__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_8.integer_8, 
 predicate in_range = Interfaces__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_16B =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_16B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_16B__ref =
  { mutable tinteger_16B__content "model_trace:" "name:" : tinteger_16B }
 
 function tinteger_16B__ref___projection 
   (a : tinteger_16B__ref) : tinteger_16B =
  a.tinteger_16B__content
 
 meta "model_projection" function tinteger_16B__ref___projection
 
 meta "inline : no" function tinteger_16B__ref___projection
 
 val tinteger_16B__havoc 
   (x : tinteger_16B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B__rep
 use        Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_16B.tinteger_16B) : int =
  (Interfaces__Tinteger_16B.tinteger_16B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_16B.tinteger_16B, 
 predicate in_range = Interfaces__Tinteger_16B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___2__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___2__projection
 
 meta "inline : no" function integer_16__ref___2__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16__rep
 use        Interfaces__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_16.integer_16) : int =
  (Interfaces__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_16.integer_16, 
 predicate in_range = Interfaces__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content "model_trace:" "name:" : tinteger_32B }
 
 function tinteger_32B__ref___projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref___projection
 
 meta "inline : no" function tinteger_32B__ref___projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___2__projection
 
 meta "inline : no" function integer_32__ref___2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_64B =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_64B__ref =
  { mutable tinteger_64B__content "model_trace:" "name:" : tinteger_64B }
 
 function tinteger_64B__ref___projection 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref___projection
 
 meta "inline : no" function tinteger_64B__ref___projection
 
 val tinteger_64B__havoc 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B__rep
 use        Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_64B.tinteger_64B) : int =
  (Interfaces__Tinteger_64B.tinteger_64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_64B.tinteger_64B, 
 predicate in_range = Interfaces__Tinteger_64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___2__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___2__projection
 
 meta "inline : no" function integer_64__ref___2__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64__rep
 use        Interfaces__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_64.integer_64) : int =
  (Interfaces__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_64.integer_64, 
 predicate in_range = Interfaces__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type unsigned_8 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = unsigned_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_8__ref =
  { mutable unsigned_8__content "model_trace:" "name:" : unsigned_8 }
 
 function unsigned_8__ref___projection 
   (a : unsigned_8__ref) : unsigned_8 =
  a.unsigned_8__content
 
 meta "model_projection" function unsigned_8__ref___projection
 
 meta "inline : no" function unsigned_8__ref___projection
 
 val unsigned_8__havoc 
   (x : unsigned_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8__rep
 use        Interfaces__unsigned_8
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Interfaces__unsigned_8.unsigned_8, 
 predicate in_range = Interfaces__unsigned_8.in_range, 
 predicate in_range_int = Interfaces__unsigned_8.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type unsigned_16 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = unsigned_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_16__ref =
  { mutable unsigned_16__content "model_trace:" "name:" : unsigned_16 }
 
 function unsigned_16__ref___projection 
   (a : unsigned_16__ref) : unsigned_16 =
  a.unsigned_16__content
 
 meta "model_projection" function unsigned_16__ref___projection
 
 meta "inline : no" function unsigned_16__ref___projection
 
 val unsigned_16__havoc 
   (x : unsigned_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_16
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Interfaces__unsigned_16.unsigned_16, 
 predicate in_range = Interfaces__unsigned_16.in_range, 
 predicate in_range_int = Interfaces__unsigned_16.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_24 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t =
  ( 16777216 : BV32.t )
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 16777215 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  16777215
 
 predicate in_range 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = unsigned_24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type unsigned_24__ref =
  { mutable unsigned_24__content "model_trace:" "name:" : unsigned_24 }
 
 function unsigned_24__ref___projection 
   (a : unsigned_24__ref) : unsigned_24 =
  a.unsigned_24__content
 
 meta "model_projection" function unsigned_24__ref___projection
 
 meta "inline : no" function unsigned_24__ref___projection
 
 val unsigned_24__havoc 
   (x : unsigned_24__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24__rep
 use        Interfaces__unsigned_24
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV32 with
 type t = Interfaces__unsigned_24.unsigned_24, 
 predicate in_range = Interfaces__unsigned_24.in_range, 
 predicate in_range_int = Interfaces__unsigned_24.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__unsigned_24.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_32 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 4294967295 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  4294967295
 
 predicate in_range 
   (x : BV32.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_32__ref =
  { mutable unsigned_32__content "model_trace:" "name:" : unsigned_32 }
 
 function unsigned_32__ref___projection 
   (a : unsigned_32__ref) : unsigned_32 =
  a.unsigned_32__content
 
 meta "model_projection" function unsigned_32__ref___projection
 
 meta "inline : no" function unsigned_32__ref___projection
 
 val unsigned_32__havoc 
   (x : unsigned_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32__rep
 use        Interfaces__unsigned_32
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = Interfaces__unsigned_32.unsigned_32, 
 predicate in_range = Interfaces__unsigned_32.in_range, 
 predicate in_range_int = Interfaces__unsigned_32.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type unsigned_64 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = unsigned_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_64__ref =
  { mutable unsigned_64__content "model_trace:" "name:" : unsigned_64 }
 
 function unsigned_64__ref___projection 
   (a : unsigned_64__ref) : unsigned_64 =
  a.unsigned_64__content
 
 meta "model_projection" function unsigned_64__ref___projection
 
 meta "inline : no" function unsigned_64__ref___projection
 
 val unsigned_64__havoc 
   (x : unsigned_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64__rep
 use        Interfaces__unsigned_64
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__unsigned_64.unsigned_64, 
 predicate in_range = Interfaces__unsigned_64.in_range, 
 predicate in_range_int = Interfaces__unsigned_64.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "value" defined at interfac.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 82 0 0#"model" "model_trace:7439" "name:Value" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 83 0 0#"model" "model_trace:7448" "name:Amount" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 86 0 0#"model" "name:Value" "model_trace:7467" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 87 0 0#"model" "name:Amount" "model_trace:7476" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 90 0 0#"model" "name:Value" "model_trace:7495" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 91 0 0#"model" "name:Amount" "model_trace:7504" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 94 0 0#"model" "name:Value" "model_trace:7523" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 95 0 0#"model" "name:Amount" "model_trace:7532" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 98 0 0#"model" "name:Value" "model_trace:7551" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 99 0 0#"model" "name:Amount" "model_trace:7560" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 102 0 0#"model" "name:Value" "model_trace:7579" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 103 0 0#"model" "name:Amount" "model_trace:7588" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 106 0 0#"model" "name:Value" "model_trace:7607" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 107 0 0#"model" "name:Amount" "model_trace:7616" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 110 0 0#"model" "name:Value" "model_trace:7635" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 111 0 0#"model" "name:Amount" "model_trace:7644" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 114 0 0#"model" "name:Value" "model_trace:7663" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 115 0 0#"model" "name:Amount" "model_trace:7672" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 118 0 0#"model" "name:Value" "model_trace:7691" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 119 0 0#"model" "name:Amount" "model_trace:7700" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 122 0 0#"model" "name:Value" "model_trace:7719" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 123 0 0#"model" "name:Amount" "model_trace:7728" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 126 0 0#"model" "name:Value" "model_trace:7747" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 127 0 0#"model" "name:Amount" "model_trace:7756" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 130 0 0#"model" "name:Value" "model_trace:7775" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 131 0 0#"model" "name:Amount" "model_trace:7784" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 134 0 0#"model" "name:Value" "model_trace:7803" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 135 0 0#"model" "name:Amount" "model_trace:7812" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 138 0 0#"model" "name:Value" "model_trace:7831" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 139 0 0#"model" "name:Amount" "model_trace:7840" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 142 0 0#"model" "name:Value" "model_trace:7859" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 143 0 0#"model" "name:Amount" "model_trace:7868" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 146 0 0#"model" "name:Value" "model_trace:7887" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 147 0 0#"model" "name:Amount" "model_trace:7896" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 150 0 0#"model" "name:Value" "model_trace:7915" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 151 0 0#"model" "name:Amount" "model_trace:7924" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 154 0 0#"model" "name:Value" "model_trace:7943" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 155 0 0#"model" "name:Amount" "model_trace:7952" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 158 0 0#"model" "name:Value" "model_trace:7971" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 159 0 0#"model" "name:Amount" "model_trace:7980" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tieee_float_32B 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tieee_float_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_32B__ref =
  { mutable tieee_float_32B__content "model_trace:" "name:" : tieee_float_32B }
 
 function tieee_float_32B__ref___projection 
   (a : tieee_float_32B__ref) : tieee_float_32B =
  a.tieee_float_32B__content
 
 meta "model_projection" function tieee_float_32B__ref___projection
 
 meta "inline : no" function tieee_float_32B__ref___projection
 
 val tieee_float_32B__havoc 
   (x : tieee_float_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B__rep
 use        Interfaces__Tieee_float_32B
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__Tieee_float_32B.tieee_float_32B, 
 predicate in_range = Interfaces__Tieee_float_32B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type ieee_float_32 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = ieee_float_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_32__ref =
  { mutable ieee_float_32__content "model_trace:" "name:" : ieee_float_32 }
 
 function ieee_float_32__ref___projection 
   (a : ieee_float_32__ref) : ieee_float_32 =
  a.ieee_float_32__content
 
 meta "model_projection" function ieee_float_32__ref___projection
 
 meta "inline : no" function ieee_float_32__ref___projection
 
 val ieee_float_32__havoc 
   (x : ieee_float_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32__rep
 use        Interfaces__ieee_float_32
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__ieee_float_32.ieee_float_32, 
 predicate in_range = Interfaces__ieee_float_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type tieee_float_64B 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = tieee_float_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_64B__ref =
  { mutable tieee_float_64B__content "model_trace:" "name:" : tieee_float_64B }
 
 function tieee_float_64B__ref___projection 
   (a : tieee_float_64B__ref) : tieee_float_64B =
  a.tieee_float_64B__content
 
 meta "model_projection" function tieee_float_64B__ref___projection
 
 meta "inline : no" function tieee_float_64B__ref___projection
 
 val tieee_float_64B__havoc 
   (x : tieee_float_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B__rep
 use        Interfaces__Tieee_float_64B
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__Tieee_float_64B.tieee_float_64B, 
 predicate in_range = Interfaces__Tieee_float_64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type ieee_float_64 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = ieee_float_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_64__ref =
  { mutable ieee_float_64__content "model_trace:" "name:" : ieee_float_64 }
 
 function ieee_float_64__ref___projection 
   (a : ieee_float_64__ref) : ieee_float_64 =
  a.ieee_float_64__content
 
 meta "model_projection" function ieee_float_64__ref___projection
 
 meta "inline : no" function ieee_float_64__ref___projection
 
 val ieee_float_64__havoc 
   (x : ieee_float_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64__rep
 use        Interfaces__ieee_float_64
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__ieee_float_64.ieee_float_64, 
 predicate in_range = Interfaces__ieee_float_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type chars 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type chars__ref =
  { mutable chars__content "model_trace:" "name:" : chars }
 
 function chars__ref___2__projection 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref___2__projection
 
 meta "inline : no" function chars__ref___2__projection
 
 val chars__havoc 
   (x : chars__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__chars__rep
 use        Interfaces__c_streams__chars
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__c_streams__chars.chars, 
 predicate in_range = Interfaces__c_streams__chars.in_range, 
 predicate in_range_int = Interfaces__c_streams__chars.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type files 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type files__ref =
  { mutable files__content "model_trace:" "name:" : files }
 
 function files__ref___2__projection 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref___2__projection
 
 meta "inline : no" function files__ref___2__projection
 
 val files__havoc 
   (x : files__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__files__rep
 use        Interfaces__c_streams__files
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__c_streams__files.files, 
 predicate in_range = Interfaces__c_streams__files.in_range, 
 predicate in_range_int = Interfaces__c_streams__files.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int____ref =
  { mutable int____content "model_trace:" "name:" : int__ }
 
 function int____ref___2__projection 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref___2__projection
 
 meta "inline : no" function int____ref___2__projection
 
 val int____havoc 
   (x : int____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int__rep
 use        Interfaces__c_streams__int
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__c_streams__int.int__) : int =
  (Interfaces__c_streams__int.int__'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__int.int__, 
 predicate in_range = Interfaces__c_streams__int.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long__ref =
  { mutable long__content "model_trace:" "name:" : long }
 
 function long__ref___2__projection 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref___2__projection
 
 meta "inline : no" function long__ref___2__projection
 
 val long__havoc 
   (x : long__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__long__rep
 use        Interfaces__c_streams__long
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__c_streams__long.long) : int =
  (Interfaces__c_streams__long.long'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__long.long, 
 predicate in_range = Interfaces__c_streams__long.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type size_t 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type size_t__ref =
  { mutable size_t__content "model_trace:" "name:" : size_t }
 
 function size_t__ref___2__projection 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref___2__projection
 
 meta "inline : no" function size_t__ref___2__projection
 
 val size_t__havoc 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__size_t__rep
 use        Interfaces__c_streams__size_t
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__c_streams__size_t.size_t, 
 predicate in_range = Interfaces__c_streams__size_t.in_range, 
 predicate in_range_int = Interfaces__c_streams__size_t.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ssize_t__ref =
  { mutable ssize_t__content "model_trace:" "name:" : ssize_t }
 
 function ssize_t__ref___2__projection 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref___2__projection
 
 meta "inline : no" function ssize_t__ref___2__projection
 
 val ssize_t__havoc 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__ssize_t__rep
 use        Interfaces__c_streams__ssize_t
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__c_streams__ssize_t.ssize_t) : int =
  (Interfaces__c_streams__ssize_t.ssize_t'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__ssize_t.ssize_t, 
 predicate in_range = Interfaces__c_streams__ssize_t.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int64__ref =
  { mutable int64__content "model_trace:" "name:" : int64 }
 
 function int64__ref___2__projection 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref___2__projection
 
 meta "inline : no" function int64__ref___2__projection
 
 val int64__havoc 
   (x : int64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int64__rep
 use        Interfaces__c_streams__int64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__c_streams__int64.int64) : int =
  (Interfaces__c_streams__int64.int64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__int64.int64, 
 predicate in_range = Interfaces__c_streams__int64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__voids
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type voids 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = voids, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type voids__ref =
  { mutable voids__content "model_trace:" "name:" : voids }
 
 function voids__ref___projection 
   (a : voids__ref) : voids =
  a.voids__content
 
 meta "model_projection" function voids__ref___projection
 
 meta "inline : no" function voids__ref___projection
 
 val voids__havoc 
   (x : voids__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__voids__rep
 use        Interfaces__c_streams__voids
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__c_streams__voids.voids, 
 predicate in_range = Interfaces__c_streams__voids.in_range, 
 predicate in_range_int = Interfaces__c_streams__voids.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_stream" defined at i-cstrea.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__null_stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_stream #"i-cstrea.ads" 49 0 0#"model" "model_trace:8189" "name:NULL_Stream" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__eof
 use import "_gnatprove_standard".Main

 function eof #"i-cstrea.ads" 56 0 0#"model" "model_trace:8198" "name:EOF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iofbf
 use import "_gnatprove_standard".Main

 function iofbf #"i-cstrea.ads" 59 0 0#"model" "model_trace:8207" "name:IOFBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iolbf
 use import "_gnatprove_standard".Main

 function iolbf #"i-cstrea.ads" 60 0 0#"model" "model_trace:8216" "name:IOLBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ionbf
 use import "_gnatprove_standard".Main

 function ionbf #"i-cstrea.ads" 61 0 0#"model" "model_trace:8225" "name:IONBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__l_tmpnam
 use import "_gnatprove_standard".Main

 function l_tmpnam #"i-cstrea.ads" 64 0 0#"model" "model_trace:8234" "name:L_tmpnam" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_cur
 use import "_gnatprove_standard".Main

 function seek_cur #"i-cstrea.ads" 67 0 0#"model" "model_trace:8243" "name:SEEK_CUR" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_end
 use import "_gnatprove_standard".Main

 function seek_end #"i-cstrea.ads" 68 0 0#"model" "model_trace:8252" "name:SEEK_END" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_set
 use import "_gnatprove_standard".Main

 function seek_set #"i-cstrea.ads" 69 0 0#"model" "model_trace:8261" "name:SEEK_SET" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for possibly declaring a logic function for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdin
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stdin 
   (__void_param : unit) : BV64.t
 
 predicate stdin__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdout
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stdout 
   (__void_param : unit) : BV64.t
 
 predicate stdout__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stderr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stderr 
   (__void_param : unit) : BV64.t
 
 predicate stderr__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__feof__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 95 0 0#"model" "name:stream" "model_trace:8387" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__feof__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__feof
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function feof 
   (stream : BV64.t) : int
 
 predicate feof__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ferror__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 97 0 0#"model" "name:stream" "model_trace:8406" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__ferror__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__ferror
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ferror 
   (stream : BV64.t) : int
 
 predicate ferror__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fileno__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 106 0 0#"model" "name:stream" "model_trace:8515" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fileno__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fileno
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fileno 
   (stream : BV64.t) : int
 
 predicate fileno__function_guard 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 129 0 0#"model" "name:buffer" "model_trace:8684" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 130 0 0#"model" "name:size" "model_trace:8693" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 131 0 0#"model" "name:count" "model_trace:8702" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 132 0 0#"model" "name:stream" "model_trace:8711" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fread 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fread__function_guard 
   (result : BV64.t) (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 135 0 0#"model" "name:buffer" "model_trace:8730" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "index" defined at i-cstrea.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__index
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function index #"i-cstrea.ads" 136 0 0#"model" "model_trace:8739" "name:index" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at i-cstrea.ads:136, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 137 0 0#"model" "name:size" "model_trace:8748" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 138 0 0#"model" "name:count" "model_trace:8757" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 139 0 0#"model" "name:stream" "model_trace:8766" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fread__2 
   (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fread__2__function_guard 
   (result : BV64.t) (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 172 0 0#"model" "name:buffer" "model_trace:8977" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 173 0 0#"model" "name:size" "model_trace:8986" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:173, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 174 0 0#"model" "name:count" "model_trace:8995" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 175 0 0#"model" "name:stream" "model_trace:9004" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fwrite
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fwrite 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fwrite__function_guard 
   (result : BV64.t) (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 185 0 0#"model" "name:stream" "model_trace:9093" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 186 0 0#"model" "name:buffer" "model_trace:9102" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 187 0 0#"model" "name:mode" "model_trace:9111" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 188 0 0#"model" "name:size" "model_trace:9120" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function setvbuf 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
 
 predicate setvbuf__function_guard 
   (result : int) (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) 

end

(* Module for defining the constant "name" defined at i-cstrea.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__file_exists__name
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function name #"i-cstrea.ads" 212 0 0#"model" "model_trace:9234" "name:name" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at i-cstrea.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__file_exists__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__file_exists
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function file_exists 
   (name : BV64.t) : int
 
 predicate file_exists__function_guard 
   (result : int) (name : BV64.t) 

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__is_regular_file__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 215 0 0#"model" "name:handle" "model_trace:9253" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__is_regular_file__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__is_regular_file
 use import "_gnatprove_standard".Main

 function is_regular_file 
   (handle : int) : int
 
 predicate is_regular_file__function_guard 
   (result : int) (handle : int) 

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_binary_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 223 0 0#"model" "name:handle" "model_trace:9272" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_binary_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_text_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 224 0 0#"model" "name:handle" "model_trace:9290" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_text_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type content_encoding 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  5
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type content_encoding__ref =
  { mutable content_encoding__content "model_trace:" "name:" : content_encoding }
 
 function content_encoding__ref___projection 
   (a : content_encoding__ref) : content_encoding =
  a.content_encoding__content
 
 meta "model_projection" function content_encoding__ref___projection
 
 meta "inline : no" function content_encoding__ref___projection
 
 val content_encoding__havoc 
   (x : content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__content_encoding__rep
 use        Interfaces__c_streams__content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__content_encoding.content_encoding, 
 predicate in_range = Interfaces__c_streams__content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type text_content_encoding 
 
 function first 
   : int =
  1
 
 function last 
   : int =
  5
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type text_content_encoding__ref =
  { mutable text_content_encoding__content "model_trace:" "name:" : text_content_encoding }
 
 function text_content_encoding__ref___projection 
   (a : text_content_encoding__ref) : text_content_encoding =
  a.text_content_encoding__content
 
 meta "model_projection" function text_content_encoding__ref___projection
 
 meta "inline : no" function text_content_encoding__ref___projection
 
 val text_content_encoding__havoc 
   (x : text_content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__text_content_encoding__rep
 use        Interfaces__c_streams__text_content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__text_content_encoding.text_content_encoding, 
 predicate in_range = Interfaces__c_streams__text_content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__non_default_text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type non_default_text_content_encoding 
 
 function first 
   : int =
  2
 
 function last 
   : int =
  5
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = non_default_text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type non_default_text_content_encoding__ref =
  { mutable non_default_text_content_encoding__content "model_trace:" "name:" : non_default_text_content_encoding }
 
 function non_default_text_content_encoding__ref___projection 
   (a : non_default_text_content_encoding__ref) : non_default_text_content_encoding =
  a.non_default_text_content_encoding__content
 
 meta "model_projection" function non_default_text_content_encoding__ref___projection
 
 meta "inline : no" function non_default_text_content_encoding__ref___projection
 
 val non_default_text_content_encoding__havoc 
   (x : non_default_text_content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__non_default_text_content_encoding__rep
 use        Interfaces__c_streams__non_default_text_content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__non_default_text_content_encoding.non_default_text_content_encoding, 
 predicate in_range = Interfaces__c_streams__non_default_text_content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 254 0 0#"model" "name:handle" "model_trace:9404" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 254 0 0#"model" "model_trace:9413" "name:Mode" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__nam
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function nam #"i-cstrea.ads" 262 0 0#"model" "model_trace:9431" "name:nam" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__nam___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 262 0 0#"model" "name:buffer" "model_trace:9440" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__max_path_len
 use import "_gnatprove_standard".Main

 function max_path_len #"i-cstrea.ads" 270 0 0#"model" "model_trace:9454" "name:max_path_len" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  3
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content "model_trace:" "name:" : file_mode }
 
 function file_mode__ref___projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref___projection
 
 meta "inline : no" function file_mode__ref___projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__file_mode__rep
 use        System__file_control_block__file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__file_mode.file_mode, 
 predicate in_range = System__file_control_block__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__read_file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type read_file_mode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = read_file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type read_file_mode__ref =
  { mutable read_file_mode__content "model_trace:" "name:" : read_file_mode }
 
 function read_file_mode__ref___projection 
   (a : read_file_mode__ref) : read_file_mode =
  a.read_file_mode__content
 
 meta "model_projection" function read_file_mode__ref___projection
 
 meta "inline : no" function read_file_mode__ref___projection
 
 val read_file_mode__havoc 
   (x : read_file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__read_file_mode__rep
 use        System__file_control_block__read_file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__read_file_mode.read_file_mode, 
 predicate in_range = System__file_control_block__read_file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__shared_status_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type shared_status_type 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = shared_status_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type shared_status_type__ref =
  { mutable shared_status_type__content "model_trace:" "name:" : shared_status_type }
 
 function shared_status_type__ref___projection 
   (a : shared_status_type__ref) : shared_status_type =
  a.shared_status_type__content
 
 meta "model_projection" function shared_status_type__ref___projection
 
 meta "inline : no" function shared_status_type__ref___projection
 
 val shared_status_type__havoc 
   (x : shared_status_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__shared_status_type__rep
 use        System__file_control_block__shared_status_type
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__shared_status_type.shared_status_type, 
 predicate in_range = System__file_control_block__shared_status_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_methodB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type twc_encoding_methodB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = twc_encoding_methodB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type twc_encoding_methodB__ref =
  { mutable twc_encoding_methodB__content "model_trace:" "name:" : twc_encoding_methodB }
 
 function twc_encoding_methodB__ref___projection 
   (a : twc_encoding_methodB__ref) : twc_encoding_methodB =
  a.twc_encoding_methodB__content
 
 meta "model_projection" function twc_encoding_methodB__ref___projection
 
 meta "inline : no" function twc_encoding_methodB__ref___projection
 
 val twc_encoding_methodB__havoc 
   (x : twc_encoding_methodB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__Twc_encoding_methodB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__Twc_encoding_methodB.twc_encoding_methodB) : int =
  (System__wch_con__Twc_encoding_methodB.twc_encoding_methodB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 predicate in_range = System__wch_con__Twc_encoding_methodB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_encoding_method =
  < range 1 6 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_encoding_method__ref =
  { mutable wc_encoding_method__content "model_trace:" "name:" : wc_encoding_method }
 
 function wc_encoding_method__ref___projection 
   (a : wc_encoding_method__ref) : wc_encoding_method =
  a.wc_encoding_method__content
 
 meta "model_projection" function wc_encoding_method__ref___projection
 
 meta "inline : no" function wc_encoding_method__ref___projection
 
 val wc_encoding_method__havoc 
   (x : wc_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_encoding_method__rep
 use        System__wch_con__wc_encoding_method
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__wc_encoding_method.wc_encoding_method) : int =
  (System__wch_con__wc_encoding_method.wc_encoding_method'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_encoding_method.wc_encoding_method, 
 predicate in_range = System__wch_con__wc_encoding_method.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_hex
 use import "_gnatprove_standard".Main

 function wcem_hex #"s-wchcon.ads" 100 0 0#"model" "model_trace:11683" "name:WCEM_Hex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_upper
 use import "_gnatprove_standard".Main

 function wcem_upper #"s-wchcon.ads" 108 0 0#"model" "model_trace:11693" "name:WCEM_Upper" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_shift_jis
 use import "_gnatprove_standard".Main

 function wcem_shift_jis #"s-wchcon.ads" 117 0 0#"model" "model_trace:11703" "name:WCEM_Shift_JIS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_euc
 use import "_gnatprove_standard".Main

 function wcem_euc #"s-wchcon.ads" 126 0 0#"model" "model_trace:11713" "name:WCEM_EUC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_utf8
 use import "_gnatprove_standard".Main

 function wcem_utf8 #"s-wchcon.ads" 134 0 0#"model" "model_trace:11723" "name:WCEM_UTF8" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_brackets
 use import "_gnatprove_standard".Main

 function wcem_brackets #"s-wchcon.ads" 156 0 0#"model" "model_trace:11733" "name:WCEM_Brackets" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__wc_encoding_method

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_encoding_lettersB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_encoding_lettersB__ref =
  { mutable twc_encoding_lettersB__content "model_trace:" "name:" : twc_encoding_lettersB }
 
 function twc_encoding_lettersB__ref___projection 
   (a : twc_encoding_lettersB__ref) : twc_encoding_lettersB =
  a.twc_encoding_lettersB__content
 
 meta "model_projection" function twc_encoding_lettersB__ref___projection
 
 meta "inline : no" function twc_encoding_lettersB__ref___projection
 
 val twc_encoding_lettersB__havoc 
   (x : twc_encoding_lettersB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s =
  < range 1 6 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___2__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___2__projection
 
 meta "inline : no" function t3s__ref___2__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T3s__rep
 use        System__wch_con__T3s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__T3s.t3s) : int =
  (System__wch_con__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__T3s.t3s, 
 predicate in_range = System__wch_con__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_encoding_letters
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function wc_encoding_letters #"s-wchcon.ads" 169 0 0#"model_projected" "model_trace:11743" "name:WC_Encoding_Letters" 
   : Array__Int__Standard__character.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_esc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_esc_encoding_method =
  < range 1 1 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_esc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_esc_encoding_method__ref =
  { mutable wc_esc_encoding_method__content "model_trace:" "name:" : wc_esc_encoding_method }
 
 function wc_esc_encoding_method__ref___projection 
   (a : wc_esc_encoding_method__ref) : wc_esc_encoding_method =
  a.wc_esc_encoding_method__content
 
 meta "model_projection" function wc_esc_encoding_method__ref___projection
 
 meta "inline : no" function wc_esc_encoding_method__ref___projection
 
 val wc_esc_encoding_method__havoc 
   (x : wc_esc_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_esc_encoding_method__rep
 use        System__wch_con__wc_esc_encoding_method
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__wc_esc_encoding_method.wc_esc_encoding_method) : int =
  (System__wch_con__wc_esc_encoding_method.wc_esc_encoding_method'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_esc_encoding_method.wc_esc_encoding_method, 
 predicate in_range = System__wch_con__wc_esc_encoding_method.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_upper_half_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_upper_half_encoding_method =
  < range 2 5 >
 
 function first 
   : int =
  2
 
 function last 
   : int =
  5
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_upper_half_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_upper_half_encoding_method__ref =
  { mutable wc_upper_half_encoding_method__content "model_trace:" "name:" : wc_upper_half_encoding_method }
 
 function wc_upper_half_encoding_method__ref___projection 
   (a : wc_upper_half_encoding_method__ref) : wc_upper_half_encoding_method =
  a.wc_upper_half_encoding_method__content
 
 meta "model_projection" function wc_upper_half_encoding_method__ref___projection
 
 meta "inline : no" function wc_upper_half_encoding_method__ref___projection
 
 val wc_upper_half_encoding_method__havoc 
   (x : wc_upper_half_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_upper_half_encoding_method__rep
 use        System__wch_con__wc_upper_half_encoding_method
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__wc_upper_half_encoding_method.wc_upper_half_encoding_method) : int =
  (System__wch_con__wc_upper_half_encoding_method.wc_upper_half_encoding_method'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_upper_half_encoding_method.wc_upper_half_encoding_method, 
 predicate in_range = System__wch_con__wc_upper_half_encoding_method.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_183   : int.
   (if (( (a__first <= temp___idx_183) /\ (temp___idx_183 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_183)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_183))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_183   : int.
    (if (( (a__first <= temp___idx_183) /\ (temp___idx_183 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_183)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_183))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__natural__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__natural.component_type, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__natural_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural__rep
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__natural.component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get, 
 function bool_eq = Array__Int__Standard__natural.bool_eq

end

(* Module for axiomatizing type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__wc_encoding_method
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_longest_sequencesB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_longest_sequencesB__ref =
  { mutable twc_longest_sequencesB__content "model_trace:" "name:" : twc_longest_sequencesB }
 
 function twc_longest_sequencesB__ref___projection 
   (a : twc_longest_sequencesB__ref) : twc_longest_sequencesB =
  a.twc_longest_sequencesB__content
 
 meta "model_projection" function twc_longest_sequencesB__ref___projection
 
 meta "inline : no" function twc_longest_sequencesB__ref___projection
 
 val twc_longest_sequencesB__havoc 
   (x : twc_longest_sequencesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7s =
  < range 1 6 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t7s__ref =
  { mutable t7s__content "model_trace:" "name:" : t7s }
 
 function t7s__ref___projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref___projection
 
 meta "inline : no" function t7s__ref___projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T7s__rep
 use        System__wch_con__T7s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__wch_con__T7s.t7s) : int =
  (System__wch_con__T7s.t7s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__T7s.t7s, 
 predicate in_range = System__wch_con__T7s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_longest_sequences
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function wc_longest_sequences #"s-wchcon.ads" 193 0 0#"model_projected" "model_trace:11811" "name:WC_Longest_Sequences" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "c" defined at s-wchcon.ads:203, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 203 0 0#"model" "name:C" "model_trace:11849" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:203, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method
 use import "_gnatprove_standard".Main

 function get_wc_encoding_method 
   (c : int) : int
 
 predicate get_wc_encoding_method__function_guard 
   (result : int) (c : int) 

end

(* Module for defining the constant "s" defined at s-wchcon.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__2__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-wchcon.ads" 207 0 0#"model_projected" "name:S" "model_trace:11868" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-wchcon.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__2__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method__2
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_wc_encoding_method__2 
   (s : Standard__string.string) : int
 
 predicate get_wc_encoding_method__2__function_guard 
   (result : int) (s : Standard__string.string) 

end

(* Module for defining the constant "c" defined at s-wchcon.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 213 0 0#"model" "name:C" "model_trace:11887" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "em" defined at s-wchcon.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__em
 use import "_gnatprove_standard".Main

 function em #"s-wchcon.ads" 214 0 0#"model" "model_trace:11896" "name:EM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "em" defined at s-wchcon.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__em___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__is_start_of_encoding
 use import "_gnatprove_standard".Main

 function is_start_of_encoding 
   (c : int) (em : int) : bool
 
 predicate is_start_of_encoding__function_guard 
   (result : bool) (c : int) (em : int) 

end

(* Module for axiomatizing the record theory associated to type "file_type" defined at a-textio.ads:52, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Ada__text_io__file_type__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_type
 use export Ada__text_io__file_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_type =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : file_type) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : file_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : file_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : file_type.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : file_type) (b : file_type) : bool
 
 function dummy 
   : file_type
 
 type file_type__ref =
  { mutable file_type__content "model_trace:" "name:" : file_type }
 
 function file_type__ref___projection 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref___projection
 
 meta "inline : no" function file_type__ref___projection
 
 val file_type__havoc 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content "model_trace:" "name:" : file_mode }
 
 function file_mode__ref___2__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref___2__projection
 
 meta "inline : no" function file_mode__ref___2__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content "model_trace:" "name:" : tcountB }
 
 function tcountB__ref___projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref___projection
 
 meta "inline : no" function tcountB__ref___projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type count =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content "model_trace:" "name:" : count }
 
 function count__ref___projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref___projection
 
 meta "inline : no" function count__ref___projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive_count =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive_count__ref =
  { mutable positive_count__content "model_trace:" "name:" : positive_count }
 
 function positive_count__ref___projection 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref___projection
 
 meta "inline : no" function positive_count__ref___projection
 
 val positive_count__havoc 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count__rep
 use        Ada__text_io__positive_count
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__text_io__positive_count.positive_count) : int =
  (Ada__text_io__positive_count.positive_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__positive_count.positive_count, 
 predicate in_range = Ada__text_io__positive_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__unbounded
 use import "_gnatprove_standard".Main

 function unbounded #"a-textio.ads" 70 0 0#"model" "model_trace:3451" "name:Unbounded" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field
 use import "_gnatprove_standard".Main
 use import "int".Int

 type field =
  < range 0 255 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type field__ref =
  { mutable field__content "model_trace:" "name:" : field }
 
 function field__ref___projection 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref___projection
 
 meta "inline : no" function field__ref___projection
 
 val field__havoc 
   (x : field__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field__rep
 use        Ada__text_io__field
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__text_io__field.field) : int =
  (Ada__text_io__field.field'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__field.field, 
 predicate in_range = Ada__text_io__field.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base
 use import "_gnatprove_standard".Main
 use import "int".Int

 type number_base =
  < range 2 16 >
 
 function first 
   : int =
  2
 
 function last 
   : int =
  16
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type number_base__ref =
  { mutable number_base__content "model_trace:" "name:" : number_base }
 
 function number_base__ref___projection 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref___projection
 
 meta "inline : no" function number_base__ref___projection
 
 val number_base__havoc 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base__rep
 use        Ada__text_io__number_base
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Ada__text_io__number_base.number_base) : int =
  (Ada__text_io__number_base.number_base'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__number_base.number_base, 
 predicate in_range = Ada__text_io__number_base.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set
 use import "_gnatprove_standard".Main
 use import "int".Int

 type type_set 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = type_set, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type type_set__ref =
  { mutable type_set__content "model_trace:" "name:" : type_set }
 
 function type_set__ref___projection 
   (a : type_set__ref) : type_set =
  a.type_set__content
 
 meta "model_projection" function type_set__ref___projection
 
 meta "inline : no" function type_set__ref___projection
 
 val type_set__havoc 
   (x : type_set__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set__rep
 use        Ada__text_io__type_set
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__type_set.type_set, 
 predicate in_range = Ada__text_io__type_set.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "mode" defined at a-textio.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 88 0 0#"model" "name:Mode" "model_trace:3529" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 89 0 0#"model_projected" "model_trace:3539" "name:Name" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 90 0 0#"model_projected" "model_trace:3549" "name:Form" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__form___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 94 0 0#"model" "name:Mode" "model_trace:3577" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 95 0 0#"model_projected" "name:Name" "model_trace:3586" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 96 0 0#"model_projected" "name:Form" "model_trace:3595" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__form___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__reset__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 100 0 0#"model" "name:Mode" "model_trace:3659" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__mode__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 103 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__mode__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__mode
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function mode 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate mode__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__name__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 104 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__name__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__name
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function name 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate name__function_guard 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__form__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 105 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__form__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__form
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function form 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate form__function_guard 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__is_open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 107 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__is_open__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__is_open
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function is_open 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate is_open__function_guard 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_input__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 113 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_input__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_output__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 114 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_output__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_error__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 115 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_error__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_input 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_input__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_output 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_output__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_error 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_error__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_input 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_input__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_output 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_output__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_error 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_error__function_guard 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__flush__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 142 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__flush__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 149 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 149 0 0#"model" "model_trace:3991" "name:To" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 150 0 0#"model" "name:To" "model_trace:4009" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 152 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 152 0 0#"model" "name:To" "model_trace:4036" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 153 0 0#"model" "name:To" "model_trace:4054" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 155 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line_length 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate line_length__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use import "_gnatprove_standard".Main

 function line_length__2 
   (__void_param : unit) : int
 
 predicate line_length__2__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 158 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page_length 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate page_length__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use import "_gnatprove_standard".Main

 function page_length__2 
   (__void_param : unit) : int
 
 predicate page_length__2__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 165 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 165 0 0#"model" "model_trace:4139" "name:Spacing" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:166, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 166 0 0#"model" "name:Spacing" "model_trace:4158" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:166, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__2__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 168 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 168 0 0#"model" "name:Spacing" "model_trace:4186" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 169 0 0#"model" "name:Spacing" "model_trace:4205" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__2__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 171 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_line 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_line__function_guard 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line__2
 use import "_gnatprove_standard".Main

 function end_of_line__2 
   (__void_param : unit) : bool
 
 predicate end_of_line__2__function_guard 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 174 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 177 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 180 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_page 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_page__function_guard 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page__2
 use import "_gnatprove_standard".Main

 function end_of_page__2 
   (__void_param : unit) : bool
 
 predicate end_of_page__2__function_guard 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_file__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 183 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_file__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_file 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_file__function_guard 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file__2
 use import "_gnatprove_standard".Main

 function end_of_file__2 
   (__void_param : unit) : bool
 
 predicate end_of_file__2__function_guard 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 186 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 186 0 0#"model" "name:To" "model_trace:4374" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 187 0 0#"model" "name:To" "model_trace:4392" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 189 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 189 0 0#"model" "name:To" "model_trace:4419" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 190 0 0#"model" "name:To" "model_trace:4437" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:190, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 192 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__col__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function col 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate col__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col__2
 use import "_gnatprove_standard".Main

 function col__2 
   (__void_param : unit) : int
 
 predicate col__2__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:195, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 195 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:195, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate line__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line__2
 use import "_gnatprove_standard".Main

 function line__2 
   (__void_param : unit) : int
 
 predicate line__2__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 198 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:198, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate page__function_guard 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page__2
 use import "_gnatprove_standard".Main

 function page__2 
   (__void_param : unit) : int
 
 predicate page__2__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 205 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 207 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 207 0 0#"model" "name:Item" "model_trace:4596" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__2__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 208 0 0#"model" "name:Item" "model_trace:4614" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:208, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__look_ahead__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 211 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:220, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 220 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:220, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:227, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 227 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:227, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 239 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 241 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 241 0 0#"model_projected" "name:Item" "model_trace:4857" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:242, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 242 0 0#"model_projected" "name:Item" "model_trace:4875" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:242, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 245 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:245, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:253, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 253 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:253, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__3
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function get_line__3 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate get_line__3__function_guard 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__4
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_line__4 
   (__void_param : unit) : Standard__string.string
 
 predicate get_line__4__function_guard 
   (result : Standard__string.string) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:260, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 260 0 0#
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:260, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:261, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 261 0 0#"model_projected" "name:Item" "model_trace:5002" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:261, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 264 0 0#"model_projected" "name:Item" "model_trace:5020" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:439, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__write__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-textio.ads" 439 0 0#"model_projected" "name:Item" "model_trace:5511" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__write__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__eof_char
 use import "_gnatprove_standard".Main

 function eof_char 
   (__void_param : unit) : int
 
 predicate eof_char__function_guard 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "maximumoxygen" defined at submarine_controls.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine_controls__maximumoxygen
 use import "_gnatprove_standard".Main

 function maximumoxygen #"submarine_controls.ads" 9 0 0#"model" "model_trace:2689" "name:maximumOxygen" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "maximumdepth" defined at submarine_controls.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine_controls__maximumdepth
 use import "_gnatprove_standard".Main

 function maximumdepth #"submarine_controls.ads" 15 0 0#"model" "model_trace:2717" "name:maximumDepth" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "maximumtorpedoes" defined at submarine_controls.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine_controls__maximumtorpedoes
 use import "_gnatprove_standard".Main

 function maximumtorpedoes #"submarine_controls.ads" 21 0 0#"model" "model_trace:2737" "name:maximumTorpedoes" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "maximumloadedtorpedoes" defined at submarine_controls.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine_controls__maximumloadedtorpedoes
 use import "_gnatprove_standard".Main

 function maximumloadedtorpedoes #"submarine_controls.ads" 24 0 0#"model" "model_trace:2756" "name:maximumLoadedTorpedoes" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T2b" defined at submarine_controls.adb:55, created in Gnat2Why.Types.Translate_Type *)
module Submarine_controls__decreaseoxygen__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  29
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 58 0 0#"model_projected" "model_trace:5819" "name:Stream"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 58 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-stream.ads:59, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-stream.ads" 59 0 0#"model_projected" "model_trace:5828" "name:Item"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-stream.ads" 59 0 0#"model_projected" "name:Item" "model_trace:5828'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-stream.ads" 59 0 0#"model_projected" "name:Item" "model_trace:5828'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-stream.ads:60, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__last
 use import "_gnatprove_standard".Main

 val last #"a-stream.ads" 60 0 0#"model_projected" "model_trace:5837" "name:Last"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-stream.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:64, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__write__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 64 0 0#"model_projected" "name:Stream" "model_trace:5855"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 64 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:78, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 78 0 0#"model_projected" "model_trace:5904" "name:V"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 78 0 0#"model_projected" "name:V" "model_trace:5904'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 78 0 0#"model_projected" "name:V" "model_trace:5904'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read_sea__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:84, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__stream_element_arraySR__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 84 0 0# : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 84 0 0#
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 84 0 0#
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySR__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:87, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__create__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 87 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:93, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 93 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:98, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__close__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 98 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__close__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:99, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__delete__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 99 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__delete__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 100 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:101, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__2__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 101 0 0# : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__2__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 205 0 0#"model_projected" "name:Item" "model_trace:4551"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:206, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 206 0 0#"model_projected" "name:Item" "model_trace:4569"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:212, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 212 0 0#"model_projected" "name:Item" "model_trace:4641"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 213 0 0#"model_projected" "model_trace:4650" "name:End_Of_Line"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__end_of_line___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:216, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 216 0 0#"model_projected" "name:Item" "model_trace:4668"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:216, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 217 0 0#"model_projected" "name:End_Of_Line" "model_trace:4677"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__end_of_line___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:221, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 221 0 0#"model_projected" "name:Item" "model_trace:4704"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:224, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 224 0 0#"model_projected" "name:Item" "model_trace:4722"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:228, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 228 0 0#"model_projected" "name:Item" "model_trace:4749"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:228, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:229, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 229 0 0#"model_projected" "model_trace:4758" "name:Available"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__available___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:232, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 232 0 0#"model_projected" "name:Item" "model_trace:4776"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:233, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 233 0 0#"model_projected" "name:Available" "model_trace:4785"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:233, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__available___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__3__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 239 0 0#"model_projected" "name:Item" "model_trace:4812"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 239 0 0#"model_projected" "name:Item" "model_trace:4812'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 239 0 0#"model_projected" "name:Item" "model_trace:4812'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:240, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__4__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 240 0 0#"model_projected" "name:Item" "model_trace:4830"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 240 0 0#"model_projected" "name:Item" "model_trace:4830'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 240 0 0#"model_projected" "name:Item" "model_trace:4830'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:240, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:246, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 246 0 0#"model_projected" "name:Item" "model_trace:4902"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 246 0 0#"model_projected" "name:Item" "model_trace:4902'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 246 0 0#"model_projected" "name:Item" "model_trace:4902'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:246, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:247, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 247 0 0#"model_projected" "name:Last" "model_trace:4911"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:247, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:250, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 250 0 0#"model_projected" "name:Item" "model_trace:4929"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 250 0 0#"model_projected" "name:Item" "model_trace:4929'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 250 0 0#"model_projected" "name:Item" "model_trace:4929'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:250, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:251, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 251 0 0#"model_projected" "name:Last" "model_trace:4938"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:251, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__default_wcem
 use import "_gnatprove_standard".Main

 val default_wcem #"a-textio.ads" 362 0 0#"model_projected" "model_trace:5205" "name:Default_WCEM"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__default_wcem___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:433, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-textio.ads" 433 0 0#"model_projected" "name:Item" "model_trace:5467"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-textio.ads" 433 0 0#"model_projected" "name:Item" "model_trace:5467'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-textio.ads" 433 0 0#"model_projected" "name:Item" "model_trace:5467'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:433, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:434, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 434 0 0#"model_projected" "name:Last" "model_trace:5480"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:434, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "innerairlockstate" defined at submarine_controls.ads:4, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__innerairlockstate
 use import "_gnatprove_standard".Main

 val innerairlockstate #"submarine_controls.ads" 4 0 0#"model_projected" "model_trace:2662" "name:innerAirlockState"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "innerairlockstate" defined at submarine_controls.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__innerairlockstate___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "outerairlockstate" defined at submarine_controls.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__outerairlockstate
 use import "_gnatprove_standard".Main

 val outerairlockstate #"submarine_controls.ads" 5 0 0#"model_projected" "model_trace:2671" "name:outerAirlockState"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outerairlockstate" defined at submarine_controls.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__outerairlockstate___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "airlockdoorslocked" defined at submarine_controls.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__airlockdoorslocked
 use import "_gnatprove_standard".Main

 val airlockdoorslocked #"submarine_controls.ads" 6 0 0#"model_projected" "model_trace:2680" "name:airlockDoorsLocked"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "airlockdoorslocked" defined at submarine_controls.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__airlockdoorslocked___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygenlevel" defined at submarine_controls.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main

 val oxygenlevel #"submarine_controls.ads" 11 0 0#"model_projected" "model_trace:2699" "name:oxygenLevel"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygenlevel" defined at submarine_controls.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__oxygenlevel___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentdepth" defined at submarine_controls.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"submarine_controls.ads" 13 0 0#"model_projected" "model_trace:2708" "name:currentDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at submarine_controls.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "isreactoroverheated" defined at submarine_controls.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__isreactoroverheated
 use import "_gnatprove_standard".Main

 val isreactoroverheated #"submarine_controls.ads" 18 0 0#"model_projected" "model_trace:2727" "name:isReactorOverheated"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "isreactoroverheated" defined at submarine_controls.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__isreactoroverheated___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "storedtorpedoes" defined at submarine_controls.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__storedtorpedoes
 use import "_gnatprove_standard".Main

 val storedtorpedoes #"submarine_controls.ads" 22 0 0#"model_projected" "model_trace:2747" "name:storedTorpedoes"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "storedtorpedoes" defined at submarine_controls.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__storedtorpedoes___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "loadedtorpedoes" defined at submarine_controls.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine_controls__loadedtorpedoes
 use import "_gnatprove_standard".Main

 val loadedtorpedoes #"submarine_controls.ads" 25 0 0#"model_projected" "model_trace:2766" "name:loadedTorpedoes"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "loadedtorpedoes" defined at submarine_controls.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine_controls__loadedtorpedoes___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__read
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__write
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def 
   (temp___157 : int) (temp___158 : int) (temp___159 : int) (temp___160 : int) (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) (temp___167 : int) (temp___168 : int) (temp___169 : int) (temp___170 : int) (temp___171 : int) (temp___172 : int) : Array__Int__Standard__integer.map

end

(* Module for defining a value for string literal  defined at s-parame.ads:116, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_174
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_174 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_174__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_174 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 1)) = 95) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 2)) = 95) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 3)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 4)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 5)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 6)) = 116) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 7)) = 95) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 8)) = 109) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 9)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 10)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 11)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 12)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_174 __void_param) 13)) = 99) ))

end

(* Module for possibly declaring a logic function for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strncpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__clearerr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__free
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memcpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memmove
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mktemp
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rewind
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpnam
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_binary_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_text_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__full_name
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at s-wchcon.ads:170, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_encoding_letters__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function system__wch_con__wc_encoding_letters__aggregate_def 
   (temp___176 : int) (temp___177 : int) (temp___178 : int) (temp___179 : int) (temp___180 : int) (temp___181 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at s-wchcon.ads:194, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_longest_sequences__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function system__wch_con__wc_longest_sequences__aggregate_def 
   (temp___185 : int) (temp___186 : int) (temp___187 : int) (temp___188 : int) (temp___189 : int) (temp___190 : int) : Array__Int__Standard__natural.map

end

(* Module for possibly declaring a logic function for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__create
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__open
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__close
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__delete
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_input
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_output
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_error
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__initialize_standard_files
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeinnerairlock" defined at submarine_controls.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__closeinnerairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openinnerairlock" defined at submarine_controls.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__openinnerairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeouterairlock" defined at submarine_controls.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__closeouterairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openouterairlock" defined at submarine_controls.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__openouterairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockairlockdoors" defined at submarine_controls.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__lockairlockdoors
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "decreaseoxygen" defined at submarine_controls.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__decreaseoxygen
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkoxygenstatus" defined at submarine_controls.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__checkoxygenstatus
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkreactorstatus" defined at submarine_controls.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__checkreactorstatus
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "increasedepth" defined at submarine_controls.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__increasedepth
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "decreasedepth" defined at submarine_controls.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__decreasedepth
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "storetorpedo" defined at submarine_controls.ads:118, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__storetorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadtorpedo" defined at submarine_controls.ads:124, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__loadtorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firetorpedo" defined at submarine_controls.ads:135, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine_controls__firetorpedo
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__root_stream_type___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 predicate dynamic_invariant "inline" 
   (temp___expr_196 : Ada__streams__root_stream_type.root_stream_type) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_197 : Ada__streams__root_stream_type.root_stream_type) (temp___skip_top_level_198 : bool)  =
  ((Ada__streams__root_stream_type.attr__tag temp___expr_197) = Ada__streams__root_stream_type.__tag)

end

(* Module giving axioms for type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Ada__streams__stream_element

 predicate dynamic_invariant "inline" 
   (temp___expr_203 : BV8.t) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool)  =
  (if (( temp___is_init_199 \/ (BV8.ule Ada__streams__stream_element.first Ada__streams__stream_element.last) )) then (
   (Ada__streams__stream_element.dynamic_property Ada__streams__stream_element.first Ada__streams__stream_element.last temp___expr_203)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_204 : BV8.t) (temp___skip_top_level_205 : bool)  =
  true

end

(* Module giving axioms for type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__Tstream_element_offsetB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_offset___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_offset

 predicate dynamic_invariant "inline" 
   (temp___expr_210 : int) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool)  =
  (if (( temp___is_init_206 \/ (Ada__streams__stream_element_offset.first <= Ada__streams__stream_element_offset.last) )) then (
   (Ada__streams__stream_element_offset.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last temp___expr_210)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_211 : int) (temp___skip_top_level_212 : bool)  =
  true

end

(* Module giving axioms for type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_count

 predicate dynamic_invariant "inline" 
   (temp___expr_217 : int) (temp___is_init_213 : bool) (temp___skip_constant_214 : bool) (temp___do_toplevel_215 : bool) (temp___do_typ_inv_216 : bool)  =
  (if (( temp___is_init_213 \/ (Ada__streams__stream_element_count.first <= Ada__streams__stream_element_count.last) )) then (
   (Ada__streams__stream_element_count.dynamic_property Ada__streams__stream_element_count.first Ada__streams__stream_element_count.last temp___expr_217)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_218 : int) (temp___skip_top_level_219 : bool)  =
  true

end

(* Module giving axioms for type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_array___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_array

 predicate dynamic_invariant "inline" 
   (temp___expr_224 : Ada__streams__stream_element_array.stream_element_array) (temp___is_init_220 : bool) (temp___skip_constant_221 : bool) (temp___do_toplevel_222 : bool) (temp___do_typ_inv_223 : bool)  =
  (if (temp___skip_constant_221) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__stream_element_array.first temp___expr_224) (Ada__streams__stream_element_array.last temp___expr_224))))

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant "inline" 
   (temp___expr_235 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool)  =
  (if (( temp___is_init_231 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_235)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_236 : int) (temp___skip_top_level_237 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address

 predicate dynamic_invariant "inline" 
   (temp___expr_242 : BV64.t) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool)  =
  (if (( temp___is_init_238 \/ (BV64.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_242)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_243 : BV64.t) (temp___skip_top_level_244 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant "inline" 
   (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool)  =
  (if (( temp___is_init_245 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_249)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_250 : int) (temp___skip_top_level_251 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_256 : int) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool)  =
  (if (( temp___is_init_252 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_256)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_257 : int) (temp___skip_top_level_258 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant "inline" 
   (temp___expr_263 : int) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool)  =
  (if (( temp___is_init_259 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_263)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_264 : int) (temp___skip_top_level_265 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_270 : int) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool)  =
  (if (( temp___is_init_266 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_270)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_271 : int) (temp___skip_top_level_272 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_277 : Array__Int__Standard__integer.map) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_279 : Array__Int__Standard__integer.map) (temp___skip_top_level_280 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Tsize_typeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__size_type___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__size_type

 predicate dynamic_invariant "inline" 
   (temp___expr_287 : int) (temp___is_init_283 : bool) (temp___skip_constant_284 : bool) (temp___do_toplevel_285 : bool) (temp___do_typ_inv_286 : bool)  =
  (if (( temp___is_init_283 \/ (System__parameters__size_type.first <= System__parameters__size_type.last) )) then (
   (System__parameters__size_type.dynamic_property System__parameters__size_type.first System__parameters__size_type.last temp___expr_287)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_288 : int) (temp___skip_top_level_289 : bool)  =
  true

end

(* Module giving axioms for type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__c_address___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at s-parame.ads:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__chars___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__dirs___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__files___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int

 predicate dynamic_invariant "inline" 
   (temp___expr_294 : int) (temp___is_init_290 : bool) (temp___skip_constant_291 : bool) (temp___do_toplevel_292 : bool) (temp___do_typ_inv_293 : bool)  =
  (if (( temp___is_init_290 \/ (System__crtl__int.first <= System__crtl__int.last) )) then (
   (System__crtl__int.dynamic_property System__crtl__int.first System__crtl__int.last temp___expr_294)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_295 : int) (temp___skip_top_level_296 : bool)  =
  true

end

(* Module giving axioms for type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__TlongB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__long___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__long

 predicate dynamic_invariant "inline" 
   (temp___expr_301 : int) (temp___is_init_297 : bool) (temp___skip_constant_298 : bool) (temp___do_toplevel_299 : bool) (temp___do_typ_inv_300 : bool)  =
  (if (( temp___is_init_297 \/ (System__crtl__long.first <= System__crtl__long.last) )) then (
   (System__crtl__long.dynamic_property System__crtl__long.first System__crtl__long.last temp___expr_301)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_302 : int) (temp___skip_top_level_303 : bool)  =
  true

end

(* Module giving axioms for type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__off_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__off_t

 predicate dynamic_invariant "inline" 
   (temp___expr_308 : int) (temp___is_init_304 : bool) (temp___skip_constant_305 : bool) (temp___do_toplevel_306 : bool) (temp___do_typ_inv_307 : bool)  =
  (if (( temp___is_init_304 \/ (System__crtl__off_t.first <= System__crtl__off_t.last) )) then (
   (System__crtl__off_t.dynamic_property System__crtl__off_t.first System__crtl__off_t.last temp___expr_308)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_309 : int) (temp___skip_top_level_310 : bool)  =
  true

end

(* Module giving axioms for type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__size_t___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__size_t

 predicate dynamic_invariant "inline" 
   (temp___expr_315 : BV64.t) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool)  =
  (if (( temp___is_init_311 \/ (BV64.ule System__crtl__size_t.first System__crtl__size_t.last) )) then (
   (System__crtl__size_t.dynamic_property System__crtl__size_t.first System__crtl__size_t.last temp___expr_315)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_316 : BV64.t) (temp___skip_top_level_317 : bool)  =
  true

end

(* Module giving axioms for type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tssize_tB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__ssize_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__ssize_t

 predicate dynamic_invariant "inline" 
   (temp___expr_322 : int) (temp___is_init_318 : bool) (temp___skip_constant_319 : bool) (temp___do_toplevel_320 : bool) (temp___do_typ_inv_321 : bool)  =
  (if (( temp___is_init_318 \/ (System__crtl__ssize_t.first <= System__crtl__ssize_t.last) )) then (
   (System__crtl__ssize_t.dynamic_property System__crtl__ssize_t.first System__crtl__ssize_t.last temp___expr_322)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_323 : int) (temp___skip_top_level_324 : bool)  =
  true

end

(* Module giving axioms for type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tint64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int64

 predicate dynamic_invariant "inline" 
   (temp___expr_329 : int) (temp___is_init_325 : bool) (temp___skip_constant_326 : bool) (temp___do_toplevel_327 : bool) (temp___do_typ_inv_328 : bool)  =
  (if (( temp___is_init_325 \/ (System__crtl__int64.first <= System__crtl__int64.last) )) then (
   (System__crtl__int64.dynamic_property System__crtl__int64.first System__crtl__int64.last temp___expr_329)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_330 : int) (temp___skip_top_level_331 : bool)  =
  true

end

(* Module giving axioms for type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__filename_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__filename_encoding

 predicate dynamic_invariant "inline" 
   (temp___expr_336 : int) (temp___is_init_332 : bool) (temp___skip_constant_333 : bool) (temp___do_toplevel_334 : bool) (temp___do_typ_inv_335 : bool)  =
  (if (( temp___is_init_332 \/ (System__crtl__filename_encoding.first <= System__crtl__filename_encoding.last) )) then (
   (System__crtl__filename_encoding.dynamic_property System__crtl__filename_encoding.first System__crtl__filename_encoding.last temp___expr_336)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_337 : int) (temp___skip_top_level_338 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_8B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_351 : int) (temp___is_init_347 : bool) (temp___skip_constant_348 : bool) (temp___do_toplevel_349 : bool) (temp___do_typ_inv_350 : bool)  =
  (if (( temp___is_init_347 \/ (Interfaces__integer_8.first <= Interfaces__integer_8.last) )) then (
   (Interfaces__integer_8.dynamic_property Interfaces__integer_8.first Interfaces__integer_8.last temp___expr_351)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_352 : int) (temp___skip_top_level_353 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_16B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_358 : int) (temp___is_init_354 : bool) (temp___skip_constant_355 : bool) (temp___do_toplevel_356 : bool) (temp___do_typ_inv_357 : bool)  =
  (if (( temp___is_init_354 \/ (Interfaces__integer_16.first <= Interfaces__integer_16.last) )) then (
   (Interfaces__integer_16.dynamic_property Interfaces__integer_16.first Interfaces__integer_16.last temp___expr_358)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_359 : int) (temp___skip_top_level_360 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_365 : int) (temp___is_init_361 : bool) (temp___skip_constant_362 : bool) (temp___do_toplevel_363 : bool) (temp___do_typ_inv_364 : bool)  =
  (if (( temp___is_init_361 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_365)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_366 : int) (temp___skip_top_level_367 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_372 : int) (temp___is_init_368 : bool) (temp___skip_constant_369 : bool) (temp___do_toplevel_370 : bool) (temp___do_typ_inv_371 : bool)  =
  (if (( temp___is_init_368 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_372)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_373 : int) (temp___skip_top_level_374 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_8___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Interfaces__unsigned_8

 predicate dynamic_invariant "inline" 
   (temp___expr_379 : BV8.t) (temp___is_init_375 : bool) (temp___skip_constant_376 : bool) (temp___do_toplevel_377 : bool) (temp___do_typ_inv_378 : bool)  =
  (if (( temp___is_init_375 \/ (BV8.ule Interfaces__unsigned_8.first Interfaces__unsigned_8.last) )) then (
   (Interfaces__unsigned_8.dynamic_property Interfaces__unsigned_8.first Interfaces__unsigned_8.last temp___expr_379)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_380 : BV8.t) (temp___skip_top_level_381 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_16___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Interfaces__unsigned_16

 predicate dynamic_invariant "inline" 
   (temp___expr_386 : BV16.t) (temp___is_init_382 : bool) (temp___skip_constant_383 : bool) (temp___do_toplevel_384 : bool) (temp___do_typ_inv_385 : bool)  =
  (if (( temp___is_init_382 \/ (BV16.ule Interfaces__unsigned_16.first Interfaces__unsigned_16.last) )) then (
   (Interfaces__unsigned_16.dynamic_property Interfaces__unsigned_16.first Interfaces__unsigned_16.last temp___expr_386)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_387 : BV16.t) (temp___skip_top_level_388 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_24___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_24

 predicate dynamic_invariant "inline" 
   (temp___expr_393 : BV32.t) (temp___is_init_389 : bool) (temp___skip_constant_390 : bool) (temp___do_toplevel_391 : bool) (temp___do_typ_inv_392 : bool)  =
  (if (( temp___is_init_389 \/ (BV32.ule Interfaces__unsigned_24.first Interfaces__unsigned_24.last) )) then (
   (Interfaces__unsigned_24.dynamic_property Interfaces__unsigned_24.first Interfaces__unsigned_24.last temp___expr_393)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_394 : BV32.t) (temp___skip_top_level_395 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_32

 predicate dynamic_invariant "inline" 
   (temp___expr_400 : BV32.t) (temp___is_init_396 : bool) (temp___skip_constant_397 : bool) (temp___do_toplevel_398 : bool) (temp___do_typ_inv_399 : bool)  =
  (if (( temp___is_init_396 \/ (BV32.ule Interfaces__unsigned_32.first Interfaces__unsigned_32.last) )) then (
   (Interfaces__unsigned_32.dynamic_property Interfaces__unsigned_32.first Interfaces__unsigned_32.last temp___expr_400)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_401 : BV32.t) (temp___skip_top_level_402 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64

 predicate dynamic_invariant "inline" 
   (temp___expr_407 : BV64.t) (temp___is_init_403 : bool) (temp___skip_constant_404 : bool) (temp___do_toplevel_405 : bool) (temp___do_typ_inv_406 : bool)  =
  (if (( temp___is_init_403 \/ (BV64.ule Interfaces__unsigned_64.first Interfaces__unsigned_64.last) )) then (
   (Interfaces__unsigned_64.dynamic_property Interfaces__unsigned_64.first Interfaces__unsigned_64.last temp___expr_407)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_408 : BV64.t) (temp___skip_top_level_409 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Interfaces__ieee_float_32

 predicate dynamic_invariant "inline" 
   (temp___expr_414 : Float32.t) (temp___is_init_410 : bool) (temp___skip_constant_411 : bool) (temp___do_toplevel_412 : bool) (temp___do_typ_inv_413 : bool)  =
  (if (( temp___is_init_410 \/ (Float32.le Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last) )) then (
   (Interfaces__ieee_float_32.dynamic_property Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last temp___expr_414)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_415 : Float32.t) (temp___skip_top_level_416 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Interfaces__ieee_float_64

 predicate dynamic_invariant "inline" 
   (temp___expr_421 : Float64.t) (temp___is_init_417 : bool) (temp___skip_constant_418 : bool) (temp___do_toplevel_419 : bool) (temp___do_typ_inv_420 : bool)  =
  (if (( temp___is_init_417 \/ (Float64.le Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last) )) then (
   (Interfaces__ieee_float_64.dynamic_property Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last temp___expr_421)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_422 : Float64.t) (temp___skip_top_level_423 : bool)  =
  true

end

(* Module giving axioms for type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__chars___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__files___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int

 predicate dynamic_invariant "inline" 
   (temp___expr_428 : int) (temp___is_init_424 : bool) (temp___skip_constant_425 : bool) (temp___do_toplevel_426 : bool) (temp___do_typ_inv_427 : bool)  =
  (if (( temp___is_init_424 \/ (Interfaces__c_streams__int.first <= Interfaces__c_streams__int.last) )) then (
   (Interfaces__c_streams__int.dynamic_property Interfaces__c_streams__int.first Interfaces__c_streams__int.last temp___expr_428)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_429 : int) (temp___skip_top_level_430 : bool)  =
  true

end

(* Module giving axioms for type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__long___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__long

 predicate dynamic_invariant "inline" 
   (temp___expr_435 : int) (temp___is_init_431 : bool) (temp___skip_constant_432 : bool) (temp___do_toplevel_433 : bool) (temp___do_typ_inv_434 : bool)  =
  (if (( temp___is_init_431 \/ (Interfaces__c_streams__long.first <= Interfaces__c_streams__long.last) )) then (
   (Interfaces__c_streams__long.dynamic_property Interfaces__c_streams__long.first Interfaces__c_streams__long.last temp___expr_435)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_436 : int) (temp___skip_top_level_437 : bool)  =
  true

end

(* Module giving axioms for type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__size_t___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__size_t

 predicate dynamic_invariant "inline" 
   (temp___expr_442 : BV64.t) (temp___is_init_438 : bool) (temp___skip_constant_439 : bool) (temp___do_toplevel_440 : bool) (temp___do_typ_inv_441 : bool)  =
  (if (( temp___is_init_438 \/ (BV64.ule Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last) )) then (
   (Interfaces__c_streams__size_t.dynamic_property Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last temp___expr_442)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_443 : BV64.t) (temp___skip_top_level_444 : bool)  =
  true

end

(* Module giving axioms for type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__ssize_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__ssize_t

 predicate dynamic_invariant "inline" 
   (temp___expr_449 : int) (temp___is_init_445 : bool) (temp___skip_constant_446 : bool) (temp___do_toplevel_447 : bool) (temp___do_typ_inv_448 : bool)  =
  (if (( temp___is_init_445 \/ (Interfaces__c_streams__ssize_t.first <= Interfaces__c_streams__ssize_t.last) )) then (
   (Interfaces__c_streams__ssize_t.dynamic_property Interfaces__c_streams__ssize_t.first Interfaces__c_streams__ssize_t.last temp___expr_449)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_450 : int) (temp___skip_top_level_451 : bool)  =
  true

end

(* Module giving axioms for type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int64

 predicate dynamic_invariant "inline" 
   (temp___expr_456 : int) (temp___is_init_452 : bool) (temp___skip_constant_453 : bool) (temp___do_toplevel_454 : bool) (temp___do_typ_inv_455 : bool)  =
  (if (( temp___is_init_452 \/ (Interfaces__c_streams__int64.first <= Interfaces__c_streams__int64.last) )) then (
   (Interfaces__c_streams__int64.dynamic_property Interfaces__c_streams__int64.first Interfaces__c_streams__int64.last temp___expr_456)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_457 : int) (temp___skip_top_level_458 : bool)  =
  true

end

(* Module giving axioms for type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__voids___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__content_encoding

 predicate dynamic_invariant "inline" 
   (temp___expr_463 : int) (temp___is_init_459 : bool) (temp___skip_constant_460 : bool) (temp___do_toplevel_461 : bool) (temp___do_typ_inv_462 : bool)  =
  (if (( temp___is_init_459 \/ (Interfaces__c_streams__content_encoding.first <= Interfaces__c_streams__content_encoding.last) )) then (
   (Interfaces__c_streams__content_encoding.dynamic_property Interfaces__c_streams__content_encoding.first Interfaces__c_streams__content_encoding.last temp___expr_463)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_464 : int) (temp___skip_top_level_465 : bool)  =
  true

end

(* Module giving axioms for type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__text_content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__text_content_encoding

 predicate dynamic_invariant "inline" 
   (temp___expr_470 : int) (temp___is_init_466 : bool) (temp___skip_constant_467 : bool) (temp___do_toplevel_468 : bool) (temp___do_typ_inv_469 : bool)  =
  (if (( temp___is_init_466 \/ (Interfaces__c_streams__text_content_encoding.first <= Interfaces__c_streams__text_content_encoding.last) )) then (
   (Interfaces__c_streams__text_content_encoding.dynamic_property Interfaces__c_streams__text_content_encoding.first Interfaces__c_streams__text_content_encoding.last temp___expr_470)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_471 : int) (temp___skip_top_level_472 : bool)  =
  true

end

(* Module giving axioms for type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__non_default_text_content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__non_default_text_content_encoding

 predicate dynamic_invariant "inline" 
   (temp___expr_477 : int) (temp___is_init_473 : bool) (temp___skip_constant_474 : bool) (temp___do_toplevel_475 : bool) (temp___do_typ_inv_476 : bool)  =
  (if (( temp___is_init_473 \/ (Interfaces__c_streams__non_default_text_content_encoding.first <= Interfaces__c_streams__non_default_text_content_encoding.last) )) then (
   (Interfaces__c_streams__non_default_text_content_encoding.dynamic_property Interfaces__c_streams__non_default_text_content_encoding.first Interfaces__c_streams__non_default_text_content_encoding.last temp___expr_477)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_478 : int) (temp___skip_top_level_479 : bool)  =
  true

end

(* Module giving axioms for type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__file_mode

 predicate dynamic_invariant "inline" 
   (temp___expr_484 : int) (temp___is_init_480 : bool) (temp___skip_constant_481 : bool) (temp___do_toplevel_482 : bool) (temp___do_typ_inv_483 : bool)  =
  (if (( temp___is_init_480 \/ (System__file_control_block__file_mode.first <= System__file_control_block__file_mode.last) )) then (
   (System__file_control_block__file_mode.dynamic_property System__file_control_block__file_mode.first System__file_control_block__file_mode.last temp___expr_484)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_485 : int) (temp___skip_top_level_486 : bool)  =
  true

end

(* Module giving axioms for type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__read_file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__read_file_mode

 predicate dynamic_invariant "inline" 
   (temp___expr_491 : int) (temp___is_init_487 : bool) (temp___skip_constant_488 : bool) (temp___do_toplevel_489 : bool) (temp___do_typ_inv_490 : bool)  =
  (if (( temp___is_init_487 \/ (System__file_control_block__read_file_mode.first <= System__file_control_block__read_file_mode.last) )) then (
   (System__file_control_block__read_file_mode.dynamic_property System__file_control_block__read_file_mode.first System__file_control_block__read_file_mode.last temp___expr_491)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_492 : int) (temp___skip_top_level_493 : bool)  =
  true

end

(* Module giving axioms for type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__shared_status_type___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__shared_status_type

 predicate dynamic_invariant "inline" 
   (temp___expr_498 : int) (temp___is_init_494 : bool) (temp___skip_constant_495 : bool) (temp___do_toplevel_496 : bool) (temp___do_typ_inv_497 : bool)  =
  (if (( temp___is_init_494 \/ (System__file_control_block__shared_status_type.first <= System__file_control_block__shared_status_type.last) )) then (
   (System__file_control_block__shared_status_type.dynamic_property System__file_control_block__shared_status_type.first System__file_control_block__shared_status_type.last temp___expr_498)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_499 : int) (temp___skip_top_level_500 : bool)  =
  true

end

(* Module giving axioms for type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_methodB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_method

 predicate dynamic_invariant "inline" 
   (temp___expr_505 : int) (temp___is_init_501 : bool) (temp___skip_constant_502 : bool) (temp___do_toplevel_503 : bool) (temp___do_typ_inv_504 : bool)  =
  (if (( temp___is_init_501 \/ (System__wch_con__wc_encoding_method.first <= System__wch_con__wc_encoding_method.last) )) then (
   (System__wch_con__wc_encoding_method.dynamic_property System__wch_con__wc_encoding_method.first System__wch_con__wc_encoding_method.last temp___expr_505)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_506 : int) (temp___skip_top_level_507 : bool)  =
  true

end

(* Module giving axioms for type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_esc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_esc_encoding_method

 predicate dynamic_invariant "inline" 
   (temp___expr_512 : int) (temp___is_init_508 : bool) (temp___skip_constant_509 : bool) (temp___do_toplevel_510 : bool) (temp___do_typ_inv_511 : bool)  =
  (if (( temp___is_init_508 \/ (System__wch_con__wc_esc_encoding_method.first <= System__wch_con__wc_esc_encoding_method.last) )) then (
   (System__wch_con__wc_esc_encoding_method.dynamic_property System__wch_con__wc_esc_encoding_method.first System__wch_con__wc_esc_encoding_method.last temp___expr_512)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_513 : int) (temp___skip_top_level_514 : bool)  =
  true

end

(* Module giving axioms for type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_upper_half_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_upper_half_encoding_method

 predicate dynamic_invariant "inline" 
   (temp___expr_519 : int) (temp___is_init_515 : bool) (temp___skip_constant_516 : bool) (temp___do_toplevel_517 : bool) (temp___do_typ_inv_518 : bool)  =
  (if (( temp___is_init_515 \/ (System__wch_con__wc_upper_half_encoding_method.first <= System__wch_con__wc_upper_half_encoding_method.last) )) then (
   (System__wch_con__wc_upper_half_encoding_method.dynamic_property System__wch_con__wc_upper_half_encoding_method.first System__wch_con__wc_upper_half_encoding_method.last temp___expr_519)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_520 : int) (temp___skip_top_level_521 : bool)  =
  true

end

(* Module giving axioms for type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T7s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_type___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 predicate dynamic_invariant "inline" 
   (temp___expr_528 : Ada__text_io__file_type.file_type) (temp___is_init_524 : bool) (temp___skip_constant_525 : bool) (temp___do_toplevel_526 : bool) (temp___do_typ_inv_527 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_529 : Ada__text_io__file_type.file_type) (temp___skip_top_level_530 : bool)  =
  true

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__file_mode

 predicate dynamic_invariant "inline" 
   (temp___expr_535 : int) (temp___is_init_531 : bool) (temp___skip_constant_532 : bool) (temp___do_toplevel_533 : bool) (temp___do_typ_inv_534 : bool)  =
  (if (( temp___is_init_531 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_535)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_536 : int) (temp___skip_top_level_537 : bool)  =
  true

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__count

 predicate dynamic_invariant "inline" 
   (temp___expr_542 : int) (temp___is_init_538 : bool) (temp___skip_constant_539 : bool) (temp___do_toplevel_540 : bool) (temp___do_typ_inv_541 : bool)  =
  (if (( temp___is_init_538 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_542)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_543 : int) (temp___skip_top_level_544 : bool)  =
  true

end

(* Module giving axioms for type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__positive_count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__positive_count

 predicate dynamic_invariant "inline" 
   (temp___expr_549 : int) (temp___is_init_545 : bool) (temp___skip_constant_546 : bool) (temp___do_toplevel_547 : bool) (temp___do_typ_inv_548 : bool)  =
  (if (( temp___is_init_545 \/ (Ada__text_io__positive_count.first <= Ada__text_io__positive_count.last) )) then (
   (Ada__text_io__positive_count.dynamic_property Ada__text_io__positive_count.first Ada__text_io__positive_count.last temp___expr_549)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_550 : int) (temp___skip_top_level_551 : bool)  =
  true

end

(* Module giving axioms for type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__field___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__field

 predicate dynamic_invariant "inline" 
   (temp___expr_556 : int) (temp___is_init_552 : bool) (temp___skip_constant_553 : bool) (temp___do_toplevel_554 : bool) (temp___do_typ_inv_555 : bool)  =
  (if (( temp___is_init_552 \/ (Ada__text_io__field.first <= Ada__text_io__field.last) )) then (
   (Ada__text_io__field.dynamic_property Ada__text_io__field.first Ada__text_io__field.last temp___expr_556)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_557 : int) (temp___skip_top_level_558 : bool)  =
  true

end

(* Module giving axioms for type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__number_base___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__number_base

 predicate dynamic_invariant "inline" 
   (temp___expr_563 : int) (temp___is_init_559 : bool) (temp___skip_constant_560 : bool) (temp___do_toplevel_561 : bool) (temp___do_typ_inv_562 : bool)  =
  (if (( temp___is_init_559 \/ (Ada__text_io__number_base.first <= Ada__text_io__number_base.last) )) then (
   (Ada__text_io__number_base.dynamic_property Ada__text_io__number_base.first Ada__text_io__number_base.last temp___expr_563)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_564 : int) (temp___skip_top_level_565 : bool)  =
  true

end

(* Module giving axioms for type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__type_set___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__type_set

 predicate dynamic_invariant "inline" 
   (temp___expr_570 : int) (temp___is_init_566 : bool) (temp___skip_constant_567 : bool) (temp___do_toplevel_568 : bool) (temp___do_typ_inv_569 : bool)  =
  (if (( temp___is_init_566 \/ (Ada__text_io__type_set.first <= Ada__text_io__type_set.last) )) then (
   (Ada__text_io__type_set.dynamic_property Ada__text_io__type_set.first Ada__text_io__type_set.last temp___expr_570)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_571 : int) (temp___skip_top_level_572 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at submarine_controls.adb:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine_controls__decreaseoxygen__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at submarine_controls.adb:55, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_597
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_597 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_597__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_597 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 1)) = 87) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 2)) = 65) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 3)) = 82) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 4)) = 78) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 5)) = 73) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 6)) = 78) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 7)) = 71) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 8)) = 33) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 9)) = 32) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 10)) = 79) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 11)) = 120) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 12)) = 121) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 13)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 14)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 15)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 16)) = 32) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 17)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 18)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 19)) = 118) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 20)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 21)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 22)) = 32) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 23)) = 105) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 24)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 25)) = 32) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 26)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 27)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 28)) = 119) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) 29)) = 33) ))

end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___157   temp___158   temp___159   temp___160   temp___161   temp___162   temp___163   temp___164   temp___165   temp___166   temp___167   temp___168   temp___169   temp___170   temp___171   temp___172   : int.
   (let temp___156 = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172) in (
    (if (( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (Standard__integer___axiom.dynamic_invariant temp___157 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___158 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___159 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___160 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___161 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___162 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___163 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___164 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___165 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___166 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___167 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___168 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___169 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___170 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___171 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___172 True True True True) )) then (
     (forall temp___173   : int.
      (if (( (31 <= temp___173) /\ (temp___173 <= 31) )) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 15 : Standard__integer.integer ))) else if (( (21 <= temp___173) /\ (temp___173 <= 30) )) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 6 : Standard__integer.integer )))  else if ((temp___173 = 20)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 5 : Standard__integer.integer )))  else if ((temp___173 = 19)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 4 : Standard__integer.integer )))  else if ((temp___173 = 18)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 3 : Standard__integer.integer )))  else if ((temp___173 = 17)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 2 : Standard__integer.integer )))  else if ((temp___173 = 16)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 1 : Standard__integer.integer )))  else if ((temp___173 = 15)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( 0 : Standard__integer.integer )))  else if ((temp___173 = 14)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -1 : Standard__integer.integer )))  else if ((temp___173 = 13)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -2 : Standard__integer.integer )))  else if ((temp___173 = 12)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -3 : Standard__integer.integer )))  else if ((temp___173 = 11)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -4 : Standard__integer.integer )))  else if ((temp___173 = 10)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -5 : Standard__integer.integer )))  else if ((temp___173 = 9)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -6 : Standard__integer.integer )))  else if ((temp___173 = 8)) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -7 : Standard__integer.integer )))  else if (( (0 <= temp___173) /\ (temp___173 <= 7) )) then (
       ((Array__Int__Standard__integer.get temp___156 temp___173) = ( -15 : Standard__integer.integer ))) else (
       true)))) else true)))
  )

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for defining the value of constant "unspecified_size" defined at s-parame.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__unspecified_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__unspecified_size

 axiom unspecified_size__def_axiom :
  ((System__parameters__unspecified_size.unspecified_size ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "default_env_stack_size" defined at s-parame.ads:85, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_env_stack_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_env_stack_size

 axiom default_env_stack_size__def_axiom :
  ((System__parameters__default_env_stack_size.default_env_stack_size ) = 8192000)

end

(* Module for defining the value of constant "stack_grows_down" defined at s-parame.ads:90, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__stack_grows_down___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__stack_grows_down

 axiom stack_grows_down__def_axiom :
  ((System__parameters__stack_grows_down.stack_grows_down ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "runtime_default_sec_stack_size" defined at s-parame.ads:95, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__runtime_default_sec_stack_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__runtime_default_sec_stack_size

 axiom runtime_default_sec_stack_size__def_axiom :
  ((System__parameters__runtime_default_sec_stack_size.runtime_default_sec_stack_size ) = 10240)

end

(* Module for defining the value of constant "sec_stack_dynamic" defined at s-parame.ads:99, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_dynamic___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__sec_stack_dynamic

 axiom sec_stack_dynamic__def_axiom :
  ((System__parameters__sec_stack_dynamic.sec_stack_dynamic ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "c_malloc_linkname" defined at s-parame.ads:116, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__c_malloc_linkname___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__parameters__c_malloc_linkname
 use        Temp___String_Literal_174
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom c_malloc_linkname__def_axiom :
  ((System__parameters__c_malloc_linkname.c_malloc_linkname ) = (Standard__string.of_array (Temp___String_Literal_174.temp___String_Literal_174 ()) 1 13))

end

(* Module for defining the value of constant "garbage_collected" defined at s-parame.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__garbage_collected___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__garbage_collected

 axiom garbage_collected__def_axiom :
  ((System__parameters__garbage_collected.garbage_collected ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "single_lock" defined at s-parame.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__single_lock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__single_lock

 axiom single_lock__def_axiom :
  ((System__parameters__single_lock.single_lock ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "no_abort" defined at s-parame.ads:167, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__no_abort___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__no_abort

 axiom no_abort__def_axiom :
  ((System__parameters__no_abort.no_abort ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__eof___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iofbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iolbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__ionbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__l_tmpnam___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_cur___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_end___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_set___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__max_path_len___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "null_stream" defined at i-cstrea.ads:313, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__null_stream___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__null_stream

 axiom null_stream__def_axiom :
  ((Interfaces__c_streams__null_stream.null_stream ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_hex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_hex

 axiom wcem_hex__def_axiom :
  ((System__wch_con__wcem_hex.wcem_hex ) = 1)

end

(* Module for defining the value of constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_upper___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_upper

 axiom wcem_upper__def_axiom :
  ((System__wch_con__wcem_upper.wcem_upper ) = 2)

end

(* Module for defining the value of constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_shift_jis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_shift_jis

 axiom wcem_shift_jis__def_axiom :
  ((System__wch_con__wcem_shift_jis.wcem_shift_jis ) = 3)

end

(* Module for defining the value of constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_euc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_euc

 axiom wcem_euc__def_axiom :
  ((System__wch_con__wcem_euc.wcem_euc ) = 4)

end

(* Module for defining the value of constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_utf8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_utf8

 axiom wcem_utf8__def_axiom :
  ((System__wch_con__wcem_utf8.wcem_utf8 ) = 5)

end

(* Module for defining the value of constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_brackets___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_brackets

 axiom wcem_brackets__def_axiom :
  ((System__wch_con__wcem_brackets.wcem_brackets ) = 6)

end

(* Module for defining the value of the aggregate at s-wchcon.ads:170, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_encoding_letters__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        System__wch_con__wc_encoding_letters__aggregate_def
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___176   temp___177   temp___178   temp___179   temp___180   temp___181   : int.
   (let temp___175 = (System__wch_con__wc_encoding_letters__aggregate_def.system__wch_con__wc_encoding_letters__aggregate_def temp___176 temp___177 temp___178 temp___179 temp___180 temp___181) in (
    (if (( ( ( ( ( (Standard__character___axiom.dynamic_invariant temp___176 True True True True) /\ (Standard__character___axiom.dynamic_invariant temp___177 True True True True) ) /\ (Standard__character___axiom.dynamic_invariant temp___178 True True True True) ) /\ (Standard__character___axiom.dynamic_invariant temp___179 True True True True) ) /\ (Standard__character___axiom.dynamic_invariant temp___180 True True True True) ) /\ (Standard__character___axiom.dynamic_invariant temp___181 True True True True) )) then (
     ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 1)) = temp___176) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 2)) = temp___177) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 3)) = temp___178) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 4)) = temp___179) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 5)) = temp___180) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___175 6)) = temp___181) )) else true)))
  )

end

(* Module for defining the value of constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_encoding_letters___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_letters
 use        Array__Int__Standard__character
 use        System__wch_con__wc_encoding_letters__aggregate_def
 use        Array__Int__Standard__character

 axiom wc_encoding_letters__def_axiom :
  ((System__wch_con__wc_encoding_letters.wc_encoding_letters ) = (System__wch_con__wc_encoding_letters__aggregate_def.system__wch_con__wc_encoding_letters__aggregate_def 104 117 115 101 56 98))

end

(* Module for defining the value of the aggregate at s-wchcon.ads:194, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_longest_sequences__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural___axiom
 use        Array__Int__Standard__natural
 use        System__wch_con__wc_longest_sequences__aggregate_def
 use        Array__Int__Standard__natural

 axiom def_axiom :
  (forall temp___185   temp___186   temp___187   temp___188   temp___189   temp___190   : int.
   (let temp___184 = (System__wch_con__wc_longest_sequences__aggregate_def.system__wch_con__wc_longest_sequences__aggregate_def temp___185 temp___186 temp___187 temp___188 temp___189 temp___190) in (
    (if (( ( ( ( ( (Standard__natural___axiom.dynamic_invariant temp___185 True True True True) /\ (Standard__natural___axiom.dynamic_invariant temp___186 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___187 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___188 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___189 True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant temp___190 True True True True) )) then (
     ( ( ( ( ( ((Array__Int__Standard__natural.get temp___184 1) = ( 5 : Standard__natural.natural )) /\ ((Array__Int__Standard__natural.get temp___184 2) = ( 2 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___184 3) = ( 2 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___184 4) = ( 2 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___184 5) = ( 6 : Standard__natural.natural )) ) /\ ((Array__Int__Standard__natural.get temp___184 6) = ( 12 : Standard__natural.natural )) )) else true)))
  )

end

(* Module for defining the value of constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_longest_sequences___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_longest_sequences
 use        Array__Int__Standard__natural
 use        System__wch_con__wc_longest_sequences__aggregate_def
 use        Array__Int__Standard__natural

 axiom wc_longest_sequences__def_axiom :
  ((System__wch_con__wc_longest_sequences.wc_longest_sequences ) = (System__wch_con__wc_longest_sequences__aggregate_def.system__wch_con__wc_longest_sequences__aggregate_def 5 2 2 2 6 12))

end

(* Module for defining the value of constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__text_io__unbounded___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__unbounded

 axiom unbounded__def_axiom :
  ((Ada__text_io__unbounded.unbounded ) = 0)

end

(* Module for defining the value of constant "maximumoxygen" defined at submarine_controls.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine_controls__maximumoxygen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine_controls__maximumoxygen

 axiom maximumoxygen__def_axiom :
  ((Submarine_controls__maximumoxygen.maximumoxygen ) = 10000)

end

(* Module for defining the value of constant "maximumdepth" defined at submarine_controls.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine_controls__maximumdepth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine_controls__maximumdepth

 axiom maximumdepth__def_axiom :
  ((Submarine_controls__maximumdepth.maximumdepth ) = 5000)

end

(* Module for defining the value of constant "maximumtorpedoes" defined at submarine_controls.ads:21, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine_controls__maximumtorpedoes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine_controls__maximumtorpedoes

 axiom maximumtorpedoes__def_axiom :
  ((Submarine_controls__maximumtorpedoes.maximumtorpedoes ) = 20)

end

(* Module for defining the value of constant "maximumloadedtorpedoes" defined at submarine_controls.ads:24, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine_controls__maximumloadedtorpedoes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine_controls__maximumloadedtorpedoes

 axiom maximumloadedtorpedoes__def_axiom :
  ((Submarine_controls__maximumloadedtorpedoes.maximumloadedtorpedoes ) = 6)

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__read___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type___axiom
 use        Ada__streams__Tstream_element_offsetB
 use        Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_offset___axiom
 use        Ada__streams__stream_element_array
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element

 val read 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True True) /\ (if (True) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__Tstream_element_offsetB__rep.to_rep item__first) (Ada__streams__Tstream_element_offsetB__rep.to_rep item__last)))) ) /\ (Ada__streams__stream_element_offset___axiom.dynamic_invariant last.int__content True True True True) ) }
  writes {stream__split_fields, item, last}
 
 namespace Dispatch
  predicate read__specific_post 
    (attr__tag : int) (ada__streams__read__stream__fields : Ada__streams__root_stream_type.__split_fields) (stream__attr__tag : int) (ada__streams__read__item : Array__Int__Ada__streams__stream_element.map) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (ada__streams__read__last : int) (ada__streams__read__stream__old__fields : Ada__streams__root_stream_type.__split_fields) (ada__streams__read__item__old : Array__Int__Ada__streams__stream_element.map) (ada__streams__read__last__old : int) 
  
  val read 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (last : int__ref) : unit
   requires {  true }
   ensures {  ( ( true /\ ( ( (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True True) /\ (if (True) then (
    true) else (
    (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__Tstream_element_offsetB__rep.to_rep item__first) (Ada__streams__Tstream_element_offsetB__rep.to_rep item__last)))) ) /\ (Ada__streams__stream_element_offset___axiom.dynamic_invariant last.int__content True True True True) ) ) /\ (read__specific_post stream__attr__tag stream__split_fields.Ada__streams__root_stream_type.__split_fields__content stream__attr__tag item.Array__Int__Ada__streams__stream_element.map__content item__first item__last last.int__content (old stream__split_fields.Ada__streams__root_stream_type.__split_fields__content ) (old item.Array__Int__Ada__streams__stream_element.map__content ) (old last.int__content )) ) }
   writes {stream__split_fields, item, last}

 end
 
 axiom ada__streams__root_stream_type__compat_axiom :
  (forall ada__streams__read__stream__fields   ada__streams__read__stream__old__fields   : Ada__streams__root_stream_type.__split_fields.
  (forall stream__attr__tag   ada__streams__read__last   ada__streams__read__last__old   : int.
  (forall ada__streams__read__item   ada__streams__read__item__old   : Array__Int__Ada__streams__stream_element.map.
  (forall item__first   item__last   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB [(Dispatch.read__specific_post Ada__streams__root_stream_type.__tag ada__streams__read__stream__fields stream__attr__tag ada__streams__read__item item__first item__last ada__streams__read__last ada__streams__read__stream__old__fields ada__streams__read__item__old ada__streams__read__last__old)].
   ( (Dispatch.read__specific_post Ada__streams__root_stream_type.__tag ada__streams__read__stream__fields stream__attr__tag ada__streams__read__item item__first item__last ada__streams__read__last ada__streams__read__stream__old__fields ada__streams__read__item__old ada__streams__read__last__old) -> (let temp___stream_228 = { Ada__streams__root_stream_type.__split_fields = ada__streams__read__stream__old__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
   (let temp___stream_228 = { Ada__streams__root_stream_type.__split_fields = ada__streams__read__stream__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
    true))
   ))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__write___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type___axiom
 use        Ada__streams__stream_element_array

 val write 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
  requires {  true }
  ensures {  (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True True) }
  writes {stream__split_fields}
 
 namespace Dispatch
  predicate write__specific_post 
    (attr__tag : int) (ada__streams__write__stream__fields : Ada__streams__root_stream_type.__split_fields) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) (ada__streams__write__stream__old__fields : Ada__streams__root_stream_type.__split_fields) 
  
  val write 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
   requires {  true }
   ensures {  ( ( true /\ (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True True) ) /\ (write__specific_post stream__attr__tag stream__split_fields.Ada__streams__root_stream_type.__split_fields__content stream__attr__tag item (old stream__split_fields.Ada__streams__root_stream_type.__split_fields__content )) ) }
   writes {stream__split_fields}

 end
 
 axiom ada__streams__root_stream_type__compat_axiom :
  (forall ada__streams__write__stream__fields   ada__streams__write__stream__old__fields   : Ada__streams__root_stream_type.__split_fields.
  (forall stream__attr__tag   : int.
  (forall item   : Ada__streams__stream_element_array.stream_element_array [(Dispatch.write__specific_post Ada__streams__root_stream_type.__tag ada__streams__write__stream__fields stream__attr__tag item ada__streams__write__stream__old__fields)].
   ( (Dispatch.write__specific_post Ada__streams__root_stream_type.__tag ada__streams__write__stream__fields stream__attr__tag item ada__streams__write__stream__old__fields) -> (let temp___stream_230 = { Ada__streams__root_stream_type.__split_fields = ada__streams__write__stream__old__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
   (let temp___stream_230 = { Ada__streams__root_stream_type.__split_fields = ada__streams__write__stream__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
    true))
   ))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Olt
 use        System__address___axiom

 val olt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Olt.olt left right)) /\ true ) /\ true ) }
 
 axiom olt__post_axiom :
  (forall left   right   : BV64.t [(System__Olt.olt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Olt.olt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ole
 use        System__address___axiom

 val ole 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ole.ole left right)) /\ true ) /\ true ) }
 
 axiom ole__post_axiom :
  (forall left   right   : BV64.t [(System__Ole.ole left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ole.ole left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ogt
 use        System__address___axiom

 val ogt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ogt.ogt left right)) /\ true ) /\ true ) }
 
 axiom ogt__post_axiom :
  (forall left   right   : BV64.t [(System__Ogt.ogt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ogt.ogt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oge
 use        System__address___axiom

 val oge 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oge.oge left right)) /\ true ) /\ true ) }
 
 axiom oge__post_axiom :
  (forall left   right   : BV64.t [(System__Oge.oge left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oge.oge left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oeq
 use        System__address___axiom

 val oeq 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oeq.oeq left right)) /\ true ) /\ true ) }
 
 axiom oeq__post_axiom :
  (forall left   right   : BV64.t [(System__Oeq.oeq left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oeq.oeq left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "default_stack_size" defined at s-parame.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__default_stack_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__default_stack_size
 use        System__parameters__size_type___axiom

 val default_stack_size 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (System__parameters__default_stack_size.default_stack_size ())) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom default_stack_size__post_axiom :
  (forall __void_param   : unit [(System__parameters__default_stack_size.default_stack_size __void_param)].
   ( true -> (let result = (System__parameters__default_stack_size.default_stack_size __void_param) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "minimum_stack_size" defined at s-parame.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__minimum_stack_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__minimum_stack_size
 use        System__parameters__size_type___axiom

 val minimum_stack_size 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (System__parameters__minimum_stack_size.minimum_stack_size ())) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom minimum_stack_size__post_axiom :
  (forall __void_param   : unit [(System__parameters__minimum_stack_size.minimum_stack_size __void_param)].
   ( true -> (let result = (System__parameters__minimum_stack_size.minimum_stack_size __void_param) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "adjust_storage_size" defined at s-parame.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__adjust_storage_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__adjust_storage_size
 use        System__parameters__size_type___axiom

 val adjust_storage_size 
   (size : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__parameters__adjust_storage_size.adjust_storage_size size)) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom adjust_storage_size__post_axiom :
  (forall size   : int [(System__parameters__adjust_storage_size.adjust_storage_size size)].
   ( (System__parameters__size_type___axiom.dynamic_invariant size True True True True) -> (let result = (System__parameters__adjust_storage_size.adjust_storage_size size) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strlen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__strlen
 use        System__address___axiom
 use        System__crtl__size_t___axiom

 val strlen 
   (a : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__strlen.strlen a)) /\ true ) /\ (System__crtl__size_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom strlen__post_axiom :
  (forall a   : BV64.t [(System__crtl__strlen.strlen a)].
   ( (System__address___axiom.dynamic_invariant a True True True True) -> (let result = (System__crtl__strlen.strlen a) in (
    ( ( true /\ (System__crtl__size_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strncpy___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val strncpy 
   (dest : BV64.t) (src : BV64.t) (n : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__atoi___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__integer___axiom
 use        System__crtl__atoi
 use        System__address___axiom

 val atoi 
   (a : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__atoi.atoi a)) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom atoi__post_axiom :
  (forall a   : BV64.t [(System__crtl__atoi.atoi a)].
   ( (System__address___axiom.dynamic_invariant a True True True True) -> (let result = (System__crtl__atoi.atoi a) in (
    ( ( true /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__clearerr___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val clearerr 
   (stream : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__dup
 use        System__crtl__int___axiom

 val dup 
   (handle : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__dup.dup handle)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom dup__post_axiom :
  (forall handle   : int [(System__crtl__dup.dup handle)].
   ( (System__crtl__int___axiom.dynamic_invariant handle True True True True) -> (let result = (System__crtl__dup.dup handle) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup2___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__dup2
 use        System__crtl__int___axiom

 val dup2 
   (from : int) (to__ : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__dup2.dup2 from to__)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom dup2__post_axiom :
  (forall from   to__   : int [(System__crtl__dup2.dup2 from to__)].
   ( ( (System__crtl__int___axiom.dynamic_invariant from True True True True) /\ (System__crtl__int___axiom.dynamic_invariant to__ True True True True) ) -> (let result = (System__crtl__dup2.dup2 from to__) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fclose___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fclose
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fclose 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fclose.fclose stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fclose__post_axiom :
  (forall stream   : BV64.t [(System__crtl__fclose.fclose stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fclose.fclose stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fdopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fdopen
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fdopen 
   (handle : int) (mode : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fdopen.fdopen handle mode)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fdopen__post_axiom :
  (forall handle   : int.
  (forall mode   : BV64.t [(System__crtl__fdopen.fdopen handle mode)].
   ( ( (System__crtl__int___axiom.dynamic_invariant handle True True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) -> (let result = (System__crtl__fdopen.fdopen handle mode) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fflush___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fflush
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fflush 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fflush.fflush stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fflush__post_axiom :
  (forall stream   : BV64.t [(System__crtl__fflush.fflush stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fflush.fflush stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgetc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fgetc
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fgetc 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fgetc.fgetc stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fgetc__post_axiom :
  (forall stream   : BV64.t [(System__crtl__fgetc.fgetc stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fgetc.fgetc stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgets___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fgets
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fgets 
   (strng : BV64.t) (n : int) (stream : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fgets.fgets strng n stream)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
   (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true) ) }
 
 axiom fgets__post_axiom :
  (forall strng   stream   : BV64.t.
  (forall n   : int [(System__crtl__fgets.fgets strng n stream)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (System__crtl__int___axiom.dynamic_invariant n True True True True) ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fgets.fgets strng n stream) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
     (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fopen
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding___axiom

 val fopen 
   (filename : BV64.t) (mode : BV64.t) (encoding : int) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fopen.fopen filename mode encoding)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fopen__post_axiom :
  (forall filename   mode   : BV64.t.
  (forall encoding   : int [(System__crtl__fopen.fopen filename mode encoding)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True True) ) -> (let result = (System__crtl__fopen.fopen filename mode encoding) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fputc
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fputc 
   (c : int) (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fputc.fputc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fputc__post_axiom :
  (forall c   : int.
  (forall stream   : BV64.t [(System__crtl__fputc.fputc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputc.fputc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputwc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fputwc
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fputwc 
   (c : int) (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fputwc.fputwc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fputwc__post_axiom :
  (forall c   : int.
  (forall stream   : BV64.t [(System__crtl__fputwc.fputwc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputwc.fputwc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputs___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fputs
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom

 val fputs 
   (strng : BV64.t) (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fputs.fputs strng stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fputs__post_axiom :
  (forall strng   stream   : BV64.t [(System__crtl__fputs.fputs strng stream)].
   ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputs.fputs strng stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__free___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val free 
   (ptr : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__freopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__freopen
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding___axiom

 val freopen 
   (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__freopen.freopen filename mode stream encoding)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom freopen__post_axiom :
  (forall filename   mode   stream   : BV64.t.
  (forall encoding   : int [(System__crtl__freopen.freopen filename mode stream encoding)].
   ( ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True True) ) -> (let result = (System__crtl__freopen.freopen filename mode stream encoding) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fseek
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__long___axiom

 val fseek 
   (stream : BV64.t) (offset : int) (origin : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fseek.fseek stream offset origin)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fseek__post_axiom :
  (forall stream   : BV64.t.
  (forall offset   origin   : int [(System__crtl__fseek.fseek stream offset origin)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__long___axiom.dynamic_invariant offset True True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant origin True True True True) ) -> (let result = (System__crtl__fseek.fseek stream offset origin) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__fseek64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__int64___axiom

 val fseek64 
   (stream : BV64.t) (offset : int) (origin : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__fseek64.fseek64 stream offset origin)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fseek64__post_axiom :
  (forall stream   : BV64.t.
  (forall offset   origin   : int [(System__crtl__fseek64.fseek64 stream offset origin)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__int64___axiom.dynamic_invariant offset True True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant origin True True True True) ) -> (let result = (System__crtl__fseek64.fseek64 stream offset origin) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__ftell
 use        System__crtl__files
 use        System__crtl__long___axiom

 val ftell 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__ftell.ftell stream)) /\ true ) /\ (System__crtl__long___axiom.dynamic_invariant result True False True True) ) }
 
 axiom ftell__post_axiom :
  (forall stream   : BV64.t [(System__crtl__ftell.ftell stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell.ftell stream) in (
    ( ( true /\ (System__crtl__long___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__ftell64
 use        System__crtl__files
 use        System__crtl__int64___axiom

 val ftell64 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__ftell64.ftell64 stream)) /\ true ) /\ (System__crtl__int64___axiom.dynamic_invariant result True False True True) ) }
 
 axiom ftell64__post_axiom :
  (forall stream   : BV64.t [(System__crtl__ftell64.ftell64 stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell64.ftell64 stream) in (
    ( ( true /\ (System__crtl__int64___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__getenv___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__getenv
 use        System__address___axiom

 val getenv 
   (s : Standard__string.string) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__getenv.getenv s)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom getenv__post_axiom :
  (forall s   : Standard__string.string [(System__crtl__getenv.getenv s)].
   ( (Standard__string___axiom.dynamic_invariant s True True True True) -> (let result = (System__crtl__getenv.getenv s) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__isatty___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__isatty
 use        System__crtl__int___axiom

 val isatty 
   (handle : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__isatty.isatty handle)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom isatty__post_axiom :
  (forall handle   : int [(System__crtl__isatty.isatty handle)].
   ( (System__crtl__int___axiom.dynamic_invariant handle True True True True) -> (let result = (System__crtl__isatty.isatty handle) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__lseek___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__lseek
 use        System__crtl__int___axiom
 use        System__crtl__off_t___axiom

 val lseek 
   (fd : int) (offset : int) (direction : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__lseek.lseek fd offset direction)) /\ true ) /\ (System__crtl__off_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom lseek__post_axiom :
  (forall fd   offset   direction   : int [(System__crtl__lseek.lseek fd offset direction)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True True) /\ (System__crtl__off_t___axiom.dynamic_invariant offset True True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant direction True True True True) ) -> (let result = (System__crtl__lseek.lseek fd offset direction) in (
    ( ( true /\ (System__crtl__off_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__malloc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__malloc
 use        System__address___axiom
 use        System__crtl__size_t___axiom

 val malloc 
   (size : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__malloc.malloc size)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom malloc__post_axiom :
  (forall size   : BV64.t [(System__crtl__malloc.malloc size)].
   ( (System__crtl__size_t___axiom.dynamic_invariant size True True True True) -> (let result = (System__crtl__malloc.malloc size) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memcpy___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val memcpy 
   (s1 : BV64.t) (s2 : BV64.t) (n : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memmove___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val memmove 
   (s1 : BV64.t) (s2 : BV64.t) (n : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mktemp___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val mktemp 
   (template : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__pclose___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__pclose
 use        System__address___axiom
 use        System__crtl__int___axiom

 val pclose 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__pclose.pclose stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom pclose__post_axiom :
  (forall stream   : BV64.t [(System__crtl__pclose.pclose stream)].
   ( (System__address___axiom.dynamic_invariant stream True True True True) -> (let result = (System__crtl__pclose.pclose stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__popen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__popen
 use        System__address___axiom

 val popen 
   (command : BV64.t) (mode : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__popen.popen command mode)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom popen__post_axiom :
  (forall command   mode   : BV64.t [(System__crtl__popen.popen command mode)].
   ( ( (System__address___axiom.dynamic_invariant command True True True True) /\ (System__address___axiom.dynamic_invariant mode True True True True) ) -> (let result = (System__crtl__popen.popen command mode) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__realloc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__realloc
 use        System__address___axiom
 use        System__crtl__size_t___axiom

 val realloc 
   (ptr : BV64.t) (size : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__realloc.realloc ptr size)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True True) ) }
 
 axiom realloc__post_axiom :
  (forall ptr   size   : BV64.t [(System__crtl__realloc.realloc ptr size)].
   ( ( (System__address___axiom.dynamic_invariant ptr True True True True) /\ (System__crtl__size_t___axiom.dynamic_invariant size True True True True) ) -> (let result = (System__crtl__realloc.realloc ptr size) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rewind___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val rewind 
   (stream : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rmdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__rmdir
 use        System__crtl__int___axiom

 val rmdir 
   (dir_name : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__rmdir.rmdir dir_name)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom rmdir__post_axiom :
  (forall dir_name   : Standard__string.string [(System__crtl__rmdir.rmdir dir_name)].
   ( (Standard__string___axiom.dynamic_invariant dir_name True True True True) -> (let result = (System__crtl__rmdir.rmdir dir_name) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__chdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__chdir
 use        System__crtl__int___axiom

 val chdir 
   (dir_name : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__chdir.chdir dir_name)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom chdir__post_axiom :
  (forall dir_name   : Standard__string.string [(System__crtl__chdir.chdir dir_name)].
   ( (Standard__string___axiom.dynamic_invariant dir_name True True True True) -> (let result = (System__crtl__chdir.chdir dir_name) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mkdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__mkdir
 use        System__crtl__int___axiom
 use        System__crtl__filename_encoding___axiom

 val mkdir 
   (dir_name : Standard__string.string) (encoding : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__mkdir.mkdir dir_name encoding)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mkdir__post_axiom :
  (forall dir_name   : Standard__string.string.
  (forall encoding   : int [(System__crtl__mkdir.mkdir dir_name encoding)].
   ( ( (Standard__string___axiom.dynamic_invariant dir_name True True True True) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True True) ) -> (let result = (System__crtl__mkdir.mkdir dir_name encoding) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__setvbuf___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__setvbuf
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom

 val setvbuf 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__setvbuf.setvbuf stream buffer mode size)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream   buffer   size   : BV64.t.
  (forall mode   : int [(System__crtl__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__int___axiom.dynamic_invariant mode True True True True) ) /\ (System__crtl__size_t___axiom.dynamic_invariant size True True True True) ) -> (let result = (System__crtl__setvbuf.setvbuf stream buffer mode size) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpnam___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val tmpnam 
   (str : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpfile___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__tmpfile
 use        System__crtl__files

 val tmpfile 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__crtl__tmpfile.tmpfile ())) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom tmpfile__post_axiom :
  (forall __void_param   : unit [(System__crtl__tmpfile.tmpfile __void_param)].
   ( true -> (let result = (System__crtl__tmpfile.tmpfile __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ungetc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__ungetc
 use        System__crtl__files
 use        System__crtl__int___axiom

 val ungetc 
   (c : int) (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__ungetc.ungetc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom ungetc__post_axiom :
  (forall c   : int.
  (forall stream   : BV64.t [(System__crtl__ungetc.ungetc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__ungetc.ungetc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__unlink___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__unlink
 use        System__crtl__chars
 use        System__crtl__int___axiom

 val unlink 
   (filename : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__unlink.unlink filename)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom unlink__post_axiom :
  (forall filename   : BV64.t [(System__crtl__unlink.unlink filename)].
   ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) -> (let result = (System__crtl__unlink.unlink filename) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__open___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__open
 use        System__crtl__chars
 use        System__crtl__int___axiom

 val open 
   (filename : BV64.t) (oflag : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__open.open filename oflag)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom open__post_axiom :
  (forall filename   : BV64.t.
  (forall oflag   : int [(System__crtl__open.open filename oflag)].
   ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (System__crtl__int___axiom.dynamic_invariant oflag True True True True) ) -> (let result = (System__crtl__open.open filename oflag) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__close___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__close
 use        System__crtl__int___axiom

 val close 
   (fd : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__close.close fd)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom close__post_axiom :
  (forall fd   : int [(System__crtl__close.close fd)].
   ( (System__crtl__int___axiom.dynamic_invariant fd True True True True) -> (let result = (System__crtl__close.close fd) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__read___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__read
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__ssize_t___axiom

 val read 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__read.read fd buffer count)) /\ true ) /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom read__post_axiom :
  (forall fd   : int.
  (forall buffer   count   : BV64.t [(System__crtl__read.read fd buffer count)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t___axiom.dynamic_invariant count True True True True) ) -> (let result = (System__crtl__read.read fd buffer count) in (
    ( ( true /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__write___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__write
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__ssize_t___axiom

 val write 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (System__crtl__write.write fd buffer count)) /\ true ) /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom write__post_axiom :
  (forall fd   : int.
  (forall buffer   count   : BV64.t [(System__crtl__write.write fd buffer count)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t___axiom.dynamic_invariant count True True True True) ) -> (let result = (System__crtl__write.write fd buffer count) in (
    ( ( true /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdin___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__stdin
 use        Interfaces__c_streams__files

 val stdin 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__stdin.stdin ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdin__post_axiom :
  (forall __void_param   : unit [(Interfaces__c_streams__stdin.stdin __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdin.stdin __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdout___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__stdout
 use        Interfaces__c_streams__files

 val stdout 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__stdout.stdout ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdout__post_axiom :
  (forall __void_param   : unit [(Interfaces__c_streams__stdout.stdout __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdout.stdout __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stderr___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__stderr
 use        Interfaces__c_streams__files

 val stderr 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__stderr.stderr ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stderr__post_axiom :
  (forall __void_param   : unit [(Interfaces__c_streams__stderr.stderr __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stderr.stderr __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__feof___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__feof
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom

 val feof 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__feof.feof stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom feof__post_axiom :
  (forall stream   : BV64.t [(Interfaces__c_streams__feof.feof stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__feof.feof stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__ferror___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__ferror
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom

 val ferror 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__ferror.ferror stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom ferror__post_axiom :
  (forall stream   : BV64.t [(Interfaces__c_streams__ferror.ferror stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__ferror.ferror stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fileno___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__fileno
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom

 val fileno 
   (stream : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__fileno.fileno stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fileno__post_axiom :
  (forall stream   : BV64.t [(Interfaces__c_streams__fileno.fileno stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__fileno.fileno stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__fread
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids

 val fread 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__fread.fread buffer size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fread__post_axiom :
  (forall buffer   size   count   stream   : BV64.t [(Interfaces__c_streams__fread.fread buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread.fread buffer size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__fread__2
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids

 val fread__2 
   (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fread__2__post_axiom :
  (forall buffer   index   size   count   stream   : BV64.t [(Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)].
   ( ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant index True True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fwrite___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__fwrite
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids

 val fwrite 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) }
 
 axiom fwrite__post_axiom :
  (forall buffer   size   count   stream   : BV64.t [(Interfaces__c_streams__fwrite.fwrite buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__setvbuf___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__setvbuf
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__size_t___axiom

 val setvbuf 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream   buffer   size   : BV64.t.
  (forall mode   : int [(Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last buffer)) else true) ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant mode True True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True True) ) -> (let result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__file_exists___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__file_exists
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__int___axiom

 val file_exists 
   (name : BV64.t) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__file_exists.file_exists name)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom file_exists__post_axiom :
  (forall name   : BV64.t [(Interfaces__c_streams__file_exists.file_exists name)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last name)) else true) -> (let result = (Interfaces__c_streams__file_exists.file_exists name) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__is_regular_file___axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__c_streams__is_regular_file
 use        Interfaces__c_streams__int___axiom

 val is_regular_file 
   (handle : int) : int
  requires {  true }
  ensures {  ( ( (result = (Interfaces__c_streams__is_regular_file.is_regular_file handle)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom is_regular_file__post_axiom :
  (forall handle   : int [(Interfaces__c_streams__is_regular_file.is_regular_file handle)].
   ( (Interfaces__c_streams__int___axiom.dynamic_invariant handle True True True True) -> (let result = (Interfaces__c_streams__is_regular_file.is_regular_file handle) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_binary_mode___axiom
 use import "_gnatprove_standard".Main

 val set_binary_mode 
   (handle : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_text_mode___axiom
 use import "_gnatprove_standard".Main

 val set_text_mode 
   (handle : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_mode___axiom
 use import "_gnatprove_standard".Main

 val set_mode 
   (handle : int) (mode : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__full_name___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val full_name 
   (nam : BV64.t) (buffer : BV64.t) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        System__wch_con__get_wc_encoding_method
 use        System__wch_con__wc_encoding_method___axiom

 val get_wc_encoding_method 
   (c : int) : int
  requires {  true }
  ensures {  ( ( (result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)) /\ true ) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_wc_encoding_method__post_axiom :
  (forall c   : int [(System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)].
   ( (Standard__character___axiom.dynamic_invariant c True True True True) -> (let result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c) in (
    ( ( true /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__wch_con__get_wc_encoding_method__2
 use        System__wch_con__wc_encoding_method___axiom

 val get_wc_encoding_method__2 
   (s : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)) /\ true ) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_wc_encoding_method__2__post_axiom :
  (forall s   : Standard__string.string [(System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)].
   ( (Standard__string___axiom.dynamic_invariant s True True True True) -> (let result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s) in (
    ( ( true /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__is_start_of_encoding___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        System__wch_con__is_start_of_encoding
 use        System__wch_con__wc_encoding_method___axiom

 val is_start_of_encoding 
   (c : int) (em : int) : bool
  requires {  true }
  ensures {  ( ( (result = (System__wch_con__is_start_of_encoding.is_start_of_encoding c em)) /\ true ) /\ true ) }
 
 axiom is_start_of_encoding__post_axiom :
  (forall c   em   : int [(System__wch_con__is_start_of_encoding.is_start_of_encoding c em)].
   ( ( (Standard__character___axiom.dynamic_invariant c True True True True) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant em True True True True) ) -> (let result = (System__wch_con__is_start_of_encoding.is_start_of_encoding c em) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__create___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val create 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__open___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val open 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__close___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val close 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__delete___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val delete 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val reset 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val reset__2 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires {  true }
  ensures {  (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__mode___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__mode
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__file_mode___axiom

 val mode 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__mode.mode file)) /\ true ) /\ (Ada__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mode__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__mode.mode file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__mode.mode file) in (
    ( ( true /\ (Ada__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__name___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__name
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val name 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__name.name file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom name__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__name.name file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__name.name file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__form___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__form
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val form 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__form.form file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom form__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__form.form file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__form.form file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__is_open___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__is_open
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val is_open 
   (file : Ada__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__is_open.is_open file)) /\ true ) /\ true ) }
 
 axiom is_open__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__is_open.is_open file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__is_open.is_open file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_input 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_output 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_error 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__standard_input
 use        Ada__text_io__file_type___axiom

 val standard_input 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__standard_input.standard_input ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom standard_input__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__standard_input.standard_input __void_param)].
   ( true -> (let result = (Ada__text_io__standard_input.standard_input __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__standard_output
 use        Ada__text_io__file_type___axiom

 val standard_output 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__standard_output.standard_output ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom standard_output__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__standard_output.standard_output __void_param)].
   ( true -> (let result = (Ada__text_io__standard_output.standard_output __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__standard_error
 use        Ada__text_io__file_type___axiom

 val standard_error 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__standard_error.standard_error ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom standard_error__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__standard_error.standard_error __void_param)].
   ( true -> (let result = (Ada__text_io__standard_error.standard_error __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__current_input
 use        Ada__text_io__file_type___axiom

 val current_input 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__current_input.current_input ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom current_input__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__current_input.current_input __void_param)].
   ( true -> (let result = (Ada__text_io__current_input.current_input __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__current_output
 use        Ada__text_io__file_type___axiom

 val current_output 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__current_output.current_output ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom current_output__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__current_output.current_output __void_param)].
   ( true -> (let result = (Ada__text_io__current_output.current_output __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__current_error
 use        Ada__text_io__file_type___axiom

 val current_error 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__current_error.current_error ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom current_error__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__current_error.current_error __void_param)].
   ( true -> (let result = (Ada__text_io__current_error.current_error __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val flush 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush__2___axiom
 use import "_gnatprove_standard".Main

 val flush__2 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line_length 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length__2___axiom
 use import "_gnatprove_standard".Main

 val set_line_length__2 
   (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_page_length 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length__2___axiom
 use import "_gnatprove_standard".Main

 val set_page_length__2 
   (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__line_length
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__count___axiom

 val line_length 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length.line_length file)) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom line_length__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__line_length.line_length file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__line_length.line_length file) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 ())) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom line_length__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__line_length__2.line_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 __void_param) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__page_length
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__count___axiom

 val page_length 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length.page_length file)) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom page_length__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__page_length.page_length file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__page_length.page_length file) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 ())) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom page_length__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__page_length__2.page_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 __void_param) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_line 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__2___axiom
 use import "_gnatprove_standard".Main

 val new_line__2 
   (spacing : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_line 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line__2___axiom
 use import "_gnatprove_standard".Main

 val skip_line__2 
   (spacing : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_line
 use        Ada__text_io__file_type___axiom

 val end_of_line 
   (file : Ada__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_line.end_of_line file)) /\ true ) /\ true ) }
 
 axiom end_of_line__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_line.end_of_line file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__end_of_line.end_of_line file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_line__2

 val end_of_line__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_line__2.end_of_line__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_line__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__end_of_line__2.end_of_line__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_line__2.end_of_line__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_page 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page__2___axiom
 use import "_gnatprove_standard".Main

 val new_page__2 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_page 
   (file : Ada__text_io__file_type.file_type) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page__2___axiom
 use import "_gnatprove_standard".Main

 val skip_page__2 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_page
 use        Ada__text_io__file_type___axiom

 val end_of_page 
   (file : Ada__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_page.end_of_page file)) /\ true ) /\ true ) }
 
 axiom end_of_page__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_page.end_of_page file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__end_of_page.end_of_page file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_page__2

 val end_of_page__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_page__2.end_of_page__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_page__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__end_of_page__2.end_of_page__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_page__2.end_of_page__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_file
 use        Ada__text_io__file_type___axiom

 val end_of_file 
   (file : Ada__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_file.end_of_file file)) /\ true ) /\ true ) }
 
 axiom end_of_file__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_file.end_of_file file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__end_of_file.end_of_file file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_file__2

 val end_of_file__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__end_of_file__2.end_of_file__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_file__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__end_of_file__2.end_of_file__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_file__2.end_of_file__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_col 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col__2___axiom
 use import "_gnatprove_standard".Main

 val set_col__2 
   (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line__2___axiom
 use import "_gnatprove_standard".Main

 val set_line__2 
   (to__ : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__col
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom

 val col 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__col.col file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom col__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__col.col file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__col.col file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__col__2
 use        Ada__text_io__positive_count___axiom

 val col__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__col__2.col__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom col__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__col__2.col__2 __void_param)].
   ( true -> (let result = (Ada__text_io__col__2.col__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__line
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom

 val line 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line.line file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom line__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__line.line file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__line.line file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__line__2
 use        Ada__text_io__positive_count___axiom

 val line__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line__2.line__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom line__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__line__2.line__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line__2.line__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__page
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom

 val page 
   (file : Ada__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page.page file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom page__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__page.page file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__page.page file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__page__2
 use        Ada__text_io__positive_count___axiom

 val page__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page__2.page__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom page__2__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__page__2.page__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page__2.page__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get__2 
   (item : int__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val put 
   (file : Ada__text_io__file_type.file_type) (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__2___axiom
 use import "_gnatprove_standard".Main

 val put__2 
   (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val look_ahead 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (end_of_line : bool__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val look_ahead__2 
   (item : int__ref) (end_of_line : bool__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get_immediate 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get_immediate__2 
   (item : int__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get_immediate__3 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (available : bool__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get_immediate__4 
   (item : int__ref) (available : bool__ref) : unit
  requires {  true }
  ensures {  (Standard__character___axiom.dynamic_invariant item.int__content True True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get__3 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires {  true }
  ensures {  (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val get__4 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires {  true }
  ensures {  (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put__3 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__integer__rep
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get_line 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__get_line__3
 use        Ada__text_io__file_type___axiom

 val get_line__3 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__get_line__3.get_line__3 file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_line__3__post_axiom :
  (forall file   : Ada__text_io__file_type.file_type [(Ada__text_io__get_line__3.get_line__3 file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True True) -> (let result = (Ada__text_io__get_line__3.get_line__3 file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__get_line__4

 val get_line__4 
   (__void_param : unit) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__get_line__4.get_line__4 ())) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_line__4__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__get_line__4.get_line__4 __void_param)].
   ( true -> (let result = (Ada__text_io__get_line__4.get_line__4 __void_param) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put_line 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__eof_char___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer___axiom
 use        Ada__text_io__eof_char

 val eof_char 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__eof_char.eof_char ())) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant result True False True False) ) }
 
 axiom eof_char__post_axiom :
  (forall __void_param   : unit [(Ada__text_io__eof_char.eof_char __void_param)].
   ( true -> (let result = (Ada__text_io__eof_char.eof_char __void_param) in (
    ( ( true /\ (Standard__integer___axiom.dynamic_invariant result True False True False) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__initialize_standard_files___axiom
 use import "_gnatprove_standard".Main

 val initialize_standard_files 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "closeinnerairlock" defined at submarine_controls.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__closeinnerairlock___axiom
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use import "_gnatprove_standard".Main
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate

 val closeinnerairlock 
   (__void_param : unit) : unit
  requires {  ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) }
  ensures {  ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  reads {Submarine_controls__innerairlockstate.innerairlockstate, Submarine_controls__outerairlockstate.outerairlockstate}
  writes {Submarine_controls__innerairlockstate.innerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "openinnerairlock" defined at submarine_controls.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__openinnerairlock___axiom
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use import "_gnatprove_standard".Main
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked

 val openinnerairlock 
   (__void_param : unit) : unit
  requires {  ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> false ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  reads {Submarine_controls__innerairlockstate.innerairlockstate, Submarine_controls__outerairlockstate.outerairlockstate, Submarine_controls__airlockdoorslocked.airlockdoorslocked}
  writes {Submarine_controls__innerairlockstate.innerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "closeouterairlock" defined at submarine_controls.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__closeouterairlock___axiom
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use import "_gnatprove_standard".Main
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate

 val closeouterairlock 
   (__void_param : unit) : unit
  requires {  ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) }
  ensures {  ( ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  reads {Submarine_controls__innerairlockstate.innerairlockstate, Submarine_controls__outerairlockstate.outerairlockstate}
  writes {Submarine_controls__outerairlockstate.outerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "openouterairlock" defined at submarine_controls.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__openouterairlock___axiom
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use import "_gnatprove_standard".Main
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked

 val openouterairlock 
   (__void_param : unit) : unit
  requires {  ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> false ) ) }
  reads {Submarine_controls__innerairlockstate.innerairlockstate, Submarine_controls__outerairlockstate.outerairlockstate, Submarine_controls__airlockdoorslocked.airlockdoorslocked}
  writes {Submarine_controls__outerairlockstate.outerairlockstate}

end

(* Module for declaring a program function (and possibly an axiom) for "lockairlockdoors" defined at submarine_controls.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__lockairlockdoors___axiom
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use import "_gnatprove_standard".Main
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked

 val lockairlockdoors 
   (__void_param : unit) : unit
  requires {  ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  reads {Submarine_controls__innerairlockstate.innerairlockstate, Submarine_controls__outerairlockstate.outerairlockstate, Submarine_controls__airlockdoorslocked.airlockdoorslocked}
  writes {Submarine_controls__airlockdoorslocked.airlockdoorslocked}

end

(* Module for declaring a program function (and possibly an axiom) for "decreaseoxygen" defined at submarine_controls.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__decreaseoxygen___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel

 val decreaseoxygen 
   (__void_param : unit) : unit
  requires {  ( (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True True True True) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__oxygenlevel.oxygenlevel}
  writes {Submarine_controls__oxygenlevel.oxygenlevel}

end

(* Module for declaring a program function (and possibly an axiom) for "checkoxygenstatus" defined at submarine_controls.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__checkoxygenstatus___axiom
 use        Submarine_controls__currentdepth
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth

 val checkoxygenstatus 
   (__void_param : unit) : unit
  requires {  (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) }
  ensures {  ( (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) /\ ( (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True True True True) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True True True True) ) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth}
  writes {Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "checkreactorstatus" defined at submarine_controls.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__checkreactorstatus___axiom
 use        Submarine_controls__currentdepth
 use        Submarine_controls__isreactoroverheated
 use        Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main
 use        Standard__integer___axiom
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Submarine_controls__isreactoroverheated

 val checkreactorstatus 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True True True True) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True True True True) ) }
  reads {Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth, Submarine_controls__isreactoroverheated.isreactoroverheated}
  writes {Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "increasedepth" defined at submarine_controls.ads:91, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__increasedepth___axiom
 use        Submarine_controls__currentdepth
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth

 val increasedepth 
   (__void_param : unit) : unit
  requires {  ( ( (Submarine_controls__currentdepth.currentdepth.int__content < 5000) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Submarine_controls__currentdepth.currentdepth.int__content <= 5000) ) /\ (Submarine_controls__currentdepth.currentdepth.int__content >= 0) ) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True True True True) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth}
  writes {Submarine_controls__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasedepth" defined at submarine_controls.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__decreasedepth___axiom
 use        Submarine_controls__currentdepth
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth

 val decreasedepth 
   (__void_param : unit) : unit
  requires {  ( ( (Submarine_controls__currentdepth.currentdepth.int__content < 5000) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) /\ (Submarine_controls__currentdepth.currentdepth.int__content <= 5000) ) /\ (Submarine_controls__currentdepth.currentdepth.int__content >= 0) ) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True True True True) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__oxygenlevel.oxygenlevel, Submarine_controls__currentdepth.currentdepth}
  writes {Submarine_controls__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "storetorpedo" defined at submarine_controls.ads:118, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__storetorpedo___axiom
 use        Submarine_controls__storedtorpedoes
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__storedtorpedoes

 val storetorpedo 
   (__void_param : unit) : unit
  requires {  (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content < 20) }
  ensures {  ( ( (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content <= 20) /\ (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = ((old Submarine_controls__storedtorpedoes.storedtorpedoes.int__content ) + 1)) ) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__storedtorpedoes.storedtorpedoes.int__content True True True True) ) }
  reads {Submarine_controls__storedtorpedoes.storedtorpedoes}
  writes {Submarine_controls__storedtorpedoes.storedtorpedoes}

end

(* Module for declaring a program function (and possibly an axiom) for "loadtorpedo" defined at submarine_controls.ads:124, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__loadtorpedo___axiom
 use        Submarine_controls__loadedtorpedoes
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__storedtorpedoes
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__storedtorpedoes
 use        Submarine_controls__loadedtorpedoes

 val loadtorpedo 
   (__void_param : unit) : unit
  requires {  ( ( (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 1) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( ( ( (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 0) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6) ) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = ((old Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content ) + 1)) ) /\ (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = ((old Submarine_controls__storedtorpedoes.storedtorpedoes.int__content ) - 1)) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( (Standard__integer___axiom.dynamic_invariant Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content True True True True) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__storedtorpedoes.storedtorpedoes.int__content True True True True) ) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__storedtorpedoes.storedtorpedoes, Submarine_controls__loadedtorpedoes.loadedtorpedoes}
  writes {Submarine_controls__storedtorpedoes.storedtorpedoes, Submarine_controls__loadedtorpedoes.loadedtorpedoes}

end

(* Module for declaring a program function (and possibly an axiom) for "firetorpedo" defined at submarine_controls.ads:135, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine_controls__firetorpedo___axiom
 use        Submarine_controls__loadedtorpedoes
 use        Submarine_controls__airlockdoorslocked
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__loadedtorpedoes

 val firetorpedo 
   (__void_param : unit) : unit
  requires {  ( ( (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content > 0) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) }
  ensures {  ( ( ( (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = ((old Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content ) - 1)) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ (Standard__integer___axiom.dynamic_invariant Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content True True True True) ) }
  reads {Submarine_controls__airlockdoorslocked.airlockdoorslocked, Submarine_controls__loadedtorpedoes.loadedtorpedoes}
  writes {Submarine_controls__loadedtorpedoes.loadedtorpedoes}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "submarine_controls" defined at submarine_controls.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Submarine_controls__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Submarine_controls__maximumoxygen
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Submarine_controls__maximumdepth
 use        Submarine_controls__isreactoroverheated
 use        Submarine_controls__maximumtorpedoes
 use        Submarine_controls__storedtorpedoes
 use        Submarine_controls__maximumloadedtorpedoes
 use        Submarine_controls__loadedtorpedoes
 use        Standard__integer___axiom
 use        Submarine_controls__maximumoxygen___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Submarine_controls__currentdepth___axiom
 use        Submarine_controls__maximumdepth___axiom
 use        Submarine_controls__isreactoroverheated___axiom
 use        Submarine_controls__maximumtorpedoes___axiom
 use        Submarine_controls__storedtorpedoes___axiom
 use        Submarine_controls__maximumloadedtorpedoes___axiom
 use        Submarine_controls__loadedtorpedoes___axiom

 let def #"submarine_controls.ads" 1 0 0#"GP_Subp:submarine_controls.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 1 0 0# true }
  ensures { #"submarine_controls.ads" 1 0 0# true }
   =
  ( (#"submarine_controls.ads" 1 0 0# ());
  (#"submarine_controls.ads" 4 0 0# ());
  (#"submarine_controls.ads" 5 0 0# ());
  (#"submarine_controls.ads" 6 0 0# ());
  (#"submarine_controls.ads" 9 0 0# ( #"submarine_controls.ads" 9 0 0# abstract ensures {true}(let _ = 10000 in (
   ()))
   end ;
  #"submarine_controls.ads" 9 0 0# assume { #"submarine_controls.ads" 9 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__maximumoxygen.maximumoxygen True False True True) } ));
  (#"submarine_controls.ads" 11 0 0# ( #"submarine_controls.ads" 11 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine_controls.ads" 11 0 0# assume { #"submarine_controls.ads" 11 0 0# (Standard__integer___axiom.default_initial_assumption Submarine_controls__oxygenlevel.oxygenlevel.int__content False) };
  #"submarine_controls.ads" 11 0 0# assume { #"submarine_controls.ads" 11 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content False False True True) } ));
  (#"submarine_controls.ads" 13 0 0# ( #"submarine_controls.ads" 13 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine_controls.ads" 13 0 0# assume { #"submarine_controls.ads" 13 0 0# (Standard__integer___axiom.default_initial_assumption Submarine_controls__currentdepth.currentdepth.int__content False) };
  #"submarine_controls.ads" 13 0 0# assume { #"submarine_controls.ads" 13 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content False False True True) } ));
  (#"submarine_controls.ads" 15 0 0# ( #"submarine_controls.ads" 15 0 0# abstract ensures {true}(let _ = 5000 in (
   ()))
   end ;
  #"submarine_controls.ads" 15 0 0# assume { #"submarine_controls.ads" 15 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__maximumdepth.maximumdepth True False True True) } ));
  (#"submarine_controls.ads" 18 0 0# #"submarine_controls.ads" 18 0 0# Submarine_controls__isreactoroverheated.isreactoroverheated.bool__content <- ( (Boolean.of_int(0)) ));
  (#"submarine_controls.ads" 21 0 0# ( #"submarine_controls.ads" 21 0 0# abstract ensures {true}(let _ = 20 in (
   ()))
   end ;
  #"submarine_controls.ads" 21 0 0# assume { #"submarine_controls.ads" 21 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__maximumtorpedoes.maximumtorpedoes True False True True) } ));
  (#"submarine_controls.ads" 22 0 0# ( #"submarine_controls.ads" 22 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine_controls.ads" 22 0 0# assume { #"submarine_controls.ads" 22 0 0# (Standard__integer___axiom.default_initial_assumption Submarine_controls__storedtorpedoes.storedtorpedoes.int__content False) };
  #"submarine_controls.ads" 22 0 0# assume { #"submarine_controls.ads" 22 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__storedtorpedoes.storedtorpedoes.int__content False False True True) } ));
  (#"submarine_controls.ads" 24 0 0# ( #"submarine_controls.ads" 24 0 0# abstract ensures {true}(let _ = 6 in (
   ()))
   end ;
  #"submarine_controls.ads" 24 0 0# assume { #"submarine_controls.ads" 24 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__maximumloadedtorpedoes.maximumloadedtorpedoes True False True True) } ));
  (#"submarine_controls.ads" 25 0 0# ( #"submarine_controls.ads" 25 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine_controls.ads" 25 0 0# assume { #"submarine_controls.ads" 25 0 0# (Standard__integer___axiom.default_initial_assumption Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content False) };
  #"submarine_controls.ads" 25 0 0# assume { #"submarine_controls.ads" 25 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content False False True True) } ));
  (#"submarine_controls.ads" 32 0 0# ());
  (#"submarine_controls.ads" 35 0 0# ());
  (#"submarine_controls.ads" 34 0 0# ());
  (#"submarine_controls.ads" 33 0 0# ());
  (#"submarine_controls.ads" 37 0 0# ());
  (#"submarine_controls.ads" 42 0 0# ());
  (#"submarine_controls.ads" 40 0 0# ());
  (#"submarine_controls.ads" 38 0 0# ());
  (#"submarine_controls.ads" 44 0 0# ());
  (#"submarine_controls.ads" 47 0 0# ());
  (#"submarine_controls.ads" 46 0 0# ());
  (#"submarine_controls.ads" 45 0 0# ());
  (#"submarine_controls.ads" 49 0 0# ());
  (#"submarine_controls.ads" 54 0 0# ());
  (#"submarine_controls.ads" 52 0 0# ());
  (#"submarine_controls.ads" 50 0 0# ());
  (#"submarine_controls.ads" 56 0 0# ());
  (#"submarine_controls.ads" 61 0 0# ());
  (#"submarine_controls.ads" 59 0 0# ());
  (#"submarine_controls.ads" 57 0 0# ());
  (#"submarine_controls.ads" 71 0 0# ());
  (#"submarine_controls.ads" 75 0 0# ());
  (#"submarine_controls.ads" 73 0 0# ());
  (#"submarine_controls.ads" 72 0 0# ());
  (#"submarine_controls.ads" 78 0 0# ());
  (#"submarine_controls.ads" 82 0 0# ());
  (#"submarine_controls.ads" 81 0 0# ());
  (#"submarine_controls.ads" 79 0 0# ());
  (#"submarine_controls.ads" 84 0 0# ());
  (#"submarine_controls.ads" 91 0 0# ());
  (#"submarine_controls.ads" 97 0 0# ());
  (#"submarine_controls.ads" 94 0 0# ());
  (#"submarine_controls.ads" 92 0 0# ());
  (#"submarine_controls.ads" 104 0 0# ());
  (#"submarine_controls.ads" 110 0 0# ());
  (#"submarine_controls.ads" 107 0 0# ());
  (#"submarine_controls.ads" 105 0 0# ());
  (#"submarine_controls.ads" 118 0 0# ());
  (#"submarine_controls.ads" 121 0 0# ());
  (#"submarine_controls.ads" 120 0 0# ());
  (#"submarine_controls.ads" 119 0 0# ());
  (#"submarine_controls.ads" 124 0 0# ());
  (#"submarine_controls.ads" 129 0 0# ());
  (#"submarine_controls.ads" 126 0 0# ());
  (#"submarine_controls.ads" 125 0 0# ());
  (#"submarine_controls.ads" 135 0 0# ());
  (#"submarine_controls.ads" 140 0 0# ());
  (#"submarine_controls.ads" 137 0 0# ());
  (#"submarine_controls.ads" 136 0 0# ());
  (#"submarine_controls.adb" 2 0 0# ());
  (#"submarine_controls.adb" 7 0 0# ());
  (#"submarine_controls.adb" 13 0 0# ());
  (#"submarine_controls.adb" 19 0 0# ());
  (#"submarine_controls.adb" 25 0 0# ());
  (#"submarine_controls.adb" 34 0 0# ());
  (#"submarine_controls.adb" 42 0 0# ());
  (#"submarine_controls.adb" 63 0 0# ());
  (#"submarine_controls.adb" 74 0 0# ());
  (#"submarine_controls.adb" 96 0 0# ());
  (#"submarine_controls.adb" 105 0 0# ());
  (#"submarine_controls.adb" 117 0 0# ());
  (#"submarine_controls.adb" 124 0 0# ());
  (#"submarine_controls.adb" 134 0 0# ());
  ( "GP_Sloc:submarine_controls.adb:145:1" (#"submarine_controls.adb" 145 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeinnerairlock" defined at submarine_controls.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__closeinnerairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__innerairlockstate___axiom
 use        Submarine_controls__outerairlockstate___axiom

 let def #"submarine_controls.ads" 32 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:32" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 32 0 0# true }
  ensures { #"submarine_controls.ads" 32 0 0# (#"submarine_controls.ads" 35 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:submarine_controls.ads:35:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post => innerAirlockState = True and outerAirlockState = True;
             ^ submarine_controls.ads:35:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:2804" "GP_Sloc:submarine_controls.ads:35:14" ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2808" "GP_Sloc:submarine_controls.ads:35:43" ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:32 *)
  ;
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:32 *)
  ;
   abstract ensures {true}(let _ = ((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:32 *)
  ;
   assume {  ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:8:10" (#"submarine_controls.adb" 8 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:8:7" (#"submarine_controls.adb" 8 0 0# (if (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:9:10" (#"submarine_controls.adb" 9 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:9:28" (#"submarine_controls.adb" 9 0 0# #"submarine_controls.adb" 9 0 0# Submarine_controls__innerairlockstate.innerairlockstate.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openinnerairlock" defined at submarine_controls.ads:37, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__openinnerairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__innerairlockstate___axiom
 use        Submarine_controls__outerairlockstate___axiom
 use        Submarine_controls__airlockdoorslocked___axiom

 let def #"submarine_controls.ads" 37 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:37" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 37 0 0# true }
  ensures { #"submarine_controls.ads" 37 0 0# (#"submarine_controls.ads" 42 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:42:14" "GP_Id:1" "comment:     Post => innerAirlockState = False and outerAirlockState = True;
             ^ submarine_controls.ads:42:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:2849" "GP_Sloc:submarine_controls.ads:42:14" ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> false ) ) /\ ( "GP_Pretty_Ada:2853" "GP_Sloc:submarine_controls.ads:42:44" ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:37 *)
  ;
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:37 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:37 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) (((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:37 *)
  ;
   assume {  ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:14:10" (#"submarine_controls.adb" 14 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:14:39" (#"submarine_controls.adb" 14 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:14:7" (#"submarine_controls.adb" 14 0 0# (if ((Boolean.andb(((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:15:10" (#"submarine_controls.adb" 15 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:15:28" (#"submarine_controls.adb" 15 0 0# #"submarine_controls.adb" 15 0 0# Submarine_controls__innerairlockstate.innerairlockstate.bool__content <- ( (Boolean.of_int(0)) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeouterairlock" defined at submarine_controls.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__closeouterairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__innerairlockstate___axiom
 use        Submarine_controls__outerairlockstate___axiom

 let def #"submarine_controls.ads" 44 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:44" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 44 0 0# true }
  ensures { #"submarine_controls.ads" 44 0 0# (#"submarine_controls.ads" 47 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:47:14" "GP_Id:2" "comment:     Post => outerAirlockState = True and innerAirlockState = True;
             ^ submarine_controls.ads:47:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:2883" "GP_Sloc:submarine_controls.ads:47:14" ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2887" "GP_Sloc:submarine_controls.ads:47:43" ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:44 *)
  ;
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:44 *)
  ;
   abstract ensures {true}(let _ = ((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:44 *)
  ;
   assume {  ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:20:10" (#"submarine_controls.adb" 20 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:20:7" (#"submarine_controls.adb" 20 0 0# (if (((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:21:10" (#"submarine_controls.adb" 21 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:21:28" (#"submarine_controls.adb" 21 0 0# #"submarine_controls.adb" 21 0 0# Submarine_controls__outerairlockstate.outerairlockstate.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openouterairlock" defined at submarine_controls.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__openouterairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__innerairlockstate___axiom
 use        Submarine_controls__outerairlockstate___axiom
 use        Submarine_controls__airlockdoorslocked___axiom

 let def #"submarine_controls.ads" 49 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:49" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 49 0 0# true }
  ensures { #"submarine_controls.ads" 49 0 0# (#"submarine_controls.ads" 54 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:54:14" "GP_Id:3" "comment:     Post => innerAirlockState = True and outerAirlockState = False;
             ^ submarine_controls.ads:54:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:2928" "GP_Sloc:submarine_controls.ads:54:14" ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2932" "GP_Sloc:submarine_controls.ads:54:43" ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> false ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:49 *)
  ;
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:49 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) (((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:49 *)
  ;
   assume {  ( ( ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> false ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) /\ ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:26:10" (#"submarine_controls.adb" 26 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:26:39" (#"submarine_controls.adb" 26 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:26:7" (#"submarine_controls.adb" 26 0 0# (if ((Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:27:10" (#"submarine_controls.adb" 27 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:27:28" (#"submarine_controls.adb" 27 0 0# #"submarine_controls.adb" 27 0 0# Submarine_controls__outerairlockstate.outerairlockstate.bool__content <- ( (Boolean.of_int(0)) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockairlockdoors" defined at submarine_controls.ads:56, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__lockairlockdoors__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine_controls__innerairlockstate
 use        Submarine_controls__outerairlockstate
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__innerairlockstate___axiom
 use        Submarine_controls__outerairlockstate___axiom
 use        Submarine_controls__airlockdoorslocked___axiom

 let def #"submarine_controls.ads" 56 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:56" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 56 0 0# true }
  ensures { #"submarine_controls.ads" 56 0 0# (#"submarine_controls.ads" 61 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:61:14" "GP_Id:4" "comment:     Post => innerAirlockState = True and 
             ^ submarine_controls.ads:61:14:VC_POSTCONDITION" ( ( ( "GP_Pretty_Ada:2969" "GP_Sloc:submarine_controls.ads:61:14" ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:2973" "GP_Sloc:submarine_controls.ads:62:6" ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) ) /\ ( "GP_Pretty_Ada:2977" "GP_Sloc:submarine_controls.ads:63:6" ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:56 *)
  ;
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:56 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:56 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:56 *)
  ;
   assume {  ( ( (Submarine_controls__innerairlockstate.innerairlockstate.bool__content = True) <-> true ) /\ ( (Submarine_controls__outerairlockstate.outerairlockstate.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:35:10" (#"submarine_controls.adb" 35 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:35:39" (#"submarine_controls.adb" 35 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:35:7" (#"submarine_controls.adb" 35 0 0# (if ((Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:36:10" (#"submarine_controls.adb" 36 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:36:29" (#"submarine_controls.adb" 36 0 0# #"submarine_controls.adb" 36 0 0# Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Boolean.to_int(Submarine_controls__innerairlockstate.innerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (((Boolean.to_int(Submarine_controls__outerairlockstate.outerairlockstate.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreaseoxygen" defined at submarine_controls.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__decreaseoxygen__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Ada__text_io__put_line__2___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Temp___String_Literal_597
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Ada__text_io__put_line__2___axiom

 let def #"submarine_controls.ads" 71 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:71" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 71 0 0# true }
  ensures { #"submarine_controls.ads" 71 0 0# (#"submarine_controls.ads" 75 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine_controls.ads:75:14" "GP_Id:6" "comment:     Post => oxygenLevel >= 0;
             ^ submarine_controls.ads:75:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:14377" "GP_Sloc:submarine_controls.ads:75:14" (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:71 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:71 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:71 *)
  ;
   assume {  ( (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:48:10" (#"submarine_controls.adb" 48 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:48:33" (#"submarine_controls.adb" 48 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:48:7" (#"submarine_controls.adb" 48 0 0# (if ((Boolean.andb((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:49:10" (#"submarine_controls.adb" 49 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:49:25" (#"submarine_controls.adb" 49 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:49:22" (#"submarine_controls.adb" 49 0 0# #"submarine_controls.adb" 49 0 0# Submarine_controls__oxygenlevel.oxygenlevel.int__content <- ( (#"submarine_controls.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine_controls.adb:49:37" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:5" "comment:         oxygenLevel := oxygenLevel - 100;             
                                    ^ submarine_controls.adb:49:37:VC_OVERFLOW_CHECK" "GP_Shape:if__oxygenlevel_assign__sub" (Standard__integer.range_check_((Submarine_controls__oxygenlevel.oxygenlevel.int__content - 100))) )) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine_controls.adb:53:10" (#"submarine_controls.adb" 53 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:53:7" (#"submarine_controls.adb" 53 0 0# (if ((Submarine_controls__oxygenlevel.oxygenlevel.int__content <= 500)) then (
    ( ( "GP_Sloc:submarine_controls.adb:54:10" (#"submarine_controls.adb" 54 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:55:9" (#"submarine_controls.adb" 55 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:55:9" (#"submarine_controls.adb" 55 0 0# ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_597.temp___String_Literal_597(()))) (1) (29)))) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkoxygenstatus" defined at submarine_controls.ads:78, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__checkoxygenstatus__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Submarine_controls__currentdepth___axiom

 let def #"submarine_controls.ads" 78 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:78" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 78 0 0# true }
  ensures { #"submarine_controls.ads" 78 0 0# (#"submarine_controls.ads" 82 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine_controls.ads:82:15" "GP_Id:7" "comment:     Post =>  oxygenLevel >= 0;
              ^ submarine_controls.ads:82:15:VC_POSTCONDITION" ( "GP_Pretty_Ada:14426" "GP_Sloc:submarine_controls.ads:82:15" (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:78 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:78 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:78 *)
  ;
   abstract ensures {true}(let _ = (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:78 *)
  ;
   assume {  (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:65:10" (#"submarine_controls.adb" 65 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:65:30" (#"submarine_controls.adb" 65 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:65:7" (#"submarine_controls.adb" 65 0 0# (if ((Boolean.andb((Submarine_controls__oxygenlevel.oxygenlevel.int__content = 0)) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:67:13" (#"submarine_controls.adb" 67 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:67:26" (#"submarine_controls.adb" 67 0 0# #"submarine_controls.adb" 67 0 0# Submarine_controls__currentdepth.currentdepth.int__content <- ( 0 )) );
    ( "GP_Sloc:submarine_controls.adb:68:13" (#"submarine_controls.adb" 68 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:68:25" (#"submarine_controls.adb" 68 0 0# #"submarine_controls.adb" 68 0 0# Submarine_controls__oxygenlevel.oxygenlevel.int__content <- ( 10000 )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkreactorstatus" defined at submarine_controls.ads:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__checkreactorstatus__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Submarine_controls__isreactoroverheated
 use        Standard__integer___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Submarine_controls__currentdepth___axiom
 use        Submarine_controls__isreactoroverheated___axiom

 let def #"submarine_controls.ads" 84 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:84" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 84 0 0# true }
  ensures { #"submarine_controls.ads" 84 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:84 *)
  ;
  #"submarine_controls.ads" 84 0 0# assume { #"submarine_controls.ads" 84 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True False True True) };
  #"submarine_controls.ads" 84 0 0# assume { #"submarine_controls.ads" 84 0 0# (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True False True True) };
  #"submarine_controls.ads" 84 0 0# assume { #"submarine_controls.ads" 84 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:84 *)
  ;
  #"submarine_controls.ads" 84 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:84 *)
  ;
  #"submarine_controls.ads" 84 0 0# assume { #"submarine_controls.ads" 84 0 0# true };
  #"submarine_controls.ads" 84 0 0# try
   ( ( "GP_Sloc:submarine_controls.adb:75:10" (#"submarine_controls.adb" 75 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:75:7" (#"submarine_controls.adb" 75 0 0# (if (((Boolean.to_int(Submarine_controls__isreactoroverheated.isreactoroverheated.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:76:10" (#"submarine_controls.adb" 76 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:76:23" (#"submarine_controls.adb" 76 0 0# #"submarine_controls.adb" 76 0 0# Submarine_controls__currentdepth.currentdepth.int__content <- ( 0 )) );
    ( "GP_Sloc:submarine_controls.adb:77:10" (#"submarine_controls.adb" 77 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:77:22" (#"submarine_controls.adb" 77 0 0# #"submarine_controls.adb" 77 0 0# Submarine_controls__oxygenlevel.oxygenlevel.int__content <- ( 10000 )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increasedepth" defined at submarine_controls.ads:91, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__increasedepth__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Submarine_controls__currentdepth___axiom

 let def #"submarine_controls.ads" 91 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:91" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 91 0 0# true }
  ensures { #"submarine_controls.ads" 91 0 0# (#"submarine_controls.ads" 98 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:98:8" "GP_Id:9" "comment:       airlockDoorsLocked = True and 
       ^ submarine_controls.ads:98:8:VC_POSTCONDITION" ( ( ( ( "GP_Pretty_Ada:3094" "GP_Sloc:submarine_controls.ads:98:8" ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:3098" "GP_Sloc:submarine_controls.ads:99:8" (Submarine_controls__currentdepth.currentdepth.int__content <= 5000) ) ) /\ ( "GP_Pretty_Ada:3102" "GP_Sloc:submarine_controls.ads:100:8" (Submarine_controls__currentdepth.currentdepth.int__content >= 0) ) ) /\ ( "GP_Pretty_Ada:3106" "GP_Sloc:submarine_controls.ads:101:8" (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:91 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:91 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:91 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Submarine_controls__currentdepth.currentdepth.int__content < 5000)) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:91 *)
  ;
   assume {  ( ( (Submarine_controls__currentdepth.currentdepth.int__content < 5000) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:98:10" (#"submarine_controls.adb" 98 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:98:49" (#"submarine_controls.adb" 98 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:98:72" (#"submarine_controls.adb" 98 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:98:7" (#"submarine_controls.adb" 98 0 0# (if ((Boolean.andb((Boolean.andb((Submarine_controls__currentdepth.currentdepth.int__content <= 4900)) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:99:10" (#"submarine_controls.adb" 99 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:99:26" (#"submarine_controls.adb" 99 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:99:23" (#"submarine_controls.adb" 99 0 0# #"submarine_controls.adb" 99 0 0# Submarine_controls__currentdepth.currentdepth.int__content <- ( (#"submarine_controls.adb" 99 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:99:39" "GP_Id:8" "comment:         currentDepth := currentDepth + 100;
                                      ^ submarine_controls.adb:99:39:VC_OVERFLOW_CHECK" "GP_Shape:if__currentdepth_assign__add" (Standard__integer.range_check_((Submarine_controls__currentdepth.currentdepth.int__content + 100))) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb(((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) ((Submarine_controls__currentdepth.currentdepth.int__content <= 5000)))) ((Submarine_controls__currentdepth.currentdepth.int__content >= 0)))) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasedepth" defined at submarine_controls.ads:104, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__decreasedepth__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__oxygenlevel
 use        Submarine_controls__currentdepth
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__oxygenlevel___axiom
 use        Submarine_controls__currentdepth___axiom

 let def #"submarine_controls.ads" 104 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:104" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 104 0 0# true }
  ensures { #"submarine_controls.ads" 104 0 0# (#"submarine_controls.ads" 111 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:111:8" "GP_Id:11" "comment:       airlockDoorsLocked = True and 
       ^ submarine_controls.ads:111:8:VC_POSTCONDITION" ( ( ( ( "GP_Pretty_Ada:3147" "GP_Sloc:submarine_controls.ads:111:8" ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) /\ ( "GP_Pretty_Ada:3151" "GP_Sloc:submarine_controls.ads:112:8" (Submarine_controls__currentdepth.currentdepth.int__content <= 5000) ) ) /\ ( "GP_Pretty_Ada:3155" "GP_Sloc:submarine_controls.ads:113:8" (Submarine_controls__currentdepth.currentdepth.int__content >= 0) ) ) /\ ( "GP_Pretty_Ada:3159" "GP_Sloc:submarine_controls.ads:114:8" (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:104 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__currentdepth.currentdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:104 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:104 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Submarine_controls__currentdepth.currentdepth.int__content < 5000)) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:104 *)
  ;
   assume {  ( ( (Submarine_controls__currentdepth.currentdepth.int__content < 5000) /\ (Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   try
   ( ( "GP_Sloc:submarine_controls.adb:107:10" (#"submarine_controls.adb" 107 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:107:49" (#"submarine_controls.adb" 107 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:107:72" (#"submarine_controls.adb" 107 0 0# ()) );
   ( "GP_Sloc:submarine_controls.adb:107:7" (#"submarine_controls.adb" 107 0 0# (if ((Boolean.andb((Boolean.andb((Submarine_controls__currentdepth.currentdepth.int__content <= 4900)) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 100)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
    ( ( "GP_Sloc:submarine_controls.adb:108:10" (#"submarine_controls.adb" 108 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:108:26" (#"submarine_controls.adb" 108 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:108:23" (#"submarine_controls.adb" 108 0 0# #"submarine_controls.adb" 108 0 0# Submarine_controls__currentdepth.currentdepth.int__content <- ( (#"submarine_controls.adb" 108 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:108:39" "GP_Id:10" "comment:         currentDepth := currentDepth - 100;
                                      ^ submarine_controls.adb:108:39:VC_OVERFLOW_CHECK" "GP_Shape:if__currentdepth_assign__sub" (Standard__integer.range_check_((Submarine_controls__currentdepth.currentdepth.int__content - 100))) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb(((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) ((Submarine_controls__currentdepth.currentdepth.int__content <= 5000)))) ((Submarine_controls__currentdepth.currentdepth.int__content >= 0)))) ((Submarine_controls__oxygenlevel.oxygenlevel.int__content >= 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "storetorpedo" defined at submarine_controls.ads:118, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__storetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Submarine_controls__storedtorpedoes
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__storedtorpedoes___axiom

 let def #"submarine_controls.ads" 118 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:118" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 118 0 0# true }
  ensures { #"submarine_controls.ads" 118 0 0# (#"submarine_controls.ads" 121 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:121:14" "GP_Id:14" "comment:     Post => storedTorpedoes <= maximumTorpedoes and 
             ^ submarine_controls.ads:121:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3186" "GP_Sloc:submarine_controls.ads:121:14" (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content <= 20) ) /\ ( "GP_Pretty_Ada:3190" "GP_Sloc:submarine_controls.ads:122:14" (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = ((old Submarine_controls__storedtorpedoes.storedtorpedoes.int__content ) + 1)) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:118 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__storedtorpedoes.storedtorpedoes.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:118 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:118 *)
  ;
   abstract ensures {true}(let _ = (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content < 20) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:118 *)
  ;
   assume {  (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content < 20) };
   abstract ensures {true}(let _ = Submarine_controls__storedtorpedoes.storedtorpedoes.int__content in (
   ()))
   end ;
  (let temp___old_598 =  (any int
  ensures { (result = Submarine_controls__storedtorpedoes.storedtorpedoes.int__content)} 
  ) in (
   (  try
    ( ( "GP_Sloc:submarine_controls.adb:118:10" (#"submarine_controls.adb" 118 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:118:7" (#"submarine_controls.adb" 118 0 0# (if ((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content < 20)) then (
     ( ( "GP_Sloc:submarine_controls.adb:119:10" (#"submarine_controls.adb" 119 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:119:29" (#"submarine_controls.adb" 119 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:119:26" (#"submarine_controls.adb" 119 0 0# #"submarine_controls.adb" 119 0 0# Submarine_controls__storedtorpedoes.storedtorpedoes.int__content <- ( (#"submarine_controls.adb" 119 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:119:45" "GP_Id:12" "comment:         storedTorpedoes := storedTorpedoes + 1;
                                            ^ submarine_controls.adb:119:45:VC_OVERFLOW_CHECK" "GP_Shape:if__storedtorpedoes_assign__add" (Standard__integer.range_check_((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content + 1))) )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = (Boolean.andb((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content <= 20)) ((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = (#"submarine_controls.ads" 122 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.ads:122:52" "GP_Id:13" "comment:             storedTorpedoes = storedTorpedoes'Old + 1;
                                                   ^ submarine_controls.ads:122:52:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__cmp__add" (Standard__integer.range_check_((temp___old_598 + 1))) ))))) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadtorpedo" defined at submarine_controls.ads:124, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__loadtorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__storedtorpedoes
 use        Submarine_controls__loadedtorpedoes
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__storedtorpedoes___axiom
 use        Submarine_controls__loadedtorpedoes___axiom

 let def #"submarine_controls.ads" 124 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:124" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 124 0 0# true }
  ensures { #"submarine_controls.ads" 124 0 0# (#"submarine_controls.ads" 129 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:129:14" "GP_Id:19" "comment:     Post => storedTorpedoes >= 0 and 
             ^ submarine_controls.ads:129:14:VC_POSTCONDITION" ( ( ( ( ( "GP_Pretty_Ada:3235" "GP_Sloc:submarine_controls.ads:129:14" (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 0) ) /\ ( "GP_Pretty_Ada:3239" "GP_Sloc:submarine_controls.ads:130:14" (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6) ) ) /\ ( "GP_Pretty_Ada:3243" "GP_Sloc:submarine_controls.ads:131:6" (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = ((old Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content ) + 1)) ) ) /\ ( "GP_Pretty_Ada:3251" "GP_Sloc:submarine_controls.ads:132:6" (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = ((old Submarine_controls__storedtorpedoes.storedtorpedoes.int__content ) - 1)) ) ) /\ ( "GP_Pretty_Ada:3259" "GP_Sloc:submarine_controls.ads:133:6" ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:124 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__storedtorpedoes.storedtorpedoes.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:124 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:124 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 1)) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:124 *)
  ;
   assume {  ( ( (Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 1) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   abstract ensures {true}(let _ = Submarine_controls__storedtorpedoes.storedtorpedoes.int__content in (
   ()))
   end ;
  (let temp___old_600 =  (any int
  ensures { (result = Submarine_controls__storedtorpedoes.storedtorpedoes.int__content)} 
  ) in (
   (  abstract ensures {true}(let _ = Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content in (
    ()))
    end ;
   (let temp___old_599 =  (any int
   ensures { (result = Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content)} 
   ) in (
    (  try
     ( ( "GP_Sloc:submarine_controls.adb:125:10" (#"submarine_controls.adb" 125 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:126:13" (#"submarine_controls.adb" 126 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:127:13" (#"submarine_controls.adb" 127 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:125:7" (#"submarine_controls.adb" 125 0 0# (if ((Boolean.andb((Boolean.andb((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6)) ((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 1)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
      ( ( "GP_Sloc:submarine_controls.adb:128:10" (#"submarine_controls.adb" 128 0 0# ()) );
      ( "GP_Sloc:submarine_controls.adb:128:29" (#"submarine_controls.adb" 128 0 0# ()) );
      ( "GP_Sloc:submarine_controls.adb:128:26" (#"submarine_controls.adb" 128 0 0# #"submarine_controls.adb" 128 0 0# Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <- ( (#"submarine_controls.adb" 128 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:128:45" "GP_Id:15" "comment:         loadedTorpedoes := loadedTorpedoes +1;
                                            ^ submarine_controls.adb:128:45:VC_OVERFLOW_CHECK" "GP_Shape:if__loadedtorpedoes_assign__add" (Standard__integer.range_check_((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content + 1))) )) )) );
      ( "GP_Sloc:submarine_controls.adb:129:10" (#"submarine_controls.adb" 129 0 0# ()) );
      ( "GP_Sloc:submarine_controls.adb:129:29" (#"submarine_controls.adb" 129 0 0# ()) );
      ( "GP_Sloc:submarine_controls.adb:129:26" (#"submarine_controls.adb" 129 0 0# #"submarine_controls.adb" 129 0 0# Submarine_controls__storedtorpedoes.storedtorpedoes.int__content <- ( (#"submarine_controls.adb" 129 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:129:45" "GP_Id:16" "comment:         storedTorpedoes := storedTorpedoes - 1;
                                            ^ submarine_controls.adb:129:45:VC_OVERFLOW_CHECK" "GP_Shape:if__storedtorpedoes_assign__sub" (Standard__integer.range_check_((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content - 1))) )) )) ) )) else (
      ()))) );
      raise Return__exc )
    with
     Return__exc -> ()
    end;
     abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content >= 0)) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6)))) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = (#"submarine_controls.ads" 131 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.ads:131:44" "GP_Id:17" "comment:     loadedTorpedoes = loadedTorpedoes'Old + 1 and  
                                           ^ submarine_controls.ads:131:44:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__and__cmp__add" (Standard__integer.range_check_((temp___old_599 + 1))) )))))) ((Submarine_controls__storedtorpedoes.storedtorpedoes.int__content = (#"submarine_controls.ads" 132 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.ads:132:44" "GP_Id:18" "comment:     storedTorpedoes = storedTorpedoes'Old - 1 and 
                                           ^ submarine_controls.ads:132:44:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__cmp__sub" (Standard__integer.range_check_((temp___old_600 - 1))) )))))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
     ()))
     end  )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firetorpedo" defined at submarine_controls.ads:135, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine_controls__firetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked
 use        Submarine_controls__loadedtorpedoes
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Submarine_controls__airlockdoorslocked___axiom
 use        Submarine_controls__loadedtorpedoes___axiom

 let def #"submarine_controls.ads" 135 0 0#"W:diverges:N" "GP_Subp:submarine_controls.ads:135" 
   (__void_param : unit)
  requires { #"submarine_controls.ads" 135 0 0# true }
  ensures { #"submarine_controls.ads" 135 0 0# (#"submarine_controls.ads" 140 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine_controls.ads:140:14" "GP_Id:22" "comment:     Post => loadedTorpedoes = loadedTorpedoes'Old - 1 and 
             ^ submarine_controls.ads:140:14:VC_POSTCONDITION" ( ( ( "GP_Pretty_Ada:3298" "GP_Sloc:submarine_controls.ads:140:14" (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = ((old Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content ) - 1)) ) /\ ( "GP_Pretty_Ada:3306" "GP_Sloc:submarine_controls.ads:141:6" (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6) ) ) /\ ( "GP_Pretty_Ada:3310" "GP_Sloc:submarine_controls.ads:142:6" ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine_controls.ads:135 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine_controls.ads:135 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine_controls.ads:135 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content > 0)) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine_controls.ads:135 *)
  ;
   assume {  ( ( (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content > 0) /\ (Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6) ) /\ ( (Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content = True) <-> true ) ) };
   abstract ensures {true}(let _ = Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content in (
   ()))
   end ;
  (let temp___old_601 =  (any int
  ensures { (result = Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content)} 
  ) in (
   (  try
    ( ( "GP_Sloc:submarine_controls.adb:135:10" (#"submarine_controls.adb" 135 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:136:13" (#"submarine_controls.adb" 136 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:137:13" (#"submarine_controls.adb" 137 0 0# ()) );
    ( "GP_Sloc:submarine_controls.adb:135:7" (#"submarine_controls.adb" 135 0 0# (if ((Boolean.andb((Boolean.andb((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <= 6)) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content > 0)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))))) then (
     ( ( "GP_Sloc:submarine_controls.adb:138:10" (#"submarine_controls.adb" 138 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:138:29" (#"submarine_controls.adb" 138 0 0# ()) );
     ( "GP_Sloc:submarine_controls.adb:138:26" (#"submarine_controls.adb" 138 0 0# #"submarine_controls.adb" 138 0 0# Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content <- ( (#"submarine_controls.adb" 138 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:submarine_controls.adb:138:45" "GP_Id:20" "comment:         loadedTorpedoes := loadedTorpedoes - 1;
                                            ^ submarine_controls.adb:138:45:VC_OVERFLOW_CHECK" "GP_Shape:if__loadedtorpedoes_assign__sub" (Standard__integer.range_check_((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content - 1))) )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content = (#"submarine_controls.ads" 140 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__cmp__sub" "GP_Sloc:submarine_controls.ads:140:52" "GP_Id:21" "comment:     Post => loadedTorpedoes = loadedTorpedoes'Old - 1 and 
                                                   ^ submarine_controls.ads:140:52:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((temp___old_601 - 1))) )))) ((Submarine_controls__loadedtorpedoes.loadedtorpedoes.int__content < 6)))) (((Boolean.to_int(Submarine_controls__airlockdoorslocked.airlockdoorslocked.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))))) in (
    ()))
    end  )))
   )
end
